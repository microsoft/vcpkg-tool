variables:
- name: Codeql.Enabled
  value: true
jobs:
- job: linux_gcc_9
  displayName: 'Ubuntu 20.04 with GCC 9'
  pool:
    vmImage: 'ubuntu-20.04'
  variables:
    - name: 'VCPKG_ROOT'
      value: $(Build.SourcesDirectory)/vcpkg-root
  steps:
    - bash: |
        git clone https://github.com/microsoft/vcpkg "$VCPKG_ROOT" -n
        git -C "$VCPKG_ROOT" checkout `cat vcpkg-init/vcpkg-scripts-sha.txt`
      displayName: "Clone vcpkg repo to serve as root"
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'
    - task: Npm@1
      inputs:
        command: 'custom'
        workingDir: 'vcpkg-artifacts'
        customCommand: 'ci'
    - bash: |
        cmake '-DCMAKE_CXX_FLAGS=-fprofile-arcs -fPIC -O0 -fsanitize=undefined -fsanitize=address' -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -DVCPKG_DEVELOPMENT_WARNINGS=ON -DVCPKG_WARNINGS_AS_ERRORS=ON -DVCPKG_BUILD_BENCHMARKING=ON -DVCPKG_BUILD_FUZZING=ON -DVCPKG_ARTIFACTS_DEVELOPMENT=ON -B build.amd64.debug
        make -j 2 -C build.amd64.debug
      displayName: "Build vcpkg with CMake"
      failOnStderr: true
    - bash: build.amd64.debug/vcpkg-test
      displayName: 'Run vcpkg unit tests'
      env:
        VCPKG_ROOT: UNIT_TESTS_SHOULD_NOT_USE_VCPKG_ROOT
    - script: |
        cd build.amd64.debug/vcpkg-artifacts
        node node_modules/mocha/bin/mocha --config mocha-config.yaml
      displayName: Run vcpkg-artifacts unit tests
    - task: PowerShell@2
      displayName: 'Run vcpkg end-to-end tests'
      inputs:
        filePath: 'azure-pipelines/end-to-end-tests.ps1'
        workingDirectory: '$(Build.SourcesDirectory)/build.amd64.debug'
        pwsh: true
        arguments: '-RunArtifactsTests'
- job: osx
  displayName: 'OSX'
  pool:
    vmImage: 'macOS-12'
  variables:
    - name: 'VCPKG_ROOT'
      value: $(Build.SourcesDirectory)/vcpkg-root
  steps:
    - bash: |
        git clone https://github.com/microsoft/vcpkg "$VCPKG_ROOT" -n
        git -C "$VCPKG_ROOT" checkout `cat vcpkg-init/vcpkg-scripts-sha.txt`
      displayName: "Clone vcpkg repo to serve as root"
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'
    - task: Npm@1
      inputs:
        command: 'custom'
        workingDir: 'vcpkg-artifacts'
        customCommand: 'ci'
    - bash: |
        cmake '-DCMAKE_CXX_FLAGS=-fsanitize=undefined -fsanitize=address' -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -DVCPKG_DEVELOPMENT_WARNINGS=ON -DVCPKG_WARNINGS_AS_ERRORS=ON -DVCPKG_BUILD_BENCHMARKING=ON -DVCPKG_BUILD_FUZZING=ON -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13 -DVCPKG_ARTIFACTS_DEVELOPMENT=ON -B build.amd64.debug
        make -j 2 -C build.amd64.debug
      displayName: "Build vcpkg with CMake"
      failOnStderr: true
    - bash: build.amd64.debug/vcpkg-test
      displayName: 'Run vcpkg unit tests'
    - script: |
        cd build.amd64.debug/vcpkg-artifacts
        node node_modules/mocha/bin/mocha --config mocha-config.yaml
      displayName: Run vcpkg-artifacts unit tests
    - bash: brew install pkg-config
      displayName: 'Install pkgconfig'
    - task: PowerShell@2
      displayName: 'Run vcpkg end-to-end tests'
      inputs:
        filePath: 'azure-pipelines/end-to-end-tests.ps1'
        workingDirectory: '$(Build.SourcesDirectory)/build.amd64.debug'
        pwsh: true
        arguments: '-RunArtifactsTests'
- job: windows
  displayName: 'Windows'
  timeoutInMinutes: 120
  pool:
    vmImage: 'windows-2022'
  variables:
  - name: DiffFile
    value: $(Build.ArtifactStagingDirectory)\format.diff
  - name: 'VCPKG_ROOT'
    value: $(Build.SourcesDirectory)\vcpkg-root
  - name: Codeql.BuildIdentifier
    value: vcpkg_pr
  - name: Codeql.Language
    value: cpp,javascript
  steps:
    - task: Powershell@2
      displayName: "Clone vcpkg repo to serve as root"
      inputs:
        pwsh: true
        targetType: inline
        script: |
          $sha = (Get-Content vcpkg-init/vcpkg-scripts-sha.txt -Raw).Trim()
          git clone https://github.com/microsoft/vcpkg $env:VCPKG_ROOT -n
          git -C "$env:VCPKG_ROOT" checkout $sha
    - task: Powershell@2
      displayName: 'Format C++'
      inputs:
        filePath: 'azure-pipelines/Format-CxxCode.ps1'
        pwsh: true
    - task: UseNode@1
      displayName: Use Node 18
      inputs:
        version: "18.x"
    - task: Npm@1
      inputs:
        command: 'custom'
        workingDir: 'vcpkg-artifacts'
        customCommand: 'ci'
    - task: CodeQL3000Init@0
      displayName: 'CodeQL Initialize'
    - task: CmdLine@2
      displayName: "Build vcpkg with CMake"
      inputs:
        script: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=amd64 -host_arch=amd64
          rmdir /s /q build.amd64.debug > nul 2> nul
          cmake.exe -G Ninja -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -DVCPKG_DEVELOPMENT_WARNINGS=ON -DVCPKG_WARNINGS_AS_ERRORS=ON -DVCPKG_BUILD_BENCHMARKING=ON -DVCPKG_BUILD_FUZZING=ON -DVCPKG_BUILD_TLS12_DOWNLOADER=ON -DVCPKG_ARTIFACTS_DEVELOPMENT=ON -B build.amd64.debug
          ninja.exe -C build.amd64.debug all generate-message-map
        failOnStderr: true
    - task: CodeQL3000Finalize@0
      displayName: 'CodeQL Finalize'
    - task: Powershell@2
      displayName: 'Create Diff'
      inputs:
        filePath: azure-pipelines/Create-PRDiff.ps1
        arguments: '-DiffFile $(DiffFile)'
        pwsh: true
    - task: PublishBuildArtifacts@1
      condition: failed()
      displayName: 'Publish Format and Messages File Diff'
      inputs:
        PathtoPublish: '$(DiffFile)'
        ArtifactName: 'format.diff'
    - script: build.amd64.debug\vcpkg-test.exe
      displayName: "Run vcpkg unit tests"
      failOnStderr: true
      env:
        VCPKG_ROOT: UNIT_TESTS_SHOULD_NOT_USE_VCPKG_ROOT
    - script: |
        cd build.amd64.debug\vcpkg-artifacts
        node node_modules\mocha\bin\mocha --config mocha-config.yaml
      displayName: Run vcpkg-artifacts unit tests
    - task: PowerShell@2
      displayName: 'Run vcpkg end-to-end tests'
      inputs:
        filePath: 'azure-pipelines/end-to-end-tests.ps1'
        workingDirectory: '$(Build.SourcesDirectory)/build.amd64.debug'
        pwsh: true
        arguments: '-RunArtifactsTests'