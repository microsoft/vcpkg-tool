jobs:
- job: linux_gcc_9
  displayName: 'Ubuntu 20.04 with GCC 9'
  pool:
    vmImage: 'ubuntu-20.04'
  variables:
    - name: 'VCPKG_ROOT'
      value: $(Build.SourcesDirectory)/vcpkg-root
  steps:
    - bash: |
        git clone https://github.com/microsoft/vcpkg "$VCPKG_ROOT" -n
        git -C "$VCPKG_ROOT" checkout `cat vcpkg-init/vcpkg-scripts-sha.txt`
      displayName: "Clone vcpkg repo to serve as root"
    - bash: |
        export CXXFLAGS="-fprofile-arcs -ftest-coverage -fPIC -O0"
        cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -DVCPKG_DEVELOPMENT_WARNINGS=ON -DVCPKG_WARNINGS_AS_ERRORS=ON -DVCPKG_BUILD_FUZZING=ON -B build.amd64.debug
        make -j 2 -C build.amd64.debug
      displayName: "Build vcpkg with CMake"
      failOnStderr: true
    - bash: build.amd64.debug/vcpkg-test
      displayName: 'Run vcpkg tests'
    - task: PowerShell@2
      displayName: 'Run vcpkg end-to-end tests'
      inputs:
        filePath: 'azure-pipelines/end-to-end-tests.ps1'
        arguments: '-Triplet x64-linux -WorkingRoot work -VcpkgRoot $(VCPKG_ROOT)'
        workingDirectory: '$(Build.SourcesDirectory)/build.amd64.debug'
        pwsh: true
    - bash: |
        sudo pip install gcovr
      displayName: "Install coverage tools"
    - bash: |
        mkdir -p "$(Build.SourcesDirectory)/coverage"
        cd build.amd64.debug
        gcovr --xml --output "$(Build.SourcesDirectory)/coverage/coverage.xml" \
          --root "$(Build.SourcesDirectory)" \
          --exclude '(.+/)?CMakeFiles/' \
          --exclude '(.+/)?catch2/' \
          --exclude '(.+/)?vcpkg-fuzz/' \
          --exclude '(.+/)?vcpkg-test/' \
          --print-summary \
          .
      displayName: "Analyse test coverage"
      failOnStderr: true
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/coverage/coverage.xml'
      displayName: 'Publish test coverage results'
- job: osx
  displayName: 'OSX'
  pool:
    vmImage: 'macOS-11'
  variables:
    - name: 'VCPKG_ROOT'
      value: $(Build.SourcesDirectory)/vcpkg-root
  steps:
    - bash: |
        git clone https://github.com/microsoft/vcpkg "$VCPKG_ROOT" -n
        git -C "$VCPKG_ROOT" checkout `cat vcpkg-init/vcpkg-scripts-sha.txt`
      displayName: "Clone vcpkg repo to serve as root"
    - bash: |
        cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -DVCPKG_DEVELOPMENT_WARNINGS=ON -DVCPKG_WARNINGS_AS_ERRORS=ON -DVCPKG_BUILD_FUZZING=ON -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13 -B build.amd64.debug
        make -j 2 -C build.amd64.debug
      displayName: "Build vcpkg with CMake"
      failOnStderr: true
    - bash: build.amd64.debug/vcpkg-test
      displayName: 'Run vcpkg tests'
    - task: PowerShell@2
      displayName: 'Run vcpkg end-to-end tests'
      inputs:
        filePath: 'azure-pipelines/end-to-end-tests.ps1'
        arguments: '-Triplet x64-osx -WorkingRoot work -VcpkgRoot $(VCPKG_ROOT)'
        workingDirectory: '$(Build.SourcesDirectory)/build.amd64.debug'
        pwsh: true
- job: windows
  displayName: 'Windows'
  pool:
    vmImage: 'windows-latest'
  variables:
  - name: DiffFile
    value: $(Build.ArtifactStagingDirectory)\format.diff
  - name: 'VCPKG_ROOT'
    value: $(Build.SourcesDirectory)\vcpkg-root
  steps:
    - task: Powershell@2
      displayName: 'Format C++'
      inputs:
        filePath: 'azure-pipelines/Format-CxxCode.ps1'
        pwsh: true
    - task: Powershell@2
      displayName: 'Create Diff'
      inputs:
        filePath: azure-pipelines/Create-PRDiff.ps1
        arguments: '-DiffFile $(DiffFile)'
        pwsh: true
    - task: PublishBuildArtifacts@1
      condition: failed()
      displayName: 'Publish Format and Documentation Diff'
      inputs:
        PathtoPublish: '$(DiffFile)'
        ArtifactName: 'format.diff'
    - task: Powershell@2
      displayName: "Clone vcpkg repo to serve as root"
      inputs:
        pwsh: true
        targetType: inline
        script: |
          $sha = (Get-Content vcpkg-init/vcpkg-scripts-sha.txt -Raw).Trim()
          git clone https://github.com/microsoft/vcpkg $env:VCPKG_ROOT -n
          git -C "$env:VCPKG_ROOT" checkout $sha
    - task: CmdLine@2
      displayName: "Build vcpkg with CMake, and Run Tests"
      inputs:
        script: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x86 -host_arch=x86
          rmdir /s /q build.x86.debug > nul 2> nul
          cmake.exe -G Ninja -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -DVCPKG_DEVELOPMENT_WARNINGS=ON -DVCPKG_WARNINGS_AS_ERRORS=ON -DVCPKG_BUILD_FUZZING=ON -DVCPKG_BUILD_TLS12_DOWNLOADER=ON -B build.x86.debug
          ninja.exe -C build.x86.debug
          build.x86.debug\vcpkg-test.exe
        failOnStderr: true
    - task: PowerShell@2
      displayName: 'Run vcpkg end-to-end tests'
      inputs:
        filePath: 'azure-pipelines/end-to-end-tests.ps1'
        arguments: '-Triplet x86-windows -WorkingRoot work'
        workingDirectory: '$(Build.SourcesDirectory)/build.x86.debug'
        pwsh: true
