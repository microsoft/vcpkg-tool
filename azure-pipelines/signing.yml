# This script is used internally to produce signed vcpkg builds.
# It uses machines / tasks that are not exposed here on GitHub, as
# the hardware on which we allow signing is restricted.

trigger: none

parameters:
- name: SignTypeOverride
  displayName: Signing Type Override
  type: string
  default: default
  values:
  - default
  - test
  - real

variables:
  TeamName: vcpkg
  # If the user didn't override the signing type, then only real-sign on main.
  ${{ if ne(parameters.SignTypeOverride, 'default') }}:
    SignType: ${{ parameters.SignTypeOverride }}
  ${{ if and(eq(parameters.SignTypeOverride, 'default'), or(eq(variables['Build.SourceBranchName'], 'main'), startsWith(variables['Build.SourceBranch'], 'refs/tags'))) }}:
    SignType: real
  ${{ if and(eq(parameters.SignTypeOverride, 'default'), not(or(eq(variables['Build.SourceBranchName'], 'main'), startsWith(variables['Build.SourceBranch'], 'refs/tags')))) }}:
    SignType: test

jobs:
  - job: macos_build
    displayName: 'MacOS Build'
    pool:
      vmImage: macOS-10.15
    variables:
    - group: vcpkg-dependency-source-blobs
    - name: FMT_TARBALL_URL
      value: "$(fmt-tarball-url)"
    - name: FMT_TARBALL_SHA
      value: "$(fmt-tarball-sha)"
    - name: FMT_TARBALL_DIRNAME
      value: "$(fmt-tarball-dirname)"
    steps:
    - task: CmdLine@2
      displayName: "Download fmt library"
      inputs:
        failOnStderr: true
        workingDirectory: "$(Build.BinariesDirectory)"
        script: |
          curl -sSL "$FMT_TARBALL_URL" --output ./fmtlib.tar.gz
          printf "$FMT_TARBALL_SHA *./fmtlib.tar.gz\n" >checksum
          shasum -c ./checksum -a 512 || exit 1
          tar -xf ./fmtlib.tar.gz
    - task: CmdLine@2
      displayName: "Build vcpkg with CMake"
      inputs:
        failOnStderr: true
        script: |
          cmake -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DVCPKG_DEVELOPMENT_WARNINGS=ON -DVCPKG_WARNINGS_AS_ERRORS=ON -DVCPKG_BUILD_FUZZING=OFF -DVCPKG_EMBED_GIT_SHA=ON -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13 -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" -DFETCHCONTENT_FULLY_DISCONNECTED=ON "-DFETCHCONTENT_SOURCE_DIR_FMT=$(Build.BinariesDirectory)/$FMT_TARBALL_DIRNAME" -B "$(Build.BinariesDirectory)/build"
          make -j 8 -C "$(Build.BinariesDirectory)/build"
          zip -j "$(Build.ArtifactStagingDirectory)/vcpkg-macos.zip" "$(Build.BinariesDirectory)/build/vcpkg"
    - task: PublishBuildArtifacts@1
      displayName: "Publish Unsigned MacOS Binary"
      inputs:
        ArtifactName: 'staging'
        publishLocation: 'Container'
  - job: rhel_build
    displayName: 'glibc (RHEL) Build'
    pool:
      name: 'vcpkg-rhel-7-5'
    variables:
    - group: vcpkg-dependency-source-blobs
    - name: FMT_TARBALL_URL
      value: "$(fmt-tarball-url)"
    - name: FMT_TARBALL_SHA
      value: "$(fmt-tarball-sha)"
    - name: FMT_TARBALL_DIRNAME
      value: "$(fmt-tarball-dirname)"
    steps:
    - task: CmdLine@2
      displayName: "Download fmt library"
      inputs:
        failOnStderr: true
        workingDirectory: "$(Build.BinariesDirectory)"
        script: |
          curl -sSL "$FMT_TARBALL_URL" --output "./fmtlib.tar.gz"
          printf "$FMT_TARBALL_SHA *./fmtlib.tar.gz\n" >checksum
          # shasum doesn't exist on rhel
          sha512sum -c ./checksum || exit 1
          tar -xf ./fmtlib.tar.gz
    - task: CmdLine@2
      displayName: "Build vcpkg with CMake"
      inputs:
        failOnStderr: true
        script: |
          scl enable devtoolset-9 'cmake3 -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DVCPKG_DEVELOPMENT_WARNINGS=ON -DVCPKG_WARNINGS_AS_ERRORS=ON -DVCPKG_BUILD_FUZZING=OFF -DVCPKG_EMBED_GIT_SHA=ON -DCMAKE_CXX_FLAGS="-static-libgcc -static-libstdc++" -DFETCHCONTENT_FULLY_DISCONNECTED=ON "-DFETCHCONTENT_SOURCE_DIR_FMT=$(Build.BinariesDirectory)/$FMT_TARBALL_DIRNAME" -B "$(Build.BinariesDirectory)/build"'
          make -j 4 -C "$(Build.BinariesDirectory)/build"
          mv "$(Build.BinariesDirectory)/build/vcpkg" "$(Build.ArtifactStagingDirectory)/vcpkg-glibc"
    - task: PublishBuildArtifacts@1
      displayName: "Publish Unsigned glibc Binary"
      inputs:
        ArtifactName: 'staging'
        publishLocation: 'Container'
  - job: muslc_build
    displayName: 'muslc (Alpine) Build'
    pool:
      name: 'vcpkg-ubuntu-20-04-docker'
    variables:
    - group: vcpkg-dependency-source-blobs
    - name: FMT_TARBALL_URL
      value: "$(fmt-tarball-url)"
    - name: FMT_TARBALL_SHA
      value: "$(fmt-tarball-sha)"
    - name: FMT_TARBALL_DIRNAME
      value: "$(fmt-tarball-dirname)"
    steps:
    - task: CmdLine@2
      displayName: "Download fmt library"
      inputs:
        failOnStderr: true
        workingDirectory: "$(Build.BinariesDirectory)"
        script: |
          curl -sSL "$FMT_TARBALL_URL" --output "./fmtlib.tar.gz"
          printf "$FMT_TARBALL_SHA *./fmtlib.tar.gz\n" >checksum
          shasum -c ./checksum -a 512 || exit 1
          tar -xf ./fmtlib.tar.gz
    - task: CmdLine@2
      displayName: "Build vcpkg in Alpine"
      inputs:
        failOnStderr: true
        script: |
          mv "$(Build.BinariesDirectory)/$FMT_TARBALL_DIRNAME" external-fmtlib
          docker build -t vcpkg-muslc-image -f azure-pipelines/vcpkg-alpine/Dockerfile .
          docker create -ti --name vcpkg-muslc-container vcpkg-muslc-image sh
          docker cp vcpkg-muslc-container:/build/vcpkg "$(Build.ArtifactStagingDirectory)/vcpkg-muslc"
          docker container rm vcpkg-muslc-container
          docker image rm vcpkg-muslc-image
    - task: PublishBuildArtifacts@1
      displayName: "Publish Unsigned muslc Binary"
      inputs:
        ArtifactName: 'staging'
        publishLocation: 'Container'
  - job: windows_and_sign
    displayName: 'Build Windows and Sign Other Platforms'
    dependsOn:
      - macos_build
      - rhel_build
      - muslc_build
    pool:
      name: 'VSEngSS-MicroBuild2022-1ES'
    variables:
    - group: vcpkg-dependency-source-blobs
    - name: FMT_TARBALL_URL
      value: "$(fmt-tarball-url)"
    - name: FMT_TARBALL_SHA
      value: "$(fmt-tarball-sha)"
    - name: FMT_TARBALL_DIRNAME
      value: "$(fmt-tarball-dirname)"
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Unsigned POSIX Binaries'
      inputs:
        artifactName: staging
    - task: CmdLine@2
      displayName: 'Move Linux Binaries to BinariesDirectory'
      inputs:
        failOnStderr: true
        script: |
          mkdir "$(Build.BinariesDirectory)\build"
          copy /Y "$(Build.ArtifactStagingDirectory)\staging\vcpkg-glibc" "$(Build.BinariesDirectory)\vcpkg-glibc"
          copy /Y "$(Build.ArtifactStagingDirectory)\staging\vcpkg-muslc" "$(Build.BinariesDirectory)\vcpkg-muslc"
    - task: PowerShell@2
      displayName: "Download fmt library"
      inputs:
        targetType: 'inline'
        pwsh: true
        failOnStderr: true
        workingDirectory: "$(Build.BinariesDirectory)"
        script: |
          curl.exe -sSL "$env:FMT_TARBALL_URL" --output ./fmtlib.tar.gz
          $hash = (Get-FileHash -Algorithm SHA512 -Path ./fmtlib.tar.gz).Hash
          if ($hash -ne "$env:FMT_TARBALL_SHA") {
            throw "Unexpected hash for fmtlib download;
            expected: $env:FMT_TARBALL_SHA
            found   : $hash"
          }
          tar.exe -xf ./fmtlib.tar.gz
    - task: PoliCheck@1
      inputs:
        inputType: 'Basic'
        targetType: 'F'
        targetArgument: '$(Build.SourcesDirectory)'
        result: 'PoliCheck.xml'
    - task: CmdLine@2
      displayName: "Build vcpkg x86 with CMake"
      inputs:
        failOnStderr: true
        script: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Preview\Common7\Tools\VsDevCmd.bat" -arch=x86 -host_arch=x86
          set PATH=C:\Program Files\Microsoft Visual Studio\2022\Preview\Common7\IDE\CommonExtensions\Microsoft\CMake\Ninja;%PATH%
          "C:\Program Files\Microsoft Visual Studio\2022\Preview\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe" --version
          "C:\Program Files\Microsoft Visual Studio\2022\Preview\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe" -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DVCPKG_DEVELOPMENT_WARNINGS=ON -DVCPKG_WARNINGS_AS_ERRORS=ON -DVCPKG_BUILD_FUZZING=OFF -DVCPKG_BUILD_TLS12_DOWNLOADER=ON -DVCPKG_EMBED_GIT_SHA=ON -DFETCHCONTENT_FULLY_DISCONNECTED=ON "-DFETCHCONTENT_SOURCE_DIR_FMT=$(Build.BinariesDirectory)\%FMT_TARBALL_DIRNAME%" -B "$(Build.BinariesDirectory)\x86"
          ninja.exe -C "$(Build.BinariesDirectory)\x86"
    - task: CmdLine@2
      displayName: "Build vcpkg arm64 with CMake"
      inputs:
        failOnStderr: true
        script: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Preview\Common7\Tools\VsDevCmd.bat" -arch=arm64 -host_arch=x86
          set PATH=C:\Program Files\Microsoft Visual Studio\2022\Preview\Common7\IDE\CommonExtensions\Microsoft\CMake\Ninja;%PATH%
          "C:\Program Files\Microsoft Visual Studio\2022\Preview\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe" --version
          "C:\Program Files\Microsoft Visual Studio\2022\Preview\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe" -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DVCPKG_DEVELOPMENT_WARNINGS=ON -DVCPKG_WARNINGS_AS_ERRORS=ON -DVCPKG_BUILD_FUZZING=OFF -DVCPKG_BUILD_TLS12_DOWNLOADER=ON -DVCPKG_EMBED_GIT_SHA=ON -DVCPKG_PDB_SUFFIX="-arm64" -DFETCHCONTENT_FULLY_DISCONNECTED=ON "-DFETCHCONTENT_SOURCE_DIR_FMT=$(Build.BinariesDirectory)\%FMT_TARBALL_DIRNAME%" -B "$(Build.BinariesDirectory)\arm64"
          ninja.exe -C "$(Build.BinariesDirectory)\arm64"
    - task: MicroBuildSigningPlugin@2
      inputs:
        signType: '$(SignType)'
        feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'
    - task: NuGetToolInstaller@1
      inputs:
        versionSpec: 5.7
    - task: NuGetCommand@2
      displayName: 'NuGet Restore MicroBuild Signing Extension'
      inputs:
        command: 'restore'
        restoreSolution: 'azure-pipelines/signing.signproj'
        feedsToUse: 'config'
        restoreDirectory: '$(Build.SourcesDirectory)\packages'
    - task: MSBuild@1
      displayName: 'Sign Windows and Linux Binaries'
      inputs:
        solution: 'azure-pipelines\signing.signproj'
        msbuildArguments: '/p:OutDir=$(Build.BinariesDirectory)\ /p:IntermediateOutputPath=$(Build.BinariesDirectory)\'
    - task: BinSkim@3
      inputs:
        InputType: 'CommandLine'
        arguments: 'analyze "$(Build.BinariesDirectory)\x86\vcpkg.exe" "$(Build.BinariesDirectory)\x86\tls12-download.exe" "$(Build.BinariesDirectory)\arm64\vcpkg.exe" "$(Build.BinariesDirectory)\arm64\tls12-download.exe"'
    - task: MicroBuildSignMacFiles@1
      displayName: 'Developer Sign Mac Files'
      condition: eq(variables.SignType, 'test')
      inputs:
        SigningTarget: '$(Build.ArtifactStagingDirectory)\staging\vcpkg-macos.zip'
        SigningCert: 8003
    - task: MicroBuildSignMacFiles@1
      displayName: 'Sign and Harden Mac Files'
      condition: eq(variables.SignType, 'real')
      inputs:
        SigningTarget: '$(Build.ArtifactStagingDirectory)\staging\vcpkg-macos.zip'
        SigningCert: 8023
    - task: MicroBuildSignMacFiles@1
      condition: eq(variables.SignType, 'real')
      inputs:
        SigningTarget: '$(Build.ArtifactStagingDirectory)\staging\vcpkg-macos.zip'
        SigningCert: '8020'
        MacAppName: 'vcpkg'
    - task: CmdLine@2
      displayName: 'Prepare Drop'
      inputs:
        failOnStderr: true
        script: |
          mkdir "$(Build.ArtifactStagingDirectory)\drop"

          move "$(Build.BinariesDirectory)\x86\vcpkg.exe" "$(Build.ArtifactStagingDirectory)\drop\vcpkg.exe"
          move "$(Build.BinariesDirectory)\x86\vcpkg.pdb" "$(Build.ArtifactStagingDirectory)\drop\vcpkg.pdb"
          move "$(Build.BinariesDirectory)\x86\tls12-download.exe" "$(Build.ArtifactStagingDirectory)\drop\tls12-download.exe"
          move "$(Build.BinariesDirectory)\x86\tls12-download.pdb" "$(Build.ArtifactStagingDirectory)\drop\tls12-download.pdb"
          move "$(Build.BinariesDirectory)\arm64\vcpkg.exe" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-arm64.exe"
          move "$(Build.BinariesDirectory)\arm64\vcpkg-arm64.pdb" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-arm64.pdb"
          move "$(Build.BinariesDirectory)\arm64\tls12-download.exe" "$(Build.ArtifactStagingDirectory)\drop\tls12-download-arm64.exe"
          move "$(Build.BinariesDirectory)\arm64\tls12-download-arm64.pdb" "$(Build.ArtifactStagingDirectory)\drop\tls12-download-arm64.pdb"

          mkdir "$(Build.ArtifactStagingDirectory)\staging\macos"
          tar.exe -C "$(Build.ArtifactStagingDirectory)\staging\macos" -xf "$(Build.ArtifactStagingDirectory)\staging\vcpkg-macos.zip"
          move "$(Build.ArtifactStagingDirectory)\staging\macos\vcpkg" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-macos"

          move "$(Build.ArtifactStagingDirectory)\staging\vcpkg-glibc" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-glibc"

          move "$(Build.ArtifactStagingDirectory)\staging\vcpkg-muslc" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-muslc"
    - task: CmdLine@2
      displayName: 'Add Drop PGP Signatures (real sign only)'
      condition: eq(variables.SignType, 'real')
      inputs:
        failOnStderr: true
        script: |
          move "$(Build.BinariesDirectory)\vcpkg-glibc" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-glibc.sig"
          move "$(Build.BinariesDirectory)\vcpkg-muslc" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-muslc.sig"
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Drop'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)\drop'
        ArtifactName: 'Drop'
        publishLocation: 'Container'
    - task: MicroBuildCleanup@1
      condition: succeededOrFailed()
      displayName: MicroBuild Cleanup
