# This script is used internally to produce signed vcpkg builds.
# It uses machines / tasks that are not exposed here on GitHub, as
# the hardware on which we allow signing is restricted.

trigger: none

parameters:
- name: SignTypeOverride
  displayName: Signing Type (default is real for the main branch and test otherwise)
  type: string
  default: default
  values:
  - default
  - test
  - real
- name: VcpkgBaseVersionOverride
  displayName: vcpkg Base Version (default is today's date in ISO 8601)
  type: string
  default: default
- name: PublishTo
  displayName: 'Publish To'
  type: string
  default: 'GitHub and NuGet'
  values:
  - 'GitHub and NuGet'
  - 'NuGet Only'
  - 'None'
variables:
- group: vcpkg Terrapin URLs
- name: TeamName
  value: vcpkg
  # If the user didn't override the signing type, then only real-sign on main.
- ${{ if ne(parameters.SignTypeOverride, 'default') }}:
  - name: SignType
    value: ${{ parameters.SignTypeOverride }}
- ${{ if and(eq(parameters.SignTypeOverride, 'default'), or(eq(variables['Build.SourceBranchName'], 'main'), startsWith(variables['Build.SourceBranch'], 'refs/tags'))) }}:
  - name: SignType
    value: real
- ${{ if and(eq(parameters.SignTypeOverride, 'default'), not(or(eq(variables['Build.SourceBranchName'], 'main'), startsWith(variables['Build.SourceBranch'], 'refs/tags')))) }}:
  - name: SignType
    value: test
resources:
  repositories:
  - repository: MicroBuildTemplate
    type: git
    name: 1ESPipelineTemplates/MicroBuildTemplate
    ref: refs/tags/release
extends:
  template: azure-pipelines/MicroBuild.1ES.Official.yml@MicroBuildTemplate
  parameters:
    sdl:
      sourceAnalysisPool:
        name: AzurePipelines-EO
        image: 1ESPT-Windows2022
    stages:
    - stage: stage
      displayName: 'Build and Sign vcpkg'
      jobs:
      - job: arch_independent
        displayName: 'Build and Sign Arch-Independent Scripts and vcpkg-artifacts'
        # The first job records VCPKG_INITIAL_BASE_VERSION as VCPKG_BASE_VERSION so that all subsequent stages agree
        # on the value; AzureDevOps appears to repeat evaluation of variables such that crossing UTC's day start
        # would make subsequent pipeline stages use a different day producing a broken build.
        # Note that pipeline.startTime seems to refer to the start of the *job*, not the overall pipeline run.
        timeoutInMinutes: 120
        variables:
        - ${{ if eq(parameters.VcpkgBaseVersionOverride, 'default') }}:
          - name: VCPKG_INITIAL_BASE_VERSION
            value: $[format('{0:yyyy}-{0:MM}-{0:dd}', pipeline.startTime)]
        - ${{ if ne(parameters.VcpkgBaseVersionOverride, 'default') }}:
          - name: VCPKG_INITIAL_BASE_VERSION
            value: ${{parameters.VcpkgBaseVersionOverride}}
        - name: Codeql.BuildIdentifier
          value: vcpkg_ECMAScript
        - name: Codeql.Language
          value: javascript
        pool:
          name: 'VSEngSS-MicroBuild2022-1ES'
        templateContext:
          mb:
            signing:
              enabled: true
              feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'
              signType: $(SignType)
              zipSources: false
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish Architecture Independent Staging'
            targetPath: '$(Build.ArtifactStagingDirectory)\staging'
            artifactName: 'stagingArchIndependent'
            publishLocation: 'Container'
        steps:
        - task: Powershell@2
          displayName: 'Lock VCPKG_BASE_VERSION'
          name: versions
          inputs:
            pwsh: true
            targetType: 'inline'
            script: |
              $headSha = &git rev-parse HEAD
              Write-Host "##vso[task.setvariable variable=VCPKG_BASE_VERSION;isOutput=true]$env:VCPKG_INITIAL_BASE_VERSION"
              Write-Host "##vso[task.setvariable variable=VCPKG_FULL_VERSION;isOutput=true]$env:VCPKG_INITIAL_BASE_VERSION-$headSha"
        - task: Powershell@2
          displayName: 'Lock Installer Scripts Versions'
          inputs:
            pwsh: true
            filePath: vcpkg-init/lock-versions.ps1
            arguments: '-Destination "$(Build.BinariesDirectory)" -VcpkgBaseVersion $(VCPKG_INITIAL_BASE_VERSION)'
        - task: UseNode@1
          displayName: Use Node 18 or later
          inputs:
            version: "18.x"
        - task: Npm@1
          inputs:
            command: 'custom'
            workingDir: 'vcpkg-artifacts'
            customCommand: 'ci'
            customRegistry: 'useFeed'
            customFeed: '0bdbc590-a062-4c3f-b0f6-9383f67865ee/105b4584-173c-41aa-8061-612294abe099'
          displayName: Restore vcpkg-artifacts Dev Dependencies
        - task: ComponentGovernanceComponentDetection@0
          displayName: Detect Components
          inputs:
            sourceScanPath: vcpkg-artifacts
        - script: |
            mkdir "$(Build.BinariesDirectory)"
            mkdir "$(Build.BinariesDirectory)\vcpkg-artifacts"
            node "$(Build.SourcesDirectory)\vcpkg-artifacts\node_modules\typescript\bin\tsc" -p "$(Build.SourcesDirectory)\vcpkg-artifacts" --outDir "$(Build.BinariesDirectory)\vcpkg-artifacts"
          displayName: Build TypeScript
        - task: Npm@1
          inputs:
            command: 'custom'
            workingDir: 'vcpkg-artifacts'
            customCommand: 'ci --omit=dev'
            customRegistry: 'useFeed'
            customFeed: '0bdbc590-a062-4c3f-b0f6-9383f67865ee/105b4584-173c-41aa-8061-612294abe099'
          displayName: Restore vcpkg-artifacts Prod Dependencies
        - script: | # This script must be kept in sync with vcpkg-artifacts-target in CMakeLists.txt
            rmdir /s /q "$(Build.BinariesDirectory)\vcpkg-artifacts\test"
            rmdir /s /q "$(Build.BinariesDirectory)\vcpkg-artifacts\test_resources"
            mkdir "$(Build.BinariesDirectory)\vcpkg-artifacts\locales"
            mkdir "$(Build.BinariesDirectory)\vcpkg-artifacts\node_modules"
            xcopy /F /E "$(Build.SourcesDirectory)\vcpkg-artifacts\node_modules" "$(Build.BinariesDirectory)\vcpkg-artifacts\node_modules"
            :: to avoid signing 'semver' .ps1s
            rmdir /s /q "$(Build.BinariesDirectory)\vcpkg-artifacts\node_modules\.bin"
            copy "$(Build.SourcesDirectory)\vcpkg-artifacts\package.json" "$(Build.BinariesDirectory)\vcpkg-artifacts\package.json"
            copy "$(Build.SourcesDirectory)\vcpkg-artifacts\package-lock.json" "$(Build.BinariesDirectory)\vcpkg-artifacts\package-lock.json"
            copy "$(Build.SourcesDirectory)\vcpkg-artifacts\.npmrc" "$(Build.BinariesDirectory)\vcpkg-artifacts\.npmrc"
            copy "$(Build.SourcesDirectory)\vcpkg-artifacts\locales\messages.json" "$(Build.BinariesDirectory)\vcpkg-artifacts\locales\messages.json"
          displayName: Delete Tests, Store Dependencies and Static Components for Signing
        - script: |
            mkdir "$(Build.BinariesDirectory)\scripts"
            xcopy /F /E "$(Build.SourcesDirectory)\scripts" "$(Build.BinariesDirectory)\scripts"
          displayName: Collect PowerShell Scripts for Signing
        - task: NuGetToolInstaller@1
          inputs:
            versionSpec: 5.7
        - task: NuGetCommand@2
          displayName: 'NuGet Restore MicroBuild Signing Extension'
          inputs:
            command: 'restore'
            restoreSolution: 'azure-pipelines/arch-independent-signing.signproj'
            feedsToUse: 'config'
            restoreDirectory: '$(Build.SourcesDirectory)\packages'
        - task: MSBuild@1
          displayName: 'Sign Architecture Independent Files'
          inputs:
            solution: 'azure-pipelines\arch-independent-signing.signproj'
            msbuildArguments: '/p:OutDir=$(Build.BinariesDirectory)\ /p:IntermediateOutputPath=$(Build.BinariesDirectory)\'
          # Note that signing must happen before packing steps because the packs contain files that are themselves signed.
        - script: |
            copy "$(Build.BinariesDirectory)\vcpkg-init.ps1" "$(Build.BinariesDirectory)\vcpkg-init.cmd"
          displayName: 'Duplicate Install Scripts'
        - task: Powershell@2
          displayName: 'Build One-Liner vcpkg-standalone-bundle.tar.gz'
          inputs:
            pwsh: true
            filePath: vcpkg-init/mint-standalone-bundle.ps1
            arguments: '-DestinationTarball "$(Build.BinariesDirectory)\vcpkg-standalone-bundle.tar.gz" -TempDir standalone-temp -ArchIndependentSignedFilesRoot "$(Build.BinariesDirectory)" -Deployment OneLiner -VcpkgBaseVersion "$(VCPKG_INITIAL_BASE_VERSION)"'
        - script: |
            mkdir "$(Build.ArtifactStagingDirectory)\staging"
            mkdir "$(Build.ArtifactStagingDirectory)\staging\scripts"
            move "$(Build.BinariesDirectory)\vcpkg-standalone-bundle.tar.gz" "$(Build.ArtifactStagingDirectory)\staging\vcpkg-standalone-bundle.tar.gz"
            move "$(Build.BinariesDirectory)\vcpkg-init" "$(Build.ArtifactStagingDirectory)\staging\vcpkg-init"
            move "$(Build.BinariesDirectory)\vcpkg-init.ps1" "$(Build.ArtifactStagingDirectory)\staging\vcpkg-init.ps1"
            move "$(Build.BinariesDirectory)\vcpkg-init.cmd" "$(Build.ArtifactStagingDirectory)\staging\vcpkg-init.cmd"
            move "$(Build.BinariesDirectory)\scripts\applocal.ps1" "$(Build.ArtifactStagingDirectory)\staging\scripts\applocal.ps1"
            move "$(Build.BinariesDirectory)\scripts\addPoshVcpkgToPowershellProfile.ps1" "$(Build.ArtifactStagingDirectory)\staging\scripts\addPoshVcpkgToPowershellProfile.ps1"
            move "$(Build.BinariesDirectory)\scripts\posh-vcpkg.psm1" "$(Build.ArtifactStagingDirectory)\staging\scripts\posh-vcpkg.psm1"
            move "$(Build.BinariesDirectory)\vcpkg-artifacts" "$(Build.ArtifactStagingDirectory)\staging\vcpkg-artifacts"
          displayName: 'Arrange Architecture-independent Files for Staging'
        - task: Powershell@2
          displayName: Generate Arch-independent SHA512s
          name: shas
          inputs:
            pwsh: true
            targetType: 'inline'
            script: |
              $standaloneBundleSha = (Get-FileHash "$(Build.ArtifactStagingDirectory)\staging\vcpkg-standalone-bundle.tar.gz" -Algorithm SHA512).Hash.ToLowerInvariant()
              Write-Host "##vso[task.setvariable variable=VCPKG_STANDALONE_BUNDLE_SHA;isOutput=true]$standaloneBundleSha"
      - job: macos_build
        displayName: 'MacOS Build'
        dependsOn:
        - arch_independent
        pool:
          name: Azure Pipelines
          vmImage: macOS-12
          os: macOS
        variables:
          VCPKG_STANDALONE_BUNDLE_SHA: $[ dependencies.arch_independent.outputs['shas.VCPKG_STANDALONE_BUNDLE_SHA'] ]
          VCPKG_BASE_VERSION: $[ dependencies.arch_independent.outputs['versions.VCPKG_BASE_VERSION'] ]
        templateContext:
          mb:
            signing:
              enabled: false
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish Unsigned MacOS Binary'
            artifactName: 'stagingMacOS'
            publishLocation: 'Container'
            targetPath: '$(Build.ArtifactStagingDirectory)'
        steps:
        - task: CmdLine@2
          displayName: "Build vcpkg with CMake"
          inputs:
            failOnStderr: true
            script: |
              cmake -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DVCPKG_DEVELOPMENT_WARNINGS=ON -DVCPKG_WARNINGS_AS_ERRORS=ON -DVCPKG_BUILD_FUZZING=OFF -DVCPKG_EMBED_GIT_SHA=ON -DVCPKG_OFFICIAL_BUILD=ON -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13 -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" "-DVCPKG_FMT_URL=$(fmt-tarball-url)" "-DVCPKG_CMAKERC_URL=$(cmakerc-tarball-url)" "-DVCPKG_BASE_VERSION=$VCPKG_BASE_VERSION" "-DVCPKG_VERSION=$(Build.SourceVersion)" "-DVCPKG_STANDALONE_BUNDLE_SHA=$VCPKG_STANDALONE_BUNDLE_SHA" -B "$(Build.BinariesDirectory)/build" 2>&1
              make -j 8 -C "$(Build.BinariesDirectory)/build"
              zip -j "$(Build.ArtifactStagingDirectory)/vcpkg-macos.zip" "$(Build.BinariesDirectory)/build/vcpkg"
      - job: glibc_build
        displayName: 'glibc Build'
        dependsOn:
        - arch_independent
        pool:
          name: 'vcpkg-mariner-1espt'
          os: linux
        variables:
          VCPKG_STANDALONE_BUNDLE_SHA: $[ dependencies.arch_independent.outputs['shas.VCPKG_STANDALONE_BUNDLE_SHA'] ]
          VCPKG_BASE_VERSION: $[ dependencies.arch_independent.outputs['versions.VCPKG_BASE_VERSION'] ]
        templateContext:
          mb:
            signing:
              enabled: false
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish Unsigned glibc Binary'
            artifactName: 'stagingGlibc'
            publishLocation: 'Container'
            targetPath: '$(Build.ArtifactStagingDirectory)'
        steps:
        - bash: |
            az login --identity --username 29a4d3e7-c7d5-41c7-b5a0-fee8cf466371
            az acr login --name vcpkgdockercontainers
          displayName: 'Set up managed identity'
        - task: CmdLine@2
          displayName: "Build vcpkg in Mariner with Ubuntu 16.04 Libraries"
          inputs:
            failOnStderr: false
            script: |
              mkdir -p "$(Agent.TempDirectory)/build"
              docker run --rm --mount "type=bind,source=$(Build.Repository.LocalPath),target=/source,readonly" --mount "type=bind,source=$(Agent.TempDirectory)/build,target=/build" vcpkgdockercontainers.azurecr.io/vcpkg/vcpkg-linux:2024-03-21 sh -c "cmake -G Ninja -DCMAKE_TOOLCHAIN_FILE=/source/azure-pipelines/vcpkg-linux/toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DVCPKG_DEVELOPMENT_WARNINGS=ON -DVCPKG_WARNINGS_AS_ERRORS=ON -DVCPKG_BUILD_FUZZING=OFF -DVCPKG_EMBED_GIT_SHA=ON -DVCPKG_OFFICIAL_BUILD=ON -DVCPKG_CMAKERC_URL=$(cmakerc-tarball-url) -DVCPKG_FMT_URL=$(fmt-tarball-url) -DVCPKG_STANDALONE_BUNDLE_SHA=$(VCPKG_STANDALONE_BUNDLE_SHA) -DVCPKG_BASE_VERSION=$(VCPKG_BASE_VERSION) -DVCPKG_VERSION=$(Build.SourceVersion) -S /source -B /build 2>&1 && ninja -C /build"
              mv "$(Agent.TempDirectory)/build/vcpkg" "$(Build.ArtifactStagingDirectory)/vcpkg-glibc"
      - job: muslc_build
        displayName: 'muslc (Alpine) Build'
        pool:
          name: 'vcpkg-mariner-1espt'
          os: linux
        dependsOn:
        - arch_independent
        variables:
          VCPKG_STANDALONE_BUNDLE_SHA: $[ dependencies.arch_independent.outputs['shas.VCPKG_STANDALONE_BUNDLE_SHA'] ]
          VCPKG_BASE_VERSION: $[ dependencies.arch_independent.outputs['versions.VCPKG_BASE_VERSION'] ]
        templateContext:
          mb:
            signing:
              enabled: false
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish Unsigned muslc Binary'
            artifactName: 'stagingMuslc'
            publishLocation: 'Container'
            targetPath: '$(Build.ArtifactStagingDirectory)'
        steps:
        - bash: |
            az login --identity --username 29a4d3e7-c7d5-41c7-b5a0-fee8cf466371
            az acr login --name vcpkgdockercontainers
          displayName: 'Set up managed identity'
        - task: CmdLine@2
          displayName: "Build vcpkg in Alpine"
          inputs:
            failOnStderr: false
            script: |
              mkdir -p "$(Agent.TempDirectory)/build"
              docker run --rm --mount "type=bind,source=$(Build.Repository.LocalPath),target=/source,readonly" --mount "type=bind,source=$(Agent.TempDirectory)/build,target=/build" vcpkgdockercontainers.azurecr.io/vcpkg/vcpkg-alpine:3.16 sh -c "cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DVCPKG_DEVELOPMENT_WARNINGS=ON -DVCPKG_WARNINGS_AS_ERRORS=ON -DVCPKG_BUILD_FUZZING=OFF -DVCPKG_EMBED_GIT_SHA=ON -DVCPKG_OFFICIAL_BUILD=ON -DCMAKE_CXX_FLAGS=\"-static -s -static-libgcc -static-libstdc++\" -DVCPKG_CMAKERC_URL=$(cmakerc-tarball-url) -DVCPKG_FMT_URL=$(fmt-tarball-url) -DVCPKG_STANDALONE_BUNDLE_SHA=$(VCPKG_STANDALONE_BUNDLE_SHA) -DVCPKG_BASE_VERSION=$(VCPKG_BASE_VERSION) -DVCPKG_VERSION=$(Build.SourceVersion) -S /source -B /build 2>&1 && ninja -C /build"
              mv "$(Agent.TempDirectory)/build/vcpkg" "$(Build.ArtifactStagingDirectory)/vcpkg-muslc"
      - job: windows_and_sign
        displayName: 'Build Windows binaries and Sign'
        timeoutInMinutes: 120
        dependsOn:
        - arch_independent
        - macos_build
        - glibc_build
        - muslc_build
        pool:
          name: 'VSEngSS-MicroBuild2022-1ES'
        variables:
          VCPKG_STANDALONE_BUNDLE_SHA: $[ dependencies.arch_independent.outputs['shas.VCPKG_STANDALONE_BUNDLE_SHA'] ]
          VCPKG_BASE_VERSION: $[ dependencies.arch_independent.outputs['versions.VCPKG_BASE_VERSION'] ]
          VCPKG_FULL_VERSION: $[ dependencies.arch_independent.outputs['versions.VCPKG_FULL_VERSION'] ]
          Codeql.BuildIdentifier: vcpkg_cpp
          Codeql.Language: cpp
        templateContext:
          mb:
            signing:
              enabled: true
              feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'
              signType: $(SignType)
              zipSources: false
          inputs:
          - input: pipelineArtifact
            artifactName: stagingArchIndependent
            targetPath: $(Build.ArtifactStagingDirectory)\stagingArchIndependent
          - input: pipelineArtifact
            artifactName: stagingMacOS
            targetPath: $(Build.ArtifactStagingDirectory)\stagingMacOS
          - input: pipelineArtifact
            artifactName: stagingGlibc
            targetPath: $(Build.ArtifactStagingDirectory)\stagingGlibc
          - input: pipelineArtifact
            artifactName: stagingMuslc
            targetPath: $(Build.ArtifactStagingDirectory)\stagingMuslc
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish Drop'
            targetPath: '$(Build.ArtifactStagingDirectory)\drop'
            artifactName: 'Drop'
            publishLocation: 'Container'
          - output: pipelineArtifact
            displayName: 'Publish nupkg as Artifact'
            targetPath: '$(Build.ArtifactStagingDirectory)/vs-insertion/drop'
            artifactName: 'vs-insertion'
            publishLocation: 'Container'
            condition: ${{ or(eq(parameters.PublishTo, 'GitHub and NuGet'),eq(parameters.PublishTo, 'NuGet Only')) }}
          - output: nuget
            displayName: 'NuGet publish for VS Insertion'
            packageParentPath: '$(Build.ArtifactStagingDirectory)'
            packagesToPush: '$(Build.ArtifactStagingDirectory)/vs-insertion/drop/VS.Redist.Vcpkg.amd64.1.0.0-$(VCPKG_FULL_VERSION).nupkg'
            publishVstsFeed: '97a41293-2972-4f48-8c0e-05493ae82010'
            condition: ${{ and(or(eq(parameters.PublishTo, 'GitHub and NuGet'),eq(parameters.PublishTo, 'NuGet Only')), eq(variables.SignType, 'real')) }}
        steps:
        - task: CmdLine@2
          displayName: "Build vcpkg amd64 with CMake"
          inputs:
            failOnStderr: true
            script: |
              call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=amd64 -host_arch=amd64
              cmake.exe --version
              cmake.exe -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DVCPKG_DEVELOPMENT_WARNINGS=ON -DVCPKG_WARNINGS_AS_ERRORS=ON -DVCPKG_BUILD_FUZZING=OFF -DVCPKG_BUILD_TLS12_DOWNLOADER=ON -DVCPKG_EMBED_GIT_SHA=ON -DVCPKG_OFFICIAL_BUILD=ON "-DVCPKG_FMT_URL=$(fmt-tarball-url)" "-DVCPKG_CMAKERC_URL=$(cmakerc-tarball-url)" "-DVCPKG_BASE_VERSION=$(VCPKG_BASE_VERSION)" "-DVCPKG_VERSION=$(Build.SourceVersion)" "-DVCPKG_STANDALONE_BUNDLE_SHA=$(VCPKG_STANDALONE_BUNDLE_SHA)" -B "$(Build.BinariesDirectory)\amd64"
              ninja.exe -C "$(Build.BinariesDirectory)\amd64"
        - task: CmdLine@2
          displayName: "Build vcpkg arm64 with CMake"
          inputs:
            failOnStderr: true
            script: |
              call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=arm64 -host_arch=amd64
              cmake.exe --version
              cmake.exe -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DVCPKG_DEVELOPMENT_WARNINGS=ON -DVCPKG_WARNINGS_AS_ERRORS=ON -DVCPKG_BUILD_FUZZING=OFF -DVCPKG_BUILD_TLS12_DOWNLOADER=ON -DVCPKG_EMBED_GIT_SHA=ON -DVCPKG_OFFICIAL_BUILD=ON -DVCPKG_PDB_SUFFIX="-arm64" "-DVCPKG_FMT_URL=$(fmt-tarball-url)" "-DVCPKG_CMAKERC_URL=$(cmakerc-tarball-url)" "-DVCPKG_BASE_VERSION=$(VCPKG_BASE_VERSION)" "-DVCPKG_VERSION=$(Build.SourceVersion)" "-DVCPKG_STANDALONE_BUNDLE_SHA=$(VCPKG_STANDALONE_BUNDLE_SHA)" -B "$(Build.BinariesDirectory)\arm64"
              ninja.exe -C "$(Build.BinariesDirectory)\arm64"
        - task: NuGetToolInstaller@1
          inputs:
            versionSpec: 5.7
        - task: NuGetCommand@2
          displayName: 'NuGet Restore MicroBuild Signing Extension'
          inputs:
            command: 'restore'
            restoreSolution: 'azure-pipelines/binary-signing.signproj'
            feedsToUse: 'config'
            restoreDirectory: '$(Build.SourcesDirectory)\packages'
        - task: CmdLine@2
          displayName: 'Copy Linux Binaries to BinariesDirectory'
          inputs:
            failOnStderr: true
            script: |
              mkdir "$(Build.BinariesDirectory)\build"
              copy /Y "$(Build.ArtifactStagingDirectory)\stagingArchIndependent\vcpkg-init" "$(Build.BinariesDirectory)\vcpkg-init"
              copy /Y "$(Build.ArtifactStagingDirectory)\stagingGlibc\vcpkg-glibc" "$(Build.BinariesDirectory)\vcpkg-glibc"
              copy /Y "$(Build.ArtifactStagingDirectory)\stagingMuslc\vcpkg-muslc" "$(Build.BinariesDirectory)\vcpkg-muslc"
        - task: MSBuild@1
          displayName: 'Sign Binaries'
          inputs:
            solution: 'azure-pipelines\binary-signing.signproj'
            msbuildArguments: '/p:OutDir=$(Build.BinariesDirectory)\ /p:IntermediateOutputPath=$(Build.BinariesDirectory)\'
        - task: MicroBuildSignMacFiles@1
          displayName: 'Developer Sign Mac Binaries'
          condition: and(eq(variables.SignType, 'test'), succeeded())
          inputs:
            SigningTarget: '$(Build.ArtifactStagingDirectory)\stagingMacOS\vcpkg-macos.zip'
            SigningCert: '8005'
            SigningPluginSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'
            SigningPluginVersion: 'latest'
        - task: MicroBuildSignMacFiles@1
          displayName: 'Sign and Harden Mac Binaries'
          condition: and(eq(variables.SignType, 'real'), succeeded())
          inputs:
            SigningTarget: '$(Build.ArtifactStagingDirectory)\stagingMacOS\vcpkg-macos.zip'
            SigningCert: '8025'
            SigningPluginSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'
            SigningPluginVersion: 'latest'
        - task: MicroBuildSignMacFiles@1
          displayName: 'Notarize Mac Binaries'
          condition: and(eq(variables.SignType, 'real'), succeeded())
          inputs:
            SigningTarget: '$(Build.ArtifactStagingDirectory)\stagingMacOS\vcpkg-macos.zip'
            SigningCert: '8020'
            MacAppName: 'vcpkg'
            SigningPluginSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'
            SigningPluginVersion: 'latest'
        - task: Powershell@2
          displayName: 'Mint VS Insertion standalone bundle'
          inputs:
            pwsh: true
            filePath: vcpkg-init/mint-standalone-bundle.ps1
            arguments: '-DestinationDir "$(Build.ArtifactStagingDirectory)/vs-insertion/staging" -TempDir standalone-temp -ArchIndependentSignedFilesRoot "$(Build.ArtifactStagingDirectory)\stagingArchIndependent" -Deployment "VisualStudio" -VcpkgBaseVersion "$(VCPKG_BASE_VERSION)"'
        - task: CmdLine@2
          displayName: 'Arrange Drop and Symbols'
          inputs:
            failOnStderr: true
            script: |
              mkdir "$(Build.ArtifactStagingDirectory)\drop"

              copy "$(Build.SourcesDirectory)\NOTICE.txt" "$(Build.ArtifactStagingDirectory)\drop\NOTICE.txt"

              move "$(Build.ArtifactStagingDirectory)\stagingArchIndependent\vcpkg-init" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-init"
              move "$(Build.ArtifactStagingDirectory)\stagingArchIndependent\vcpkg-init.cmd" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-init.cmd"
              move "$(Build.ArtifactStagingDirectory)\stagingArchIndependent\vcpkg-init.ps1" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-init.ps1"
              move "$(Build.ArtifactStagingDirectory)\stagingArchIndependent\scripts\applocal.ps1" "$(Build.ArtifactStagingDirectory)\drop\applocal.ps1"
              move "$(Build.ArtifactStagingDirectory)\stagingArchIndependent\scripts\addPoshVcpkgToPowershellProfile.ps1" "$(Build.ArtifactStagingDirectory)\drop\addPoshVcpkgToPowershellProfile.ps1"
              move "$(Build.ArtifactStagingDirectory)\stagingArchIndependent\scripts\posh-vcpkg.psm1" "$(Build.ArtifactStagingDirectory)\drop\posh-vcpkg.psm1"
              move "$(Build.ArtifactStagingDirectory)\stagingGlibc\vcpkg-glibc" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-glibc"
              move "$(Build.ArtifactStagingDirectory)\stagingMuslc\vcpkg-muslc" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-muslc"
              move "$(Build.ArtifactStagingDirectory)\stagingArchIndependent\vcpkg-standalone-bundle.tar.gz" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-standalone-bundle.tar.gz"

              move "$(Build.BinariesDirectory)\amd64\vcpkg.exe" "$(Build.ArtifactStagingDirectory)\drop\vcpkg.exe"
              copy "$(Build.ArtifactStagingDirectory)\drop\vcpkg.exe" "$(Build.ArtifactStagingDirectory)\vs-insertion\staging\vcpkg.exe"

              move "$(Build.BinariesDirectory)\amd64\vcpkg.pdb" "$(Build.ArtifactStagingDirectory)\drop\vcpkg.pdb"
              move "$(Build.BinariesDirectory)\amd64\tls12-download.exe" "$(Build.ArtifactStagingDirectory)\drop\tls12-download.exe"
              move "$(Build.BinariesDirectory)\amd64\tls12-download.pdb" "$(Build.ArtifactStagingDirectory)\drop\tls12-download.pdb"
              move "$(Build.BinariesDirectory)\arm64\vcpkg.exe" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-arm64.exe"
              move "$(Build.BinariesDirectory)\arm64\vcpkg-arm64.pdb" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-arm64.pdb"
              move "$(Build.BinariesDirectory)\arm64\tls12-download.exe" "$(Build.ArtifactStagingDirectory)\drop\tls12-download-arm64.exe"
              move "$(Build.BinariesDirectory)\arm64\tls12-download-arm64.pdb" "$(Build.ArtifactStagingDirectory)\drop\tls12-download-arm64.pdb"

              mkdir "$(Build.ArtifactStagingDirectory)\staging\macos"
              tar.exe -C "$(Build.ArtifactStagingDirectory)\staging\macos" -xf "$(Build.ArtifactStagingDirectory)\stagingMacOS\vcpkg-macos.zip"
              move "$(Build.ArtifactStagingDirectory)\staging\macos\vcpkg" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-macos"

              copy "$(Build.SourcesDirectory)\azure-pipelines\vs-insertion\vcpkg.nuspec" "$(Build.ArtifactStagingDirectory)\vs-insertion\staging\vcpkg.nuspec"

              mkdir "$(Build.ArtifactStagingDirectory)\symbols"
              copy "$(Build.ArtifactStagingDirectory)\drop\vcpkg.exe" "$(Build.ArtifactStagingDirectory)\symbols\vcpkg.exe"
              copy "$(Build.ArtifactStagingDirectory)\drop\vcpkg.pdb" "$(Build.ArtifactStagingDirectory)\symbols\vcpkg.pdb"
              copy "$(Build.ArtifactStagingDirectory)\drop\tls12-download.exe" "$(Build.ArtifactStagingDirectory)\symbols\tls12-download.exe"
              copy "$(Build.ArtifactStagingDirectory)\drop\tls12-download.pdb" "$(Build.ArtifactStagingDirectory)\symbols\tls12-download.pdb"
              copy "$(Build.ArtifactStagingDirectory)\drop\vcpkg-arm64.exe" "$(Build.ArtifactStagingDirectory)\symbols\vcpkg-arm64.exe"
              copy "$(Build.ArtifactStagingDirectory)\drop\vcpkg-arm64.pdb" "$(Build.ArtifactStagingDirectory)\symbols\vcpkg-arm64.pdb"
              copy "$(Build.ArtifactStagingDirectory)\drop\tls12-download-arm64.exe" "$(Build.ArtifactStagingDirectory)\symbols\tls12-download-arm64.exe"
              copy "$(Build.ArtifactStagingDirectory)\drop\tls12-download-arm64.pdb" "$(Build.ArtifactStagingDirectory)\symbols\tls12-download-arm64.pdb"
        - task: CmdLine@2
          displayName: 'Add Drop PGP Signatures (real sign only)'
          condition: and(eq(variables.SignType, 'real'), succeeded())
          inputs:
            failOnStderr: true
            script: |
              move "$(Build.BinariesDirectory)\vcpkg-init" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-init.sig"
              move "$(Build.BinariesDirectory)\vcpkg-glibc" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-glibc.sig"
              move "$(Build.BinariesDirectory)\vcpkg-muslc" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-muslc.sig"
        - task: NuGetCommand@2
          displayName: 'NuGet pack for VS Insertion'
          inputs:
            command: custom
            arguments: 'pack $(Build.ArtifactStagingDirectory)/vs-insertion/staging/vcpkg.nuspec -NoDefaultExcludes -OutputDirectory "$(Build.ArtifactStagingDirectory)/vs-insertion/drop" -Properties version=$(VCPKG_FULL_VERSION)'
        - task: MSBuild@1
          displayName: 'Sign VS Insertion NuGet Package'
          inputs:
            solution: 'azure-pipelines\nuget-package.signproj'
            msbuildArguments: '/p:OutDir=$(Build.ArtifactStagingDirectory)\vs-insertion\drop /p:IntermediateOutputPath=$(Build.ArtifactStagingDirectory)\vs-insertion\drop'
        - task: APIScan@2
          env:
            AzureServicesAuthConnectionString: RunAs=App;AppId=d318cba7-db4d-4fb3-99e1-01879cb74e91
          inputs:
            softwareFolder: '$(Build.ArtifactStagingDirectory)\drop'
            softwareName: 'vcpkg'
            softwareVersionNum: 'N/A'
            softwareBuildNum: '$(Build.BuildId)'
            symbolsFolder: '$(Build.ArtifactStagingDirectory)\drop'
        - task: PoliCheck@2
          inputs:
            inputType: 'Basic'
            targetType: 'F'
            targetArgument: '$(Build.ArtifactStagingDirectory)\drop'
            result: 'PoliCheck.xml'
        - ${{ if ne(parameters.PublishTo, 'None') }}:
          - task: MicroBuildArchiveSymbols@5
            displayName: 'Upload Symbols'
            inputs:
              SymbolsFeatureName: 'vcpkg'
              SymbolsProject: 'VS'
              SymbolsAgentPath: '$(Build.ArtifactStagingDirectory)\symbols'
        # Publish everything to a GitHub Release
        - ${{ if eq(parameters.PublishTo, 'GitHub and NuGet') }}:
          - task: DownloadSecureFile@1
            displayName: Download Deploy Key
            name: githubDeployKey
            condition: and(eq(variables.SignType, 'real'), succeeded())
            inputs:
              secureFile: id_vcpkg_tool
          # GitHub has a large, regularly changing set of IP address, so ignore the
          # hostname and allow anything with the right key.
          # https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/about-githubs-ip-addresses
          # This public key should have the well-known fingerprint documented below.
          # SHA256:uNiVztksCsDhcc0u9e8BujQXVUpKZIDTMczCvj3tD2s
          # https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints
          - script: mkdir %USERPROFILE%\.ssh && echo github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=>>%USERPROFILE%\.ssh\known_hosts
            displayName: Store GitHub Public Key
            condition: and(eq(variables.SignType, 'real'), succeeded())
          - script: git -c user.email=embeddedbot@microsoft.com -c user.name="Embedded Bot" push git@github.com:microsoft/vcpkg-tool HEAD:refs/tags/%VCPKG_BASE_VERSION%
            condition: and(eq(variables.SignType, 'real'), succeeded())
            env:
              GIT_SSH_COMMAND: ssh -i "$(githubDeployKey.secureFilePath)"
            displayName: Push Release Tag
          - task: GitHubRelease@0
            displayName: Publish GitHub Release
            condition: and(eq(variables.SignType, 'real'), succeeded())
            inputs:
              gitHubConnection: embeddedbot
              repositoryName: microsoft/vcpkg-tool
              isPreRelease: true
              isDraft: true
              title: $(VCPKG_BASE_VERSION) Release
              tagSource: manual
              tag: $(VCPKG_BASE_VERSION)
              assets: "$(Build.ArtifactStagingDirectory)\\drop\\*"
              addChangeLog: false
              compareWith: 'lastFullRelease'
