# This script is used internally to produce signed vcpkg builds.
# It uses machines / tasks that are not exposed here on GitHub, as
# the hardware on which we allow signing is restricted.

trigger: none

parameters:
- name: SignTypeOverride
  displayName: Signing Type (default is real for the main branch and test otherwise)
  type: string
  default: default
  values:
  - default
  - test
  - real
- name: VcpkgBaseVersionOverride
  displayName: vcpkg Base Version (default is today's date in ISO 8601)
  type: string
  default: default
- name: PublishTo
  displayName: 'Publish To'
  type: string
  default: 'GitHub and NuGet'
  values:
  - 'GitHub and NuGet'
  - 'NuGet Only'
variables:
  - group: vcpkg Official Build Secrets
  - name: TeamName
    value: vcpkg
  - name: Codeql.Enabled
    value: true
  # If the user didn't override the signing type, then only real-sign on main.
  - ${{ if ne(parameters.SignTypeOverride, 'default') }}:
    - name: SignType
      value: ${{ parameters.SignTypeOverride }}
  - ${{ if and(eq(parameters.SignTypeOverride, 'default'), or(eq(variables['Build.SourceBranchName'], 'main'), startsWith(variables['Build.SourceBranch'], 'refs/tags'))) }}:
    - name: SignType
      value: real
  - ${{ if and(eq(parameters.SignTypeOverride, 'default'), not(or(eq(variables['Build.SourceBranchName'], 'main'), startsWith(variables['Build.SourceBranch'], 'refs/tags')))) }}:
    - name: SignType
      value: test
jobs:
  - job: arch_independent
    displayName: 'Build and Sign Arch-Independent Scripts and vcpkg-artifacts'
    # The first job records VCPKG_INITIAL_BASE_VERSION as VCPKG_BASE_VERSION so that all subsequent stages agree
    # on the value; AzureDevOps appears to repeat evaluation of variables such that crossing UTC's day start
    # would make subsequent pipeline stages use a different day producing a broken build.
    # Note that pipeline.startTime seems to refer to the start of the *job*, not the overall pipeline run.
    variables:
    - ${{ if eq(parameters.VcpkgBaseVersionOverride, 'default') }}:
      - name: VCPKG_INITIAL_BASE_VERSION
        value: $[format('{0:yyyy}-{0:MM}-{0:dd}', pipeline.startTime)]
    - ${{ if ne(parameters.VcpkgBaseVersionOverride, 'default') }}:
      - name: VCPKG_INITIAL_BASE_VERSION
        value: ${{parameters.VcpkgBaseVersionOverride}}
    - name: Codeql.BuildIdentifier
      value: vcpkg_ECMAScript
    - name: Codeql.Language
      value: javascript
    pool:
      name: 'VSEngSS-MicroBuild2022-1ES'
    steps:
    - task: CodeQL3000Init@0
      displayName: 'CodeQL Initialize'
    - task: Powershell@2
      displayName: 'Lock VCPKG_BASE_VERSION'
      name: versions
      inputs:
        pwsh: true
        targetType: 'inline'
        script: |
          Write-Host "##vso[task.setvariable variable=VCPKG_BASE_VERSION;isOutput=true]$env:VCPKG_INITIAL_BASE_VERSION"
    - task: Powershell@2
      displayName: 'Lock Installer Scripts Versions'
      inputs:
        pwsh: true
        filePath: vcpkg-init/lock-versions.ps1
        arguments: '-Destination "$(Build.BinariesDirectory)" -VcpkgBaseVersion $(VCPKG_INITIAL_BASE_VERSION)'
    # Build and test vcpkg-artifacts
    - task: UseNode@1
      displayName: Use Node 16 or later
      inputs:
        version: "16.x"
    - script: copy azure-pipelines\.npmrc-internal ce\common\config\rush\.npmrc
      displayName: Use internal .npmrc
    - task: npmAuthenticate@0
      inputs:
        workingFile: 'ce\common\config\rush\.npmrc'
      # The working directory change is to get the above .npmrc used when installing rush
    - script: npm install -g @microsoft/rush
      displayName: Install Rush
      workingDirectory: ce\common\config\rush
    - script: rush update
      displayName: Install vcpkg-artifacts Dependencies
      workingDirectory: ce
    - script: rush lint
      displayName: Check vcpkg-artifacts for Linting Errors
      workingDirectory: ce
    - script: rush rebuild
      displayName: Build vcpkg-artifacts Packages
      workingDirectory: ce
    - script: rush test
      displayName: Run vcpkg-artifacts Tests
      workingDirectory: ce
    - script: |
        rush set-versions
        node -e "const c = require('./ce/package.json'); p = require('./assets/package.json') ; p.version = c.version; require('fs').writeFileSync('./assets/package.json', JSON.stringify(p,undefined,2)); console.log(``set asset version to `${p.version}``);"
      displayName: Set vcpkg-artifacts Package Versions
      workingDirectory: ce
    - script: mkdir "$(Build.BinariesDirectory)\ce" && rush deploy -t "$(Build.BinariesDirectory)\ce"
      displayName: Collect vcpkg-artifacts Dependencies
      workingDirectory: ce
    - script: |
        xcopy /F "$(Build.SourcesDirectory)/scripts" "$(Build.BinariesDirectory)"
      displayName: Collect PowerShell scripts
    - task: ComponentGovernanceComponentDetection@0
      displayName: Detect Components
      inputs:
        ignoreDirectories: ce/common/temp
    # Inject the NOTICE file. This must run after component detection.
    - task: msospo.ospo-extension.8d7f9abb-6896-461d-9e25-4f74ed65ddb2.notice@0
      displayName: Generate NOTICE File
      inputs:
        outputfile: $(Build.BinariesDirectory)/ce/NOTICE.txt
    - task: MicroBuildSigningPlugin@3
      displayName: Install MicroBuild Signing
      inputs:
        signType: $(SignType)
        zipSources: false
        feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'
    - task: NuGetToolInstaller@1
      inputs:
        versionSpec: 5.7
    - task: NuGetCommand@2
      displayName: 'NuGet Restore MicroBuild Signing Extension'
      inputs:
        command: 'restore'
        restoreSolution: 'azure-pipelines/arch-independent-signing.signproj'
        feedsToUse: 'config'
        restoreDirectory: '$(Build.SourcesDirectory)\packages'
    - task: MSBuild@1
      displayName: 'Sign Architecture Independent Files'
      inputs:
        solution: 'azure-pipelines\arch-independent-signing.signproj'
        msbuildArguments: '/p:OutDir=$(Build.BinariesDirectory)\ /p:IntermediateOutputPath=$(Build.BinariesDirectory)\'
      # Note that signing must happen before packing steps because the packs contain files that are themselves signed.
    - script: |
        copy "$(Build.BinariesDirectory)\vcpkg-init.ps1" "$(Build.BinariesDirectory)\vcpkg-init.cmd"
      displayName: 'Duplicate Install Scripts'
    - task: Powershell@2
      displayName: 'Build vcpkg-standalone-bundle.tar.gz'
      inputs:
        pwsh: true
        filePath: vcpkg-init/mint-standalone-bundle.ps1
        arguments: '-DestinationTarball "$(Build.BinariesDirectory)\vcpkg-standalone-bundle.tar.gz" -TempDir standalone-temp -SignedFilesRoot "$(Build.BinariesDirectory)"'
    - script: npm pack
      displayName: Create vcpkg-artifacts Pack
      workingDirectory: $(Build.BinariesDirectory)/ce
    - script: |
        mkdir "$(Build.ArtifactStagingDirectory)\staging"
        move "$(Build.BinariesDirectory)\ce\vcpkg-ce-*.tgz" "$(Build.ArtifactStagingDirectory)\staging\vcpkg-ce.tgz"
        move "$(Build.BinariesDirectory)\vcpkg-standalone-bundle.tar.gz" "$(Build.ArtifactStagingDirectory)\staging\vcpkg-standalone-bundle.tar.gz"
        move "$(Build.BinariesDirectory)\vcpkg-init" "$(Build.ArtifactStagingDirectory)\staging\vcpkg-init"
        move "$(Build.BinariesDirectory)\vcpkg-init.ps1" "$(Build.ArtifactStagingDirectory)\staging\vcpkg-init.ps1"
        move "$(Build.BinariesDirectory)\vcpkg-init.cmd" "$(Build.ArtifactStagingDirectory)\staging\vcpkg-init.cmd"
        move "$(Build.BinariesDirectory)\applocal.ps1" "$(Build.ArtifactStagingDirectory)\staging\applocal.ps1"
        move "$(Build.BinariesDirectory)\addPoshVcpkgToPowershellProfile.ps1" "$(Build.ArtifactStagingDirectory)\staging\addPoshVcpkgToPowershellProfile.ps1"
        move "$(Build.BinariesDirectory)\posh-vcpkg.psm1" "$(Build.ArtifactStagingDirectory)\staging\posh-vcpkg.psm1"
      displayName: 'Arrange Architecture-independent Files for Staging'
    - task: Powershell@2
      displayName: Generate Arch-independent SHA512s
      name: shas
      inputs:
        pwsh: true
        targetType: 'inline'
        script: |
          $standaloneBundleSha = (Get-FileHash "$(Build.ArtifactStagingDirectory)\staging\vcpkg-standalone-bundle.tar.gz" -Algorithm SHA512).Hash.ToLowerInvariant()
          Write-Host "##vso[task.setvariable variable=VCPKG_STANDALONE_BUNDLE_SHA;isOutput=true]$standaloneBundleSha"
          $ceSha = (Get-FileHash "$(Build.ArtifactStagingDirectory)\staging\vcpkg-ce.tgz" -Algorithm SHA512).Hash.ToLowerInvariant()
          Write-Host "##vso[task.setvariable variable=VCPKG_CE_SHA;isOutput=true]$ceSha"
    - task: PublishBuildArtifacts@1
      displayName: "Publish Architecture Independent Staging"
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)\staging'
        ArtifactName: 'staging'
        publishLocation: 'Container'
    - task: CodeQL3000Finalize@0
      displayName: 'CodeQL Finalize'
  - job: macos_build
    displayName: 'MacOS Build'
    dependsOn:
      - arch_independent
    pool:
      vmImage: macOS-11
    variables:
      VCPKG_STANDALONE_BUNDLE_SHA: $[ dependencies.arch_independent.outputs['shas.VCPKG_STANDALONE_BUNDLE_SHA'] ]
      VCPKG_CE_SHA: $[ dependencies.arch_independent.outputs['shas.VCPKG_CE_SHA'] ]
      VCPKG_BASE_VERSION: $[ dependencies.arch_independent.outputs['versions.VCPKG_BASE_VERSION'] ]
    steps:
    - task: CmdLine@2
      displayName: "Build vcpkg with CMake"
      inputs:
        failOnStderr: true
        script: |
          cmake -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DVCPKG_DEVELOPMENT_WARNINGS=ON -DVCPKG_WARNINGS_AS_ERRORS=ON -DVCPKG_BUILD_FUZZING=OFF -DVCPKG_EMBED_GIT_SHA=ON -DVCPKG_OFFICIAL_BUILD=ON -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13 -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" "-DVCPKG_FMT_URL=$(fmt-tarball-url)" "-DVCPKG_CMAKERC_URL=$(cmakerc-tarball-url)" "-DVCPKG_BASE_VERSION=$VCPKG_BASE_VERSION" "-DVCPKG_STANDALONE_BUNDLE_SHA=$VCPKG_STANDALONE_BUNDLE_SHA" "-DVCPKG_CE_SHA=$VCPKG_CE_SHA" -B "$(Build.BinariesDirectory)/build"
          make -j 8 -C "$(Build.BinariesDirectory)/build"
          zip -j "$(Build.ArtifactStagingDirectory)/vcpkg-macos.zip" "$(Build.BinariesDirectory)/build/vcpkg"
    - task: PublishBuildArtifacts@1
      displayName: "Publish Unsigned MacOS Binary"
      inputs:
        ArtifactName: 'staging'
        publishLocation: 'Container'
  - job: rhel_build
    displayName: 'glibc (RHEL) Build'
    dependsOn:
      - arch_independent
    pool:
      name: 'vcpkg-rhel-7-5'
    variables:
      VCPKG_STANDALONE_BUNDLE_SHA: $[ dependencies.arch_independent.outputs['shas.VCPKG_STANDALONE_BUNDLE_SHA'] ]
      VCPKG_CE_SHA: $[ dependencies.arch_independent.outputs['shas.VCPKG_CE_SHA'] ]
      VCPKG_BASE_VERSION: $[ dependencies.arch_independent.outputs['versions.VCPKG_BASE_VERSION'] ]
    steps:
    - task: CmdLine@2
      displayName: "Build vcpkg with CMake"
      inputs:
        failOnStderr: true
        script: |
          scl enable devtoolset-9 'cmake3 -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DVCPKG_DEVELOPMENT_WARNINGS=ON -DVCPKG_WARNINGS_AS_ERRORS=ON -DVCPKG_BUILD_FUZZING=OFF -DVCPKG_EMBED_GIT_SHA=ON -DVCPKG_OFFICIAL_BUILD=ON -DCMAKE_CXX_FLAGS="-static-libgcc -static-libstdc++" "-DVCPKG_FMT_URL=$(fmt-tarball-url)" "-DVCPKG_CMAKERC_URL=$(cmakerc-tarball-url)" "-DVCPKG_BASE_VERSION=$VCPKG_BASE_VERSION" "-DVCPKG_STANDALONE_BUNDLE_SHA=$VCPKG_STANDALONE_BUNDLE_SHA" "-DVCPKG_CE_SHA=$VCPKG_CE_SHA" -B "$(Build.BinariesDirectory)/build"'
          make -j 4 -C "$(Build.BinariesDirectory)/build"
          mv "$(Build.BinariesDirectory)/build/vcpkg" "$(Build.ArtifactStagingDirectory)/vcpkg-glibc"
    - task: PublishBuildArtifacts@1
      displayName: "Publish Unsigned glibc Binary"
      inputs:
        ArtifactName: 'staging'
        publishLocation: 'Container'
  - job: muslc_build
    displayName: 'muslc (Alpine) Build'
    pool:
      name: 'vcpkg-ubuntu-20-04-docker'
    dependsOn:
      - arch_independent
    variables:
      VCPKG_STANDALONE_BUNDLE_SHA: $[ dependencies.arch_independent.outputs['shas.VCPKG_STANDALONE_BUNDLE_SHA'] ]
      VCPKG_CE_SHA: $[ dependencies.arch_independent.outputs['shas.VCPKG_CE_SHA'] ]
      VCPKG_BASE_VERSION: $[ dependencies.arch_independent.outputs['versions.VCPKG_BASE_VERSION'] ]
    steps:
    - task: CmdLine@2
      displayName: "Build vcpkg in Alpine"
      inputs:
        failOnStderr: false
        script: |
          docker login vcpkgdockercontainers.azurecr.io -u $(vcpkgdockercontainers-pull-username) -p $(vcpkgdockercontainers-pull-password) || exit 1
          docker build --build-arg "FMT_TARBALL_URL=$(fmt-tarball-url)" --build-arg "CMAKERC_TARBALL_URL=$(cmakerc-tarball-url)"  -t vcpkg-muslc-image -f azure-pipelines/vcpkg-alpine/Dockerfile . || exit 1
          docker create -ti --name vcpkg-muslc-container vcpkg-muslc-image sh || exit 1
          docker cp vcpkg-muslc-container:/build/vcpkg "$(Build.ArtifactStagingDirectory)/vcpkg-muslc" || exit 1
          docker container rm vcpkg-muslc-container || exit 1
          docker image rm vcpkg-muslc-image || exit 1
    - task: PublishBuildArtifacts@1
      displayName: "Publish Unsigned muslc Binary"
      inputs:
        ArtifactName: 'staging'
        publishLocation: 'Container'
  - job: windows_and_sign
    displayName: 'Build Windows binaries and Sign'
    dependsOn:
      - arch_independent
      - macos_build
      - rhel_build
      - muslc_build
    pool:
      name: 'VSEngSS-MicroBuild2022-1ES'
    variables:
      VCPKG_STANDALONE_BUNDLE_SHA: $[ dependencies.arch_independent.outputs['shas.VCPKG_STANDALONE_BUNDLE_SHA'] ]
      VCPKG_CE_SHA: $[ dependencies.arch_independent.outputs['shas.VCPKG_CE_SHA'] ]
      VCPKG_BASE_VERSION: $[ dependencies.arch_independent.outputs['versions.VCPKG_BASE_VERSION'] ]
      Codeql.BuildIdentifier: vcpkg_cpp
      Codeql.Language: cpp
    steps:
    - task: CodeQL3000Init@0
      displayName: 'CodeQL Initialize'
    - task: CmdLine@2
      displayName: "Build vcpkg x86 with CMake"
      inputs:
        failOnStderr: true
        script: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x86 -host_arch=x86
          cmake.exe --version
          cmake.exe -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DVCPKG_DEVELOPMENT_WARNINGS=ON -DVCPKG_WARNINGS_AS_ERRORS=ON -DVCPKG_BUILD_FUZZING=OFF -DVCPKG_BUILD_TLS12_DOWNLOADER=ON -DVCPKG_EMBED_GIT_SHA=ON -DVCPKG_OFFICIAL_BUILD=ON "-DVCPKG_FMT_URL=$(fmt-tarball-url)" "-DVCPKG_CMAKERC_URL=$(cmakerc-tarball-url)" "-DVCPKG_BASE_VERSION=$(VCPKG_BASE_VERSION)" "-DVCPKG_STANDALONE_BUNDLE_SHA=$(VCPKG_STANDALONE_BUNDLE_SHA)" "-DVCPKG_CE_SHA=$(VCPKG_CE_SHA)" -B "$(Build.BinariesDirectory)\x86"
          ninja.exe -C "$(Build.BinariesDirectory)\x86"
    - task: CmdLine@2
      displayName: "Build vcpkg arm64 with CMake"
      inputs:
        failOnStderr: true
        script: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=arm64 -host_arch=x86
          cmake.exe --version
          cmake.exe -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DVCPKG_DEVELOPMENT_WARNINGS=ON -DVCPKG_WARNINGS_AS_ERRORS=ON -DVCPKG_BUILD_FUZZING=OFF -DVCPKG_BUILD_TLS12_DOWNLOADER=ON -DVCPKG_EMBED_GIT_SHA=ON -DVCPKG_OFFICIAL_BUILD=ON -DVCPKG_PDB_SUFFIX="-arm64" "-DVCPKG_FMT_URL=$(fmt-tarball-url)" "-DVCPKG_CMAKERC_URL=$(cmakerc-tarball-url)" "-DVCPKG_BASE_VERSION=$(VCPKG_BASE_VERSION)" "-DVCPKG_STANDALONE_BUNDLE_SHA=$(VCPKG_STANDALONE_BUNDLE_SHA)" "-DVCPKG_CE_SHA=$(VCPKG_CE_SHA)" -B "$(Build.BinariesDirectory)\arm64"
          ninja.exe -C "$(Build.BinariesDirectory)\arm64"
    - task: MicroBuildSigningPlugin@3
      displayName: Install MicroBuild Signing
      inputs:
        signType: $(SignType)
        zipSources: false
        feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'
    - task: NuGetToolInstaller@1
      inputs:
        versionSpec: 5.7
    - task: NuGetCommand@2
      displayName: 'NuGet Restore MicroBuild Signing Extension'
      inputs:
        command: 'restore'
        restoreSolution: 'azure-pipelines/binary-signing.signproj'
        feedsToUse: 'config'
        restoreDirectory: '$(Build.SourcesDirectory)\packages'
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Staging'
      inputs:
        artifactName: staging
    - task: CmdLine@2
      displayName: 'Copy Linux Binaries to BinariesDirectory'
      inputs:
        failOnStderr: true
        script: |
          mkdir "$(Build.BinariesDirectory)\build"
          copy /Y "$(Build.ArtifactStagingDirectory)\staging\vcpkg-init" "$(Build.BinariesDirectory)\vcpkg-init"
          copy /Y "$(Build.ArtifactStagingDirectory)\staging\vcpkg-glibc" "$(Build.BinariesDirectory)\vcpkg-glibc"
          copy /Y "$(Build.ArtifactStagingDirectory)\staging\vcpkg-muslc" "$(Build.BinariesDirectory)\vcpkg-muslc"
    - task: MSBuild@1
      displayName: 'Sign Binaries'
      inputs:
        solution: 'azure-pipelines\binary-signing.signproj'
        msbuildArguments: '/p:OutDir=$(Build.BinariesDirectory)\ /p:IntermediateOutputPath=$(Build.BinariesDirectory)\'
    - task: MicroBuildSignMacFiles@1
      displayName: 'Developer Sign Mac Binaries'
      condition: and(eq(variables.SignType, 'test'), succeeded())
      inputs:
        SigningTarget: '$(Build.ArtifactStagingDirectory)\staging\vcpkg-macos.zip'
        SigningCert: '8005'
        SigningPluginSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'
        SigningPluginVersion: 'latest'
    - task: MicroBuildSignMacFiles@1
      displayName: 'Sign and Harden Mac Binaries'
      condition: and(eq(variables.SignType, 'real'), succeeded())
      inputs:
        SigningTarget: '$(Build.ArtifactStagingDirectory)\staging\vcpkg-macos.zip'
        SigningCert: '8025'
        SigningPluginSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'
        SigningPluginVersion: 'latest'
    - task: MicroBuildSignMacFiles@1
      displayName: 'Notarize Mac Binaries'
      condition: and(eq(variables.SignType, 'real'), succeeded())
      inputs:
        SigningTarget: '$(Build.ArtifactStagingDirectory)\staging\vcpkg-macos.zip'
        SigningCert: '8020'
        MacAppName: 'vcpkg'
        SigningPluginSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'
        SigningPluginVersion: 'latest'
    - task: Powershell@2
      displayName: 'Mint VS Insertion standalone bundle'
      inputs:
        pwsh: true
        filePath: vcpkg-init/mint-standalone-bundle.ps1
        arguments: '-DestinationDir "$(Build.ArtifactStagingDirectory)/vs-insertion/staging" -readonly -TempDir standalone-temp -SignedFilesRoot "$(Build.ArtifactStagingDirectory)\staging"'
    - task: CmdLine@2
      displayName: 'Arrange Drop'
      inputs:
        failOnStderr: true
        script: |
          mkdir "$(Build.ArtifactStagingDirectory)\drop"

          move "$(Build.ArtifactStagingDirectory)\staging\vcpkg-init" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-init"
          move "$(Build.ArtifactStagingDirectory)\staging\vcpkg-init.cmd" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-init.cmd"
          move "$(Build.ArtifactStagingDirectory)\staging\vcpkg-init.ps1" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-init.ps1"
          move "$(Build.ArtifactStagingDirectory)\staging\applocal.ps1" "$(Build.ArtifactStagingDirectory)\drop\applocal.ps1"
          move "$(Build.ArtifactStagingDirectory)\staging\addPoshVcpkgToPowershellProfile.ps1" "$(Build.ArtifactStagingDirectory)\drop\addPoshVcpkgToPowershellProfile.ps1"
          move "$(Build.ArtifactStagingDirectory)\staging\posh-vcpkg.psm1" "$(Build.ArtifactStagingDirectory)\drop\posh-vcpkg.psm1"
          move "$(Build.ArtifactStagingDirectory)\staging\vcpkg-ce.tgz" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-ce.tgz"
          move "$(Build.ArtifactStagingDirectory)\staging\vcpkg-glibc" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-glibc"
          move "$(Build.ArtifactStagingDirectory)\staging\vcpkg-muslc" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-muslc"
          move "$(Build.ArtifactStagingDirectory)\staging\vcpkg-standalone-bundle.tar.gz" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-standalone-bundle.tar.gz"

          move "$(Build.BinariesDirectory)\x86\vcpkg.exe" "$(Build.ArtifactStagingDirectory)\drop\vcpkg.exe"
          copy "$(Build.ArtifactStagingDirectory)\drop\vcpkg.exe" "$(Build.ArtifactStagingDirectory)\vs-insertion\staging\vcpkg.exe"

          move "$(Build.BinariesDirectory)\x86\vcpkg.pdb" "$(Build.ArtifactStagingDirectory)\drop\vcpkg.pdb"
          move "$(Build.BinariesDirectory)\x86\tls12-download.exe" "$(Build.ArtifactStagingDirectory)\drop\tls12-download.exe"
          move "$(Build.BinariesDirectory)\x86\tls12-download.pdb" "$(Build.ArtifactStagingDirectory)\drop\tls12-download.pdb"
          move "$(Build.BinariesDirectory)\arm64\vcpkg.exe" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-arm64.exe"
          move "$(Build.BinariesDirectory)\arm64\vcpkg-arm64.pdb" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-arm64.pdb"
          move "$(Build.BinariesDirectory)\arm64\tls12-download.exe" "$(Build.ArtifactStagingDirectory)\drop\tls12-download-arm64.exe"
          move "$(Build.BinariesDirectory)\arm64\tls12-download-arm64.pdb" "$(Build.ArtifactStagingDirectory)\drop\tls12-download-arm64.pdb"

          mkdir "$(Build.ArtifactStagingDirectory)\staging\macos"
          tar.exe -C "$(Build.ArtifactStagingDirectory)\staging\macos" -xf "$(Build.ArtifactStagingDirectory)\staging\vcpkg-macos.zip"
          move "$(Build.ArtifactStagingDirectory)\staging\macos\vcpkg" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-macos"

          copy "$(Build.SourcesDirectory)\azure-pipelines\vs-insertion\vcpkg.nuspec" "$(Build.ArtifactStagingDirectory)\vs-insertion\staging\vcpkg.nuspec"
    - task: CmdLine@2
      displayName: 'Add Drop PGP Signatures (real sign only)'
      condition: and(eq(variables.SignType, 'real'), succeeded())
      inputs:
        failOnStderr: true
        script: |
          move "$(Build.BinariesDirectory)\vcpkg-init" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-init.sig"
          move "$(Build.BinariesDirectory)\vcpkg-glibc" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-glibc.sig"
          move "$(Build.BinariesDirectory)\vcpkg-muslc" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-muslc.sig"
    # Create NuGet package.
    - task: NuGetCommand@2
      displayName: 'NuGet pack for VS Insertion'
      inputs:
        command: custom
        arguments: 'pack $(Build.ArtifactStagingDirectory)/vs-insertion/staging/vcpkg.nuspec -NoDefaultExcludes -OutputDirectory "$(Build.ArtifactStagingDirectory)/vs-insertion/drop" -Properties version=$(VCPKG_BASE_VERSION)'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish nupkg as Artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/vs-insertion/drop'
        ArtifactName: 'vs-insertion'
        publishLocation: 'Container'
    # Do compliance checks.
    - task: BinSkim@3
      inputs:
        InputType: 'CommandLine'
        arguments: 'analyze "$(Build.ArtifactStagingDirectory)\drop\vcpkg.exe" "$(Build.ArtifactStagingDirectory)\drop\tls12-download.exe" "$(Build.ArtifactStagingDirectory)\vcpkg-arm64.exe" "$(Build.ArtifactStagingDirectory)\tls12-download-arm64.exe"'
    - task: PoliCheck@1
      inputs:
        inputType: 'Basic'
        targetType: 'F'
        targetArgument: '$(Build.ArtifactStagingDirectory)\drop'
        result: 'PoliCheck.xml'
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
      displayName: Run CredScan
      inputs:
        toolMajorVersion: V2
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
      displayName: Check for compliance errors
      # To avoid spurious warnings about missing logs, explicitly declare what we scanned.
      inputs:
        BinSkim: true
        CredScan: true
        PoliCheck: true
    # Trust Services Automation (TSA) can automatically open bugs for compliance issues.
    # https://www.1eswiki.com/wiki/Trust_Services_Automation_(TSA)
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-uploadtotsa.TSAUpload@1
      displayName: Upload logs to TSA
      inputs:
        tsaVersion: TsaV2
        codebase: NewOrUpdate
        codeBaseName: vcpkg
        notificationAlias: vcpkg@microsoft.com
        instanceUrlForTsaV2: DEVDIV
        projectNameDEVDIV: DevDiv
        areaPath: DevDiv\Cpp Language and Toolset\Acquisition and Release\Packaging\Vcpkg
        iterationPath: DevDiv
        # To avoid spurious warnings about missing logs, explicitly declare what we don't upload.
        uploadAPIScan: false
        uploadBinSkim: true
        uploadFortifySCA: false
        uploadFxCop: false
        uploadModernCop: false
        uploadPREfast: false
        uploadRoslyn: false
        uploadTSLint: false
      condition: eq(variables['Build.SourceBranchName'], 'main')
    - task: CodeQL3000Finalize@0
      displayName: 'CodeQL Finalize'
    # Publish everything to a Drop
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Drop'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)\drop'
        ArtifactName: 'Drop'
        publishLocation: 'Container'
    # Publish everything to VS Insertion
    - task: NuGetCommand@2
      displayName: 'NuGet publish for VS Insertion'
      condition: and(eq(variables.SignType, 'real'), succeeded())
      inputs:
        command: push
        packagesToPush: '$(Build.ArtifactStagingDirectory)/vs-insertion/drop/VS.Redist.Vcpkg.x86.1.0.0-$(VCPKG_BASE_VERSION).nupkg'
        publishVstsFeed: '97a41293-2972-4f48-8c0e-05493ae82010'
    # Publish everything to a GitHub Release
    - ${{ if eq(parameters.PublishTo, 'GitHub and NuGet') }}:
      - task: DownloadSecureFile@1
        displayName: Download Deploy Key
        name: githubDeployKey
        condition: and(eq(variables.SignType, 'real'), succeeded())
        inputs:
          secureFile: id_vcpkg_tool
      # GitHub has a large, regularly changing set of IP address, so ignore the
      # hostname and allow anything with the right key.
      # https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/about-githubs-ip-addresses
      # This public key should have the well-known fingerprint documented below.
      # SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8
      # https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints
      - script: mkdir %USERPROFILE%\.ssh && echo * ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==>>%USERPROFILE%\.ssh\known_hosts
        displayName: Store GitHub Public Key
        condition: and(eq(variables.SignType, 'real'), succeeded())
      - script: git -c user.email=embeddedbot@microsoft.com -c user.name="Embedded Bot" push git@github.com:microsoft/vcpkg-tool HEAD:refs/tags/%VCPKG_BASE_VERSION%
        condition: and(eq(variables.SignType, 'real'), succeeded())
        env:
          GIT_SSH_COMMAND: ssh -i "$(githubDeployKey.secureFilePath)"
        displayName: Push Release Tag
      - task: GitHubRelease@0
        displayName: Publish GitHub Release
        condition: and(eq(variables.SignType, 'real'), succeeded())
        inputs:
          gitHubConnection: embeddedbot
          repositoryName: microsoft/vcpkg-tool
          isPreRelease: true
          isDraft: true
          title: $(VCPKG_BASE_VERSION) Release
          tagSource: manual
          tag: $(VCPKG_BASE_VERSION)
          assets: "$(Build.ArtifactStagingDirectory)\\drop\\*"
          addChangeLog: false
          compareWith: 'lastFullRelease'
    - task: MicroBuildCleanup@1
      condition: succeededOrFailed()
      displayName: MicroBuild Cleanup
