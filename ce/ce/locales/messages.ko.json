{
  "UnrecognizedCommand$": "Unrecognized command '${p0}'",
  "Use$ToGetHelp": "Use ${p0} to get help",
  "FatalTheRootFolder$CanNotBeCreated": "Fatal: The root folder '${p0}' can not be created",
  "FatalTheGlobalConfigurationFile$CanNotBeCreated": "Fatal: The global configuration file '${p0}' can not be created",
  "VCPKGCOMMANDWasNotSet": "VCPKG_COMMAND was not set",
  "RunningVcpkgInternallyReturnedANonzeroExitCode$": "Running vcpkg internally returned a nonzero exit code: ${p0}",
  "ErrorParsingConditionalDemand$$": "Error parsing conditional demand '${p0}'- ${p1}",
  "MissingIdentity$": "Missing identity '${p0}'",
  "infoidShouldBeOfTypestringFound$": "info.id should be of type 'string', found '${p0}'",
  "MissingVersion$": "Missing version '${p0}'",
  "infoversionShouldBeOfTypestringFound$": "info.version should be of type 'string', found '${p0}'",
  "infosummaryShouldBeOfTypestringFound$": "info.summary should be of type 'string', found '${p0}'",
  "infodescriptionShouldBeOfTypestringFound$": "info.description should be of type 'string', found '${p0}'",
  "infooptionsShouldBeASequenceFound$": "info.options should be a sequence, found '${p0}'",
  "TheInfoBlockIsDeprecatedForConsistencyWithVcpkgjsonMoveInfoMembersToTheOutside": "The info block is deprecated for consistency with vcpkg.json; move info members to the outside.",
  "idShouldBeOfTypestringFound$": "id should be of type 'string', found '${p0}'",
  "versionShouldBeOfTypestringFound$": "version should be of type 'string', found '${p0}'",
  "summaryShouldBeOfTypestringFound$": "summary should be of type 'string', found '${p0}'",
  "descriptionShouldBeOfTypestringFound$": "description should be of type 'string', found '${p0}'",
  "optionsShouldBeASequenceFound$": "options should be a sequence, found '${p0}'",
  "DuplicateKeysDetectedInManifest$": "Duplicate keys detected in manifest: '${p0}'",
  "in$Skipping$BecauseItIsA$": "in ${p0} skipping ${p1} because it is a ${p2}",
  "DuplicateDefine$DuringActivationNewValueWillReplaceOld": "Duplicate define ${p0} during activation. New value will replace old.",
  "DuplicateToolDeclared$DuringActivationNewValueWillReplaceOld": "Duplicate tool declared ${p0} during activation.  New value will replace old.",
  "DuplicateAliasDeclared$DuringActivationNewValueWillReplaceOld": "Duplicate alias declared ${p0} during activation.  New value will replace old.",
  "DuplicateLocationDeclared$DuringActivationNewValueWillReplaceOld": "Duplicate location declared ${p0} during activation. New value will replace old.",
  "CircularVariableReferenceDetected$": "Circular variable reference detected: ${p0}",
  "CircularVariableReferenceDetected$$": "Circular variable reference detected: ${p0} - ${p1}",
  "VariableReferenceFound$$$ThatIsReferencingAnUnknownBaseObject": "Variable reference found '$${p0}.${p1}' that is referencing an unknown base object.",
  "UnresolvedVariableReferenceFound$$$DuringVariableSubstitution": "Unresolved variable reference found ($${p0}.${p1}) during variable substitution.",
  "InvalidPathDoesNotExist$": "Invalid path - does not exist: ${p0}",
  "InvalidArtifactId$": "Invalid artifact id '${p0}'",
  "UnknownInstallerType$": "Unknown installer type ${p0}",
  "WhileResolvingDependenciesOf$$In$CouldNotBeResolvedToARegistry": "While resolving dependencies of ${p0}, ${p1} in ${p2} could not be resolved to a registry.",
  "WhileResolvingDependenciesOfTheProjectFile$$DidNotSpecifyARegistry": "While resolving dependencies of the project file ${p0}, ${p1} did not specify a registry.",
  "UnableToResolveDependency$In$": "Unable to resolve dependency ${p0} in ${p1}.",
  "Artifact": "Artifact",
  "Version": "Version",
  "Status": "Status",
  "Dependency": "Dependency",
  "Summary": "Summary",
  "progressUnknown": "(progress unknown)",
  "verifying": "verifying",
  "downloading$$": "downloading ${p0} -> ${p1}",
  "unpacking": "unpacking",
  "unpacking$": "unpacking ${p0}",
  "Installing$": "Installing ${p0}...",
  "$AlreadyInstalled": "${p0} already installed.",
  "Downloading$": "Downloading ${p0}...",
  "Unpacking$": "Unpacking ${p0}...",
  "ErrorInstalling$$": "Error installing ${p0} - ${p1}",
  "ExpectedASingleValueFor$FoundMultiple": "Expected a single value for ${p0} - found multiple",
  "Synopsis": "Synopsis",
  "Description": "Description",
  "Switches": "Switches",
  "SeeAlso": "See Also",
  "UnableToActivateProject": "Unable to activate project",
  "ExpectedASingleValueFor$": "Expected a single value for '--${p0}'.",
  "UnableToDownloadFile": "Unable to download file",
  "ItCouldBeThatYourAuthenticationCredentialsAreNotCorrect": " - It could be that your authentication credentials are not correct",
  "DownloadedFile$DidNotHaveTheCorrectHash$$": "Downloaded file '${p0}' did not have the correct hash (${p1}: ${p2}) ",
  "packageReference$IsNotAValidNugetPackageReferencenameversion": "package reference '${p0}' is not a valid nuget package reference ({name}/{version})",
  "statsMayNotBeUndefined": "stats may not be undefined",
  "CannotRenameFilesAcrossFilesystems": "Cannot rename files across filesystems",
  "CopyFailedSource$IsAFolderTarget$IsAFile": "Copy failed: source (${p0}) is a folder, target (${p1}) is a file",
  "UriMayNotBeEmpty": "Uri may not be empty",
  "scheme$AlreadyRegistered": "scheme '${p0}' already registered",
  "uri$HasNoScheme": "uri ${p0} has no scheme",
  "scheme$HasNoFilesystemAssociatedWithIt": "scheme ${p0} has no filesystem associated with it",
  "mayNotRenameAcrossFilesystems": "may not rename across filesystems",
  "CouldNotActivateEspidfPythonWasNotFound": "Could not activate esp-idf: python was not found.",
  "GitIsNotInstalled": "Git is not installed",
  "InitializingRepositoryFolder": "Initializing repository folder",
  "FailedToInitializeGitRepositoryFolder$": "Failed to initialize git repository folder (${p0})",
  "AddingRemote$ToGitRepositoryFolder": "Adding remote ${p0} to git repository folder",
  "FailedToSetGitOrigin$InFolder$": "Failed to set git origin (${p0}) in folder (${p1})",
  "FetchingRemote$ForGitRepositoryFolder": "Fetching remote ${p0} for git repository folder",
  "UnableToFetchGitDataFor$InFolder$": "Unable to fetch git data for (${p0}) in folder (${p1})",
  "CheckingOutCommit$For$ToGitRepositoryFolder": "Checking out commit ${p0} for ${p1} to git repository folder",
  "UnableToCheckoutDataFor$InFolder$": "Unable to checkout data for (${p0}) in folder (${p1})",
  "UpdatingSubmodulesForRepository$InTheGitRepositoryFolder": "Updating submodules for repository ${p0} in the git repository folder",
  "UnableToSetSubmoduleShallowDataFor$InFolder$": "Unable to set submodule shallow data for (${p0}) in folder (${p1})",
  "UnableUpdateSubmodulesFor$InFolder$": "Unable update submodules for (${p0}) in folder (${p1})",
  "ExpectedCommaFound$": "Expected comma, found ${p0}",
  "ExpectedOneOfNumberBooleanIdentifierStringFoundToken$": "Expected one of {Number, Boolean, Identifier, String}, found token ${p0}",
  "ExpressionSpecifiedNOTTwice": "Expression specified NOT twice",
  "ExpectedCloseParenthesisForExpressionFound$": "Expected close parenthesis for expression, found ${p0}",
  "ExpectedExpressionFound$": "Expected expression, found ${p0}",
  "ParseErrorDigitExpected": "ParseError: Digit expected (0-9)",
  "ParseErrorHexDigitExpectedFf": "ParseError: Hex Digit expected (0-F,0-f)",
  "ParseErrorBinaryDigitExpected": "ParseError: Binary Digit expected (0,1)",
  "UnexpectedEndOfFileWhileSearchingFor$": "Unexpected end of file while searching for '${p0}'",
  "InvalidEscapeSequence": "Invalid escape sequence",
  "FailedToDeserializeIndex$": "Failed to deserialize index ${p0}",
  "$MatchedMoreThanOneResult$": "'${p0}' matched more than one result (${p1}).",
  "UnsupportedRegistryScheme$": "Unsupported registry scheme '${p0}'",
  "TriedToAdd$As$But$IsAlready$": "Tried to add ${p0} as ${p1}, but ${p2} is already ${p3}.",
  "UnknownRegistry$in$TheFollowingAreKnown$": "Unknown registry ${p0} (in ${p1}). The following are known: ${p2}",
  "UpdatingRegistryDataFrom$": "Updating registry data from ${p0}",
  "$MustBeAString": "${p0} must be a string",
  "$MustBeABool": "${p0} must be a bool",
  "$MustBeAnArrayOfStringsOrUnset": "${p0} must be an array of strings, or unset",
  "FoundAMismatched$In$ForALiteral$Use$$Instead": "Found a mismatched ${p0} in '${p1}'. For a literal ${p2}, use ${p3}${p4} instead.",
  "CouldNotFindAValueFor$In$ToWriteTheLiteralValueUse$Instead": "Could not find a value for {${p0}} in '${p1}'. To write the literal value, use '{{${p2}}}' instead.",
  "MatchedMoreThanOneInstallBlock$": "Matched more than one install block [${p0}]",
  "AcquiresEverythingReferencedByAProjectWithoutActivating": "Acquires everything referenced by a project, without activating",
  "ThisAllowsTheConsumerToPredownloadToolsRequiredForAProject": "This allows the consumer to pre-download tools required for a project.",
  "UnableToFindProjectInFolderorParentFoldersFor$": "Unable to find project in folder (or parent folders) for ${p0}",
  "UnableToAcquireProject": "Unable to acquire project",
  "AcquireArtifactsInTheRegistry": "Acquire artifacts in the registry",
  "ThisAllowsTheConsumerToAcquiredownloadAndUnpackArtifactsArtifactsMustBeActivatedToBeUsed": "This allows the consumer to acquire (download and unpack) artifacts. Artifacts must be activated to be used",
  "NoArtifactsSpecified": "No artifacts specified",
  "MultiplePackagesSpecifiedButNotAnEqualNumberOf$Switches": "Multiple packages specified, but not an equal number of ${p0} switches",
  "NoArtifactsAreAcquired": "No artifacts are acquired",
  "AllArtifactsAreAlreadyInstalled": "All artifacts are already installed",
  "$ArtifactsInstalledSuccessfully": "${p0} artifacts installed successfully",
  "InstallationFailedStopping": "Installation failed -- stopping",
  "ActivatesTheToolsRequiredForAProject": "Activates the tools required for a project",
  "ThisAllowsTheConsumerToActivateTheToolsRequiredForAProjectIfTheToolsAreNotAlreadyInstalledThisWillForceThemToBeDownloadedAndInstalledBeforeActivation": "This allows the consumer to Activate the tools required for a project. If the tools are not already installed, this will force them to be downloaded and installed before activation.",
  "Project$Activated": "Project ${p0} activated",
  "FailedToActivateProject$": "Failed to activate project ${p0}",
  "AddsAnArtifactToTheProject": "Adds an artifact to the project",
  "ThisAllowsTheConsumerToAddAnArtifactToTheProjectThisWillActivateTheProjectAsWell": "This allows the consumer to add an artifact to the project. This will activate the project as well.",
  "MultipleArtifactsSpecifiedButNotAnEqualNumberOf$Switches": "Multiple artifacts specified, but not an equal number of ${p0} switches",
  "TriedToAddAnArtifact$$ButCouldNotDetermineTheRegistryToUse": "Tried to add an artifact [${p0}]:${p1} but could not determine the registry to use.",
  "TriedToAddRegistry$As$ButItWasAlready$PleaseAdd$ToThisProjectManuallyAndReattempt": "Tried to add registry ${p0} as ${p1}, but it was already ${p2}. Please add ${p3} to this project manually and reattempt.",
  "RunvcpkgActivateToApplyToTheCurrentTerminal": "Run \\`vcpkg activate\\` to apply to the current terminal",
  "ManagesTheDownloadCache": "Manages the download cache",
  "DownloadsFolderCleared$": "Downloads folder cleared (${p0}) ",
  "cleansOutEverythingcacheInstalledArtifacts": "cleans out everything (cache, installed artifacts)",
  "cleansOutTheDownloadsCache": "cleans out the downloads cache",
  "removesAllTheArtifactsThatAreInstalled": "removes all the artifacts that are installed",
  "cleansUp": "cleans up",
  "AllowsTheUserToCleanOutTheCacheInstalledArtifactsEtc": "Allows the user to clean out the cache, installed artifacts, etc.",
  "DeactivatingProject": "Deactivating project",
  "InstalledArtifactFolderCleared$": "Installed Artifact folder cleared (${p0}) ",
  "CacheFolderCleared$": "Cache folder cleared (${p0}) ",
  "DeactivatesTheCurrentSession": "Deactivates the current session",
  "ThisAllowsTheConsumerToRemoveEnvironmentSettingsForTheCurrentlyActiveSession": "This allows the consumer to remove environment settings for the currently active session.",
  "DeactivatingProject$": "Deactivating project ${p0}",
  "DeletesAnArtifactFromTheArtifactFolder": "Deletes an artifact from the artifact folder",
  "ThisAllowsTheConsumerToRemoveAnArtifactFromDisk": "This allows the consumer to remove an artifact from disk.",
  "DeletingArtifact$From$": "Deleting artifact ${p0} from ${p1}",
  "FindArtifactsInTheRegistry": "Find artifacts in the registry",
  "ThisAllowsTheUserToFindArtifactsBasedOnSomeCriteria": "This allows the user to find artifacts based on some criteria.",
  "NoArtifactsFoundMatchingCriteria$": "No artifacts found matching criteria: ${p0}",
  "GeneratesMSBuildPropertiesForAnActivationWithoutDownloadingAnythingForAProject": "Generates MSBuild properties for an activation without downloading anything for a project",
  "generatemsbuildpropsRequiresmsbuildprops": "generate-msbuild-props requires --msbuild-props",
  "theNameOfTheCommandForWhichYouWantHelp": "the name of the command for which you want help",
  "getHelpOn$OrOneOfTheCommands": "get help on ${p0} or one of the commands",
  "GetsDetailedHelpOn$OrOneOfTheCommands": "Gets detailed help on ${p0}, or one of the commands",
  "Arguments": "Arguments:",
  "Use$ToGetTheListOfAvailableCommands": "Use ${p0} to get the list of available commands",
  "Usage": "Usage",
  "$COMMANDargumentsswitches": "${p0} COMMAND <arguments> [--switches]",
  "Available$Commands": "Available ${p0} commands:",
  "ListsTheArtifacts": "Lists the artifacts",
  "ThisAllowsTheConsumerToListArtifacts": "This allows the consumer to list artifacts.",
  "regenerateTheIndexForARegistry": "regenerate the index for a registry",
  "ThisAllowsTheUserToRegenerateThe$FilesForA$Registry": "This allows the user to regenerate the ${p0} files for a ${p1} registry.",
  "RegeneratingIndexFor$": "Regenerating index for ${p0}",
  "RegenerationCompleteIndexContains$MetadataFiles": "Regeneration complete. Index contains ${p0} metadata files",
  "Registry$ContainsNoArtifacts": "Registry: '${p0}' contains no artifacts.",
  "error$": "error ${p0}: ",
  "RemovesAnArtifactFromAProject": "Removes an artifact from a project",
  "ThisAllowsTheConsumerToRemoveAnArtifactFromTheProjectForcesReactivationInThisWindow": "This allows the consumer to remove an artifact from the project. Forces reactivation in this window.",
  "Removing$FromProjectManifest": "Removing ${p0} from project manifest",
  "unableToFindArtifact$InTheProjectManifest": "unable to find artifact ${p0} in the project manifest",
  "updateTheRegistryFromTheRemote": "update the registry from the remote",
  "ThisDownloadsTheLatestContentsOfTheRegistryFromTheRemoteService": "This downloads the latest contents of the registry from the remote service.",
  "DownloadingRegistryData": "Downloading registry data",
  "Updated$RegistryContains$MetadataFiles": "Updated ${p0}. registry contains ${p1} metadata files",
  "UnableToDownloadRegistrySnapshot": "Unable to download registry snapshot",
  "UnableToFindRegistry$": "Unable to find registry ${p0}",
  "ArtifactRegistryDataIsNotLoaded": "Artifact registry data is not loaded",
  "AttemptingToUpdateArtifactRegistry": "Attempting to update artifact registry",
  "UnableToLoadRegistryIndex": "Unable to load registry index",
  "InstantlyActivatesAnArtifactOutsideOfTheProject": "Instantly activates an artifact outside of the project",
  "ThisWillInstantlyActivateAnArtifact": "This will instantly activate an artifact .",
  "NoArtifactsAreBeingAcquired": "No artifacts are being acquired",
  "ActivatingIndividualArtifacts": "Activating individual artifacts",
  "removesAllFilesInTheLocalCache": "removes all files in the local cache",
  "enablesDebugModeDisplaysInternalMesssagesAboutHow$Works": "enables debug mode, displays internal messsages about how ${p0} works",
  "proceedsWithThepotentiallyDangerousActionWithoutConfirmation": "proceeds with the (potentially dangerous) action without confirmation",
  "showsTheinstalledArtifacts": "shows the _installed_ artifacts",
  "DumpEnvironmentVariablesAndOtherPropertiesToAJsonFileWithThePathProvidedByTheUser": "Dump environment variables and other properties to a json file with the path provided by the user.",
  "FullPathToTheFileInWhichMSBuildPropertiesWillBeWritten": "Full path to the file in which MSBuild properties will be written.",
  "ApplyAnyDeprecationFixups": "Apply any deprecation fixups.",
  "overrideThePathToTheProjectFolder": "override the path to the project folder",
  "UnableToFindProjectEnvironment$": "Unable to find project environment ${p0}",
  "enablesVerboseModeDisplaysVerboseMesssagesAboutTheProcess": "enables verbose mode, displays verbose messsages about the process",
  "aVersionOrVersionRangeToMatch": "a version or version range to match"
}