---
parser: "@typescript-eslint/parser"
plugins:
- "@typescript-eslint"
- "notice"

env:
  es6: true
  node: true
extends:
- eslint:recommended
- plugin:@typescript-eslint/recommended
globals:
  Atomics: readonly
  SharedArrayBuffer: readonly
parserOptions:
  ecmaVersion: 2018
  sourceType: module
  warnOnUnsupportedTypeScriptVersion : false
  project: tsconfig.json
rules:

  "no-trailing-spaces" : "error"
  "space-in-parens": "error"
  "no-cond-assign" : 'off'
  "keyword-spacing": 
    - 'error'
    - overrides:
        this: 
          before: false
  "@typescript-eslint/explicit-module-boundary-types" : 'off'
  "@typescript-eslint/no-non-null-assertion": 'off'
  "@typescript-eslint/no-use-before-define" : 'off'
  "@typescript-eslint/no-this-alias" : 'off'
  "@typescript-eslint/interface-name-prefix": 'off'
  "@typescript-eslint/explicit-function-return-type": 'off'
  "@typescript-eslint/no-explicit-any": 'off'
  "@typescript-eslint/no-empty-interface": 'off'
  "@typescript-eslint/no-namespace": 'off'
  "@typescript-eslint/explicit-member-accessibility": 'off'
  "@typescript-eslint/no-unused-vars": 'off'
  "@typescript-eslint/no-parameter-properties": 'off'
  "@typescript-eslint/no-angle-bracket-type-assertion" : 'off'
  "@typescript-eslint/no-floating-promises": 'error'
  "require-atomic-updates" : 'off'
  "@typescript-eslint/consistent-type-assertions" :
    - error
    - assertionStyle: 'angle-bracket'
  "@typescript-eslint/array-type":
  - error
  - default: generic
  indent:
  - warn
  - 2
  - SwitchCase : 1
    ObjectExpression: first
   
    
  "@typescript-eslint/indent":
  - 0
  - 2
  no-undef: 'off'
  no-unused-vars: 'off'
  linebreak-style:
  - 'error'
  - unix
  quotes:
  - error
  - single
  semi:
  - error
  - always
  no-multiple-empty-lines: 
  - error
  - max: 2
    maxBOF: 0
    maxEOF: 1
  
  "notice/notice": 
    - "error"
    - { "templateFile": "../common/header.txt"  }

  ## BEGIN SECTION
  ## The rules in this section cover security compliance item "Verify banned APIs are not used".
  no-eval: "error"
  # Disable the base rule as required to use @typescript/eslint/no-implied-eval. For details:
  # https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-implied-eval.md#how-to-use
  no-implied-eval: "off"
  "@typescript-eslint/no-implied-eval": "error"
  "no-restricted-syntax":
    - "error"
    - selector: "CallExpression[callee.name='execUnsafeLocalFunction']"
      message: "execUnsafeLocalFunction is banned"
    - selector: "CallExpression[callee.property.name='execUnsafeLocalFunction']"
      message: "execUnsafeLocalFunction is banned"
    - selector: "CallExpression[callee.name='setInnerHTMLUnsafe']"
      message: "setInnerHTMLUnsafe is banned"
    - selector: "CallExpression[callee.property.name='setInnerHTMLUnsafe']"
      message: "setInnerHTMLUnsafe is banned"
  ## END SECTION