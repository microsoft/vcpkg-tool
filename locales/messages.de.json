{
  "AddArtifactOnlyOne": "„{command_line}“ kann jeweils nur ein Artefakt auf einmal hinzufügen.",
  "AddFirstArgument": "Das erste Argument für „{command_line}“ muss „artifact“ oder „port“ sein.\n",
  "AddPortRequiresManifest": "„{command_line}“ erfordert eine aktive Manifestdatei.",
  "AddPortSucceded": "Der Datei „vcpkg.json“ konnten erfolgreich Ports hinzugefügt werden.",
  "AddTripletExpressionNotAllowed": "Fehler: Tripelausdrücke sind hier nicht zulässig. Ziehen Sie in Erwägung, \"{package_name}:{triplet}\" in \"{package_name}\" zu ändern.",
  "AddVersionAddedVersionToFile": "Version {version} zu {path} hinzugefügt",
  "AddVersionCommitChangesReminder": "Haben Sie daran gedacht, Ihre Änderungen zu übernehmen?",
  "AddVersionCommitResultReminder": "Vergessen Sie nicht, das Ergebnis zu committen!",
  "AddVersionDetectLocalChangesError": "Die Erkennung lokaler Änderungen wird aufgrund eines unerwarteten Formats in der Git-Statusausgabe übersprungen",
  "AddVersionFileNotFound": "Die erforderliche Datei \"{path}\" wurde nicht gefunden",
  "AddVersionFormatPortSuggestion": "Führen Sie \"{command_line}\" aus, um die Datei zu formatieren",
  "AddVersionIgnoringOptionAll": "--{option} wird ignoriert, da ein Portnamenargument angegeben wurde",
  "AddVersionLoadPortFailed": "Port {package_name} kann nicht geladen werden",
  "AddVersionNewFile": "(neue Datei)",
  "AddVersionNewShaIs": "neuer SHA: {value}",
  "AddVersionNoFilesUpdated": "Es wurden keine Dateien aktualisiert",
  "AddVersionNoFilesUpdatedForPort": "Für {package_name} wurden keine Dateien aktualisiert",
  "AddVersionNoGitSha": "SHA kann für Port {package_name} nicht abgerufen werden",
  "AddVersionOldShaIs": "alter SHA: {value}",
  "AddVersionOverwriteOptionSuggestion": "Verwenden Sie --{option}, um diese Überprüfung zu umgehen",
  "AddVersionPortDoesNotExist": "{package_name} ist nicht vorhanden",
  "AddVersionPortFilesShaChanged": "Eingecheckte Dateien für {package_name} wurden geändert, aber die Version wurde nicht aktualisiert",
  "AddVersionPortFilesShaUnchanged": "Eingecheckte Dateien für {package_name} sind gegenüber Version {version} unverändert",
  "AddVersionPortHasImproperFormat": "{package_name} ist nicht ordnungsgemäß formatiert",
  "AddVersionSuggestNewVersionScheme": "Verwenden Sie das Versionsschema „{new_scheme}“ anstelle von „{old_scheme}“ in Port „{package_name}“. \nVerwenden Sie --{option}, um diese Überprüfung zu deaktivieren.",
  "AddVersionUnableToParseVersionsFile": "Die Versionsdatei \"{path}\" kann nicht analysiert werden",
  "AddVersionUncommittedChanges": "Für {package_name} wurden keine Änderungen ausgeführt",
  "AddVersionUpdateVersionReminder": "Erinnern Sie sich daran, die Version oder Portversion zu aktualisieren?",
  "AddVersionUseOptionAll": "{command_name} ohne Argumente erfordert die Übergabe von --{option}, um alle Portversionen gleichzeitig zu aktualisieren",
  "AddVersionVersionAlreadyInFile": "Version {version} befindet sich bereits in {path}",
  "AddVersionVersionIs": "Version: {version}",
  "AllFormatArgsRawArgument": "Formatzeichenfolge „{value}“ enthält ein nicht formatiertes Formatargument.",
  "AllFormatArgsUnbalancedBraces": "nicht ausgeglichene Klammer in der Formatzeichenfolge „{value}“",
  "AlreadyInstalled": "{spec} ist bereits installiert.",
  "AlreadyInstalledNotHead": "{spec} ist bereits installiert – wird nicht aus HEAD erstellt.",
  "AttemptingToFetchPackagesFromVendor": "Es wird versucht, {count} Pakete von {vendor} abzurufen.",
  "BothYesAndNoOptionSpecifiedError": "Fehler: --no-{option} und --{option} können nicht gleichzeitig angegeben werden.",
  "BuildAlreadyInstalled": "„{spec}“ ist bereits installiert; entfernen Sie „{spec}“, bevor Sie versuchen, es zu erstellen.",
  "BuildDependenciesMissing": "Für den Buildbefehl müssen alle Abhängigkeiten bereits installiert sein.\nDie folgenden Abhängigkeiten fehlen:\n\n",
  "BuildResultBuildFailed": "BUILD_FAILED",
  "BuildResultCacheMissing": "CACHE_MISSING",
  "BuildResultCascadeDueToMissingDependencies": "CASCADED_DUE_TO_MISSING_DEPENDENCIES",
  "BuildResultDownloaded": "HERUNTERGELADEN",
  "BuildResultExcluded": "AUSGESCHLOSSEN",
  "BuildResultFileConflicts": "FILE_CONFLICTS",
  "BuildResultPostBuildChecksFailed": "POST_BUILD_CHECKS_FAILED",
  "BuildResultRemoved": "ENTFERNT",
  "BuildResultSucceeded": "ERFOLGREICH",
  "BuildResultSummaryHeader": "ZUSAMMENFASSUNG FÜR {triplet}",
  "BuildResultSummaryLine": "    {build_result}: {count}",
  "BuildTroubleshootingMessage1": "Stellen Sie sicher, dass Sie die neuesten Portdateien mit „git pull“ und „vcpkg update“ verwenden.\nÜberprüfen Sie dann auf bekannte Probleme unter:",
  "BuildTroubleshootingMessage2": "Sie können ein neues Problem einreichen unter:",
  "BuildTroubleshootingMessage3": "Schließen Sie „[{package_name}] Buildfehler“ in Ihren Titel des Fehlerberichts, die folgenden Versionsinformationen in Ihre Fehlerbeschreibung ein, und fügen Sie alle relevanten Fehlerprotokolle von oben an.",
  "BuildingFromHead": "{spec} wird aus HEAD erstellt...",
  "BuildingPackage": "{spec} wird erstellt...",
  "BuildingPackageFailed": "Fehler beim Erstellen von \"{spec}\": {build_result}",
  "BuildingPackageFailedDueToMissingDeps": "aufgrund der folgenden fehlenden Abhängigkeiten:",
  "CMakeTargetsUsage": "„{package_name}“ stellt CMake-Ziele bereit:",
  "CMakeTargetsUsageHeuristicMessage": "# this is heuristically generated, and may be not correct",
  "ChecksFailedCheck": "„vcpkg“ ist abgestürzt; es sind keine weiteren Details verfügbar.",
  "ChecksUnreachableCode": "Nicht erreichbarer Code wurde erreicht.",
  "ChecksUpdateVcpkg": "Das Aktualisieren von vcpkg durch erneutes Ausführen von „bootstrap-vcpkg“ kann diesen Fehler möglicherweise beheben.",
  "CiBaselineAllowUnexpectedPassingRequiresBaseline": "--allow-unexpected-passing kann nur verwendet werden, wenn eine Baseline über --ci-baseline bereitgestellt wird.",
  "CiBaselineRegression": "REGRESSION: {spec} ist mit {build_result} fehlgeschlagen. Falls erwartet, fügen Sie {spec}=fail zu {path} hinzu.",
  "CiBaselineRegressionHeader": "REGRESSIONEN:",
  "CiBaselineUnexpectedPass": "BESTANDEN, VON DER FEHLERLISTE ENTFERNEN: {spec} ({Pfad}).",
  "CmakeTargetsExcluded": "Hinweis: {count} zusätzliche Ziele werden nicht angezeigt.",
  "CouldNotDeduceNugetIdAndVersion": "Die NuGet-ID und die Version konnten nicht aus dem Dateinamen abgeleitet werden: {path}",
  "CurlReportedUnexpectedResults": "curl hat unerwartete Ergebnisse für vcpkg gemeldet, und vcpkg kann nicht fortgesetzt werden. \nLesen Sie den folgenden Text auf vertrauliche Informationen, und öffnen Sie ein Problem auf dem GitHub von Microsoft/vcpkg, um dieses Problem zu beheben.\ncmd: {command_line}\n=== curl output ===\n{actual}\n=== end curl output ===\n",
  "DownloadedSources": "Heruntergeladene Quellen für {spec}",
  "DownloadingVcpkgCeBundle": "Vcpkg-ce-Paket {version} wird heruntergeladen...",
  "DownloadingVcpkgCeBundleLatest": "Das neueste vcpkg-ce-Paket wird heruntergeladen...",
  "ElapsedForPackage": "Verstrichene Zeit für die Bearbeitung von {spec}: {elapsed}",
  "EmptyLicenseExpression": "Der SPDX-Lizenzausdruck war leer.",
  "ErrorIndividualPackagesUnsupported": "Fehler: Im Manifestmodus unterstützt „vcpkg install“ keine einzelnen Paketargumente.\nUm zusätzliche Pakete zu installieren, bearbeiten Sie vcpkg.json, und führen Sie dann „vcpkg install“ ohne Paketargumente aus.",
  "ErrorInvalidClassicModeOption": "Fehler: Die Option --{option} wird im klassischen Modus nicht unterstützt, und es wurde kein Manifest gefunden.",
  "ErrorInvalidManifestModeOption": "Fehler: Die Option --{option} wird im Manifestmodus nicht unterstützt.",
  "ErrorMessage": "Fehler: ",
  "ErrorMissingVcpkgRoot": "Fehler: vcpkg-root konnte nicht erkannt werden. Wenn Sie versuchen, eine Kopie von vcpkg zu verwenden, die Sie erstellt haben, müssen Sie die VCPKG_ROOT-Umgebungsvariable definieren, um auf eine geklonte Kopie von {url} zu verweisen.",
  "ErrorNoVSInstance": "Fehler: im Tripel {triplet}: Es wurde keine gültige Visual Studio-Instanz gefunden.",
  "ErrorNoVSInstanceAt": "     bei „{path}“",
  "ErrorNoVSInstanceFullVersion": "    mit dem Präfix für die Toolsetversion {version}",
  "ErrorNoVSInstanceVersion": "    mit Toolsetversion {version}",
  "ErrorRequireBaseline": "Fehler: Diese vcpkg-Instanz erfordert ein Manifest mit einer angegebenen Baseline, um mit Ports zu interagieren. Bitte fügen Sie dem Manifest „builtin-baseline“ hinzu, oder fügen Sie eine Datei „vcpkg-configuration.json“ hinzu, welche die Standardregistrierung neu definiert.\n",
  "ErrorRequirePackagesList": "Fehler: „vcpkg install“ erfordert eine Liste von Paketen für die Installation im klassischen Modus.",
  "ErrorRequirePackagesToInstall": "Fehler: Es wurden keine Pakete für die Installation aufgelistet, und es wurde kein Manifest gefunden.",
  "ErrorVcvarsUnsupported": "Fehler: im Tripel {triplet}: Die Verwendung der Entwickleraufforderung von Visual Studio wird auf Nicht-Windows-Hosts nicht unterstützt.\nDefinieren Sie in der Tripeldatei 'VCPKG_CMAKE_SYSTEM_NAME' oder 'VCPKG_CHAINLOAD_TOOLCHAIN_FILE'.",
  "ExcludedPackage": "Ausgeschlossen: {spec}",
  "ExpectedCharacterHere": "'{expected}' wurde hier erwartet",
  "ExpectedFailOrSkip": "\"fail\" oder \"skip\" wurde hier erwartet",
  "ExpectedPortName": "Hier wurde ein Portname erwartet",
  "ExpectedTripletName": "Hier wurde ein Tripletname erwartet",
  "FailedToProvisionCe": "Fehler beim Bereitstellen von vcpkg-ce.",
  "FailedToStoreBackToMirror": "Fehler beim Speichern in der Spiegelung:",
  "ForceSystemBinariesOnWeirdPlatforms": "Die Umgebungsvariable VCPKG_FORCE_SYSTEM_BINARIES muss auf ARM-, S390x- und ppc64le-Plattformen festgelegt werden.",
  "FormattedParseMessageExpression": "    beim Ausdruck: {value}",
  "GenerateMsgErrorParsingFormatArgs": "Fehler: Formatzeichenfolge für {value} wird analysiert:",
  "GenerateMsgIncorrectComment": "Die Nachricht {value} weist einen falschen Kommentar auf:",
  "GenerateMsgNoArgumentValue": "    {{{value}}} wurde in einem Kommentar angegeben, aber nicht in der Nachricht verwendet.",
  "GenerateMsgNoCommentValue": "    {{{value}}} wurde in der Nachricht verwendet, aber nicht kommentiert.",
  "GitCommandFailed": "Fehler beim Ausführen von {command_line}",
  "GitStatusOutputExpectedFileName": "Es wurde ein Dateiname erwartet.",
  "GitStatusOutputExpectedNewLine": "Neue Zeile erwartet",
  "GitStatusOutputExpectedRenameOrNewline": "Umbenannte Datei oder neue Zeilen erwartet",
  "GitStatusUnknownFileStatus": "Unbekannter Dateistatus: {value}",
  "GitUnexpectedCommandOutput": "Unerwartete Git-Ausgabe",
  "GraphCycleDetected": "Zyklische Abhängigkeit im Graphen erkannt bei {package_name}:",
  "HashFileFailureToRead": "Fehler beim Lesen der Datei „{Pfad}“ zum Hashen: ",
  "HeaderOnlyUsage": "„{package_name}“ ist Header-only und kann von CMake aus verwendet werden über:",
  "IllegalFeatures": "Fehler: Die Liste der Features ist in diesem Kontext nicht zulässig",
  "IllegalPlatformSpec": "Fehler: Der Plattformqualifizierer ist in diesem Kontext nicht zulässig.",
  "InstallingPackage": "Installing {action_index}/{count} {spec}...",
  "InternalErrorMessage": "Interner Fehler: ",
  "InternalErrorMessageContact": "Geben Sie unter „https://github.com/microsoft/vcpkg/issues/new?template=other-type-of-bug-report.md&labels=category:vcpkg-bug“ das Problem mit detaillierten Schritten an, um das Problem zu reproduzieren.",
  "InvalidArgument": "Ungültiges Argument.",
  "InvalidArgumentRequiresAbsolutePath": "Ungültiges Argument: Die binäre Konfiguration '{binary_source}' Pfadargumente für binäre Konfigurationszeichenfolgen müssen absolut sein.",
  "InvalidArgumentRequiresBaseUrl": "Ungültiges Argument: Für die binäre Konfiguration '{binary_source}' ist eine {base_url} Basis-URL als erstes Argument erforderlich.",
  "InvalidArgumentRequiresBaseUrlAndToken": "Ungültiges Argument: Die Binärkonfiguration „{binary_source}“ erfordert mindestens eine Basis-URL und ein SAS-Token",
  "InvalidArgumentRequiresNoneArguments": "Ungültiges Argument: Die binäre Konfiguration '{binary_source}' akzeptiert keine Argumente",
  "InvalidArgumentRequiresOneOrTwoArguments": "ungültiges Argument: Binärkonfiguration „{binary_source}“ erfordert 1 oder 2 Argumente",
  "InvalidArgumentRequiresPathArgument": "Ungültiges Argument: Die Binärkonfiguration „{binary_source}“ erfordert mindestens ein Pfadargument",
  "InvalidArgumentRequiresPrefix": "Ungültiges Argument: Die Binärkonfiguration „{binary_source}“ erfordert mindestens ein Präfix",
  "InvalidArgumentRequiresSingleArgument": "Ungültiges Argument: Die Binärkonfiguration „{binary_source}“ akzeptiert nicht mehr als 1 Argument",
  "InvalidArgumentRequiresSingleStringArgument": "Ungültiges Argument: Binäre Konfiguration '{binary_source}' erwartet ein einzelnes Zeichenfolgenargument.",
  "InvalidArgumentRequiresSource": "Ungültiges Argument: Die Binärkonfiguration „{binary_source}“ erfordert eine nicht leere Quelle",
  "InvalidArgumentRequiresSourceArgument": "Ungültiges Argument: Die Binärkonfiguration „{binary_source}“ erfordert mindestens ein Quellenargument",
  "InvalidArgumentRequiresTwoOrThreeArguments": "ungültiges Argument: Binärkonfiguration „{binary_source}“ erfordert 2 oder 3 Argumente",
  "InvalidArgumentRequiresValidToken": "Ungültiges Argument: Für die binäre Konfiguration '{binary_source}' ist ein SAS-Token ohne voranstellendes \"?\"-Argument als zweites Argument erforderlich",
  "JsonErrorFailedToParse": "Fehler beim Analysieren von „{path}“:",
  "JsonErrorFailedToRead": "Fehler beim Lesen von „{path}“: {error_msg}",
  "LicenseExpressionContainsExtraPlus": "Der SPDX-Lizenzausdruck enthält ein zusätzliches „+“. Diese sind nur direkt nach einem Lizenzbezeichner zulässig.",
  "LicenseExpressionContainsInvalidCharacter": "Der SPDX-Lizenzausdruck enthält ein ungültiges Zeichen (0x{value:02X} „{value}“).",
  "LicenseExpressionContainsUnicode": "Der SPDX-Lizenzausdruck enthält ein Unicode-Zeichen (U+{value:04X} „{pretty_value}“), aber diese Ausdrücke dürfen nur ASCII sein.",
  "LicenseExpressionDocumentRefUnsupported": "Die aktuelle Implementierung unterstützt keine SPDX-Verweise mit DocumentRef-.",
  "LicenseExpressionExpectCompoundFoundParen": "Ein Verbund oder das Ende der Zeichenfolge wurde erwartet, eine Klammer wurde gefunden.",
  "LicenseExpressionExpectCompoundFoundWith": "Entweder AND oder OR wurde erwartet, WITH wurde gefunden (WITH ist nur nach Lizenznamen zulässig, nicht nach Ausdrücken in Klammern).",
  "LicenseExpressionExpectCompoundFoundWord": "Entweder AND oder OR wurde erwartet., ein Lizenz- oder Ausnahmename wurde gefunden: „{value}“.",
  "LicenseExpressionExpectCompoundOrWithFoundWord": "Entweder AND, OR oder WITH wurde erwartet, ein Lizenz- oder Ausnahmename wurde gefunden: „{value}“.",
  "LicenseExpressionExpectExceptionFoundCompound": "Ein Ausnahmename wurde erwartet, der Verbund {value} wurde gefunden.",
  "LicenseExpressionExpectExceptionFoundEof": "Ein Ausnahmename wurde erwartet, das Ende der Zeichenfolge wurde gefunden.",
  "LicenseExpressionExpectExceptionFoundParen": "Ein Ausnahmename wurde erwartet, eine Klammer wurde gefunden.",
  "LicenseExpressionExpectLicenseFoundCompound": "Ein Lizenzname wurde erwartet, der Verbund „{value}“ wurde gefunden.",
  "LicenseExpressionExpectLicenseFoundEof": "Ein Lizenzname wurde erwartet, das Ende der Zeichenfolge wurde gefunden.",
  "LicenseExpressionExpectLicenseFoundParen": "Ein Lizenzname wurde erwartet, eine Klammer wurde gefunden.",
  "LicenseExpressionImbalancedParens": "Es wurde eine schließende Klammer ohne eine öffnende Klammer gefunden.",
  "LicenseExpressionUnknownException": "Unbekannter Lizenzausnahmebezeichner „{value}“. Bekannte Werte werden unter https://spdx.org/licenses/exceptions-index.html aufgeführt.",
  "LicenseExpressionUnknownLicense": "Unbekannter Lizenzbezeichner „{value}“. Bekannte Werte werden unter https://spdx.org/licenses/ aufgeführt.",
  "MsiexecFailedToExtract": "msiexec-Fehler beim Extrahieren von „{path}“ mit Start- oder Exitcode {exit_code} und Meldung:",
  "NoLocalizationForMessages": "Keine Lokalisierung für die folgenden Nachrichten:",
  "NoteMessage": "Hinweis: ",
  "ObjectStorageToolFailed": "Fehler bei {tool_name}. Exitcode: {exit_code}",
  "ProcessorArchitectureMalformed": "%PROCESSOR_ARCHITECTURE% ({arch}) konnte nicht als gültige CPU-Architektur geparst werden.",
  "ProcessorArchitectureMissing": "Die erforderliche Umgebungsvariable %PROCESSOR_ARCHITECTURE% fehlt.",
  "ProcessorArchitectureW6432Malformed": "%PROCESSOR_ARCHITEW6432% ({arch}) konnte nicht als gültige CPU-Architektur geparst werden. Fallback auf %PROCESSOR_ARCHITECTURE% wird durchgeführt.",
  "RemovingPackage": "{action_index}/{count} {spec} wird entfernt.",
  "RestoredPackagesFromVendor": "{count} Pakete wurden von {vendor} in {elapsed} wiederhergestellt.",
  "ResultsHeader": "ERGEBNISSE",
  "SeeURL": "Weitere Informationen finden Sie unter {url}.",
  "SourceFieldPortNameMismatch": "Das Feld „Source“ innerhalb der CONTROL-Datei oder das Feld „name“ innerhalb der Datei „vcpkg.json“ weist den Namen „{package_name}“ auf und stimmt nicht mit dem Portverzeichnis „{path}“ überein.",
  "UnexpectedErrorDuringBulkDownload": "Unerwarteter Fehler beim Massendownload.",
  "UnknownBaselineFileContent": "nicht erkennbarer Baselineeintrag; erwartet 'port:triplet=(fail|skip)'.",
  "UnknownBinaryProviderType": "Unbekannter Binäranbietertyp: Gültige Anbieter sind \"clear\", \"default\", \"nuget\", \"nugetconfig\", \"interactive\" und \"files\".",
  "UnsupportedSystemName": "Fehler: VCPKG_CMAKE_SYSTEM_NAME '{system_name}' konnte keiner vcvarsall-Plattform zugeordnet werden. Unterstützte Systemnamen sind '', 'Windows' and 'WindowsStore'.",
  "UnsupportedToolchain": "Fehler: Im Tripel {triplet}: Es wurde keine gültige Toolkettenkombination gefunden.\n    Die angeforderte Zielarchitektur war {arch}\n    Die ausgewählte Visual Studio-Instanz befindet sich unter {path}\n    Die verfügbaren Toolkettenkombinationen sind {list}\n",
  "UpdateBaselineAddBaselineNoManifest": "der --{option}-Schalter wurde übergeben, aber es gibt keine Manifestdatei, der ein `builtin-baseline`-Feld hinzugefügt werden könnte.",
  "UpdateBaselineLocalGitError": "Git konnte HEAD nicht für die lokale vcpkg-Registrierung unter „{Pfad}“ analysieren",
  "UpdateBaselineNoConfiguration": "Weder „vcpkg.json“ noch „vcpkg-configuration.json“ sind zum Aktualisieren vorhanden.",
  "UpdateBaselineNoExistingBuiltinBaseline": "die Manifest-Datei enthält derzeit kein `builtin-baseline`-Feld; Um eine hinzuzufügen, übergeben Sie den Schalter --{option}.",
  "UpdateBaselineNoUpdate": "Registry „{url}“ nicht aktualisiert: „{value}",
  "UpdateBaselineRemoteGitError": "Git konnte das Remote-Repository „{url}“ nicht abrufen",
  "UpdateBaselineUpdatedBaseline": "aktualisierte Registry „{url}“: Baseline „{old_value}“ -> „{new_value}“",
  "UploadedPackagesToVendor": "{count} Pakete in {vendor} in {elapsed} hochgeladen",
  "UsingManifestAt": "Die Manifestdatei unter {path} wird verwendet.",
  "Utf8DecoderDereferencedAtEof": "Dereferenzierter Utf8Decoder am Ende einer Zeichenfolge.",
  "VSExaminedInstances": "Die folgenden Visual Studio-Instanzen wurden berücksichtigt:",
  "VSExaminedPaths": "Die folgenden Pfade wurden für Visual Studio-Instanzen untersucht:",
  "VSNoInstances": "Es konnte keine vollständige Visual Studio-Instanz gefunden werden.",
  "VcpkgCeIsExperimental": "vcpkg-ce (\"Umgebung konfigurieren\") ist experimentell und kann sich jederzeit ändern.",
  "VcpkgDisallowedClassicMode": "Fehler: Es wurde kein Manifest (vcpkg.json) oberhalb des aktuellen Arbeitsverzeichnisses gefunden.\nDiese vcpkg-Installation verfügt nicht über eine Instanz im klassischen Modus.",
  "VcpkgHasCrashed": "vcpkg.exe ist abgestürzt.\nBitte senden Sie eine E-Mail an:\n    {email}\nmit einer kurzen Zusammenfassung dessen, was Sie versucht haben, und dem folgende Datenblob:",
  "VcpkgInvalidCommand": "Ungültiger Befehl: {command_name}",
  "VcpkgSendMetricsButDisabled": "Warnung: --sendmetrics wurde übergeben, Metriken sind jedoch deaktiviert.",
  "VersionCommandHeader": "Version des vcpkg-Paketverwaltungsprogramms {version}\n\nLizenzinformationen finden Sie unter LICENSE.txt.",
  "VersionConstraintViolated": "Es wurde erwartet, dass die Abhängigkeit {spec} mindestens Version {expected_version} ist, sie ist derzeit aber {actual_version}.",
  "VersionInvalidDate": "„{version}“ ist keine gültige Datumsversion. Datumsangaben müssen dem Format „JJJJ-MM-TT“ entsprechen, und Disambiguatoren müssen durch Punkte getrennte positive ganzzahlige Werte ohne führende Nullen sein.",
  "VersionInvalidRelaxed": "„{version}“ ist keine gültige gelockerte Version (SemVer mit beliebiger numerischer Elementanzahl).",
  "VersionInvalidSemver": "„{version}“ ist keine gültige semantische Version. Weitere Informationen finden Sie unter <https://semver.org>.",
  "VersionSpecMismatch": "Fehler: Fehler: Fehler beim Laden des Ports, weil Versionsspezifikationen nicht übereinstimmen\n    Pfad: {path}\n    Erwartet: {expected_version}\n    Tatsächlich: {actual_version}",
  "WaitingForChildrenToExit": "Es wird auf das Beenden untergeordneter Prozesse gewartet...",
  "WaitingToTakeFilesystemLock": "Es wird auf die Sperre des Dateisystems für „{path}“ gewartet...",
  "WarningMessage": "Warnung: ",
  "WarningsTreatedAsErrors": "vorherige Warnungen werden als Fehler interpretiert"
}
