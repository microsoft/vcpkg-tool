{
  "AddArtifactOnlyOne": "'{command_line}' can only add one artifact at a time.",
  "AddFirstArgument": "The first argument to '{command_line}' must be 'artifact' or 'port'.\n",
  "AddPortRequiresManifest": "'{command_line}' requires an active manifest file.",
  "AddPortSucceded": "Succeeded in adding ports to vcpkg.json file.",
  "AddTripletExpressionNotAllowed": "Error: triplet expressions are not allowed here. You may want to change `{package_name}:{triplet}` to `{package_name}` instead.",
  "AllFormatArgsRawArgument": "format string \"{value}\" contains a raw format argument",
  "AllFormatArgsUnbalancedBraces": "unbalanced brace in format string \"{value}\"",
  "AwsAttemptingToFetchPackages": "Attempting to fetch {count} packages from AWS",
  "AwsFailedToDownload": "aws failed to download with exit code: {exit_code}",
  "AwsRestoredPackages": "Restored {count} packages from AWS servers in {elapsed}",
  "AwsUploadedPackages": "Uploaded binaries to {count} AWS servers",
  "BothYesAndNoOptionSpecifiedError": "error: cannot specify both --no-{option} and --{option}.",
  "BuildResultBuildFailed": "BUILD_FAILED",
  "BuildResultCacheMissing": "CACHE_MISSING",
  "BuildResultCascadeDueToMissingDependencies": "CASCADED_DUE_TO_MISSING_DEPENDENCIES",
  "BuildResultDownloaded": "DOWNLOADED",
  "BuildResultExcluded": "EXCLUDED",
  "BuildResultFileConflicts": "FILE_CONFLICTS",
  "BuildResultPostBuildChecksFailed": "POST_BUILD_CHECKS_FAILED",
  "BuildResultSucceeded": "SUCCEEDED",
  "BuildResultSummaryHeader": "SUMMARY FOR {triplet}",
  "BuildResultSummaryLine": "    {build_result}: {count}",
  "BuildingPackageFailed": "building {spec} failed with: {build_result}",
  "BuildingPackageFailedDueToMissingDeps": "due to the following missing dependencies:",
  "ChecksFailedCheck": "vcpkg has crashed; no additional details are available.",
  "ChecksLineInfo": "{vcpkg_line_info}: ",
  "ChecksUnreachableCode": "unreachable code was reached",
  "ChecksUpdateVcpkg": "updating vcpkg by rerunning bootstrap-vcpkg may resolve this failure.",
  "CiBaselineAllowUnexpectedPassingRequiresBaseline": "--allow-unexpected-passing can only be used if a baseline is provided via --ci-baseline.",
  "CiBaselineRegression": "REGRESSION: {spec} failed with {build_result}. If expected, add {spec}=fail to {path}.",
  "CiBaselineRegressionHeader": "REGRESSIONS:",
  "CiBaselineUnexpectedPass": "PASSING, REMOVE FROM FAIL LIST: {spec} ({path}).",
  "CmakeTargetLinkLibraries": "    target_link_libraries(main PRIVATE {list})",
  "CmakeTargetsExcluded": "    # note: {count} targets were omitted.",
  "CouldNotDeduceNugetIdAndVersion": "Could not deduce nuget id and version from filename: {path}",
  "CurlReportedUnexpectedResults": "curl has reported unexpected results to vcpkg and vcpkg cannot continue.\nPlease review the following text for sensitive information and open an issue on the Microsoft/vcpkg GitHub to help fix this problem!\ncmd: {command_line}\n=== curl output ===\n{actual}\n=== end curl output ===\n",
  "DownloadingVcpkgCeBundle": "Downloading vcpkg-ce bundle {version}...",
  "DownloadingVcpkgCeBundleLatest": "Downloading latest vcpkg-ce bundle...",
  "EmptyLicenseExpression": "SPDX license expression was empty.",
  "ErrorIndividualPackagesUnsupported": "Error: In manifest mode, `vcpkg install` does not support individual package arguments.\nTo install additional packages, edit vcpkg.json and then run `vcpkg install` without any package arguments.",
  "ErrorInvalidClassicModeOption": "Error: The option --{option} is not supported in classic mode and no manifest was found.",
  "ErrorInvalidManifestModeOption": "Error: The option --{option} is not supported in manifest mode.",
  "ErrorMessage": "error: ",
  "ErrorMissingVcpkgRoot": "Error: Could not detect vcpkg-root. If you are trying to use a copy of vcpkg that you've built, you must define the VCPKG_ROOT environment variable to point to a cloned copy of {url}.",
  "ErrorNoVSInstance": "Error: in triplet {triplet}: Unable to find a valid Visual Studio instance",
  "ErrorNoVSInstanceAt": "     at \"{path}\"",
  "ErrorNoVSInstanceFullVersion": "    with toolset version prefix {version}",
  "ErrorNoVSInstanceVersion": "    with toolset version {version}",
  "ErrorRequireBaseline": "Error: this vcpkg instance requires a manifest with a specified baseline in order to interact with ports. Please add 'builtin-baseline' to the manifest or add a 'vcpkg-configuration.json' that redefines the default registry.\n",
  "ErrorRequirePackagesList": "Error: `vcpkg install` requires a list of packages to install in classic mode.",
  "ErrorRequirePackagesToInstall": "Error: No packages were listed for installation and no manifest was found.",
  "ErrorVcvarsUnsupported": "Error: in triplet {triplet}: Use of Visual Studio's Developer Prompt is unsupported on non-Windows hosts.\nDefine 'VCPKG_CMAKE_SYSTEM_NAME' or 'VCPKG_CHAINLOAD_TOOLCHAIN_FILE' in the triplet file.",
  "ExpectedCharacterHere": "expected '{expected}' here",
  "ExpectedFailOrSkip": "expected 'fail' or 'skip' here",
  "ExpectedPortName": "expected a port name here",
  "ExpectedTripletName": "expected a triplet name here",
  "FailedToProvisionCe": "Failed to provision vcpkg-ce.",
  "ForceSystemBinariesOnWeirdPlatforms": "Environment variable VCPKG_FORCE_SYSTEM_BINARIES must be set on arm, s390x, and ppc64le platforms.",
  "FormattedParseMessageExpression": "    on expression: {value}",
  "GenerateMsgErrorParsingFormatArgs": "error: parsing format string for {value}:",
  "GenerateMsgIncorrectComment": "message {value} has an incorrect comment:",
  "GenerateMsgNoArgumentValue": "    {{{value}}} was specified in a comment, but was not used in the message.",
  "GenerateMsgNoCommentValue": "    {{{value}}} was used in the message, but not commented.",
  "GraphCycleDetected": "Cycle detected within graph at {package_name}:",
  "GraphCycleDetectedElement": "    {package_name}",
  "HashFileFailureToRead": "failed to read file '{path}' for hashing: {error}",
  "IllegalFeatures": "error: List of features is not allowed in this contect",
  "IllegalPlatformSpec": "error: Platform qualifier is not allowed in this context",
  "InternalErrorMessage": "internal error: ",
  "InternalErrorMessageContact": "Please open an issue at https://github.com/microsoft/vcpkg/issues/new?template=other-type-of-bug-report.md&labels=category:vcpkg-bug with detailed steps to reproduce the problem.",
  "LicenseExpressionContainsExtraPlus": "SPDX license expression contains an extra '+'. These are only allowed directly after a license identifier.",
  "LicenseExpressionContainsInvalidCharacter": "SPDX license expression contains an invalid character (0x{value:02X} '{value}').",
  "LicenseExpressionContainsUnicode": "SPDX license expression contains a unicode character (U+{value:04X} '{pretty_value}'), but these expressions are ASCII-only.",
  "LicenseExpressionDocumentRefUnsupported": "The current implementation does not support DocumentRef- SPDX references.",
  "LicenseExpressionExpectCompoundFoundParen": "Expected a compound or the end of the string, found a parenthesis.",
  "LicenseExpressionExpectCompoundFoundWith": "Expected either AND or OR, found WITH (WITH is only allowed after license names, not parenthesized expressions).",
  "LicenseExpressionExpectCompoundFoundWord": "Expected either AND or OR, found a license or exception name: '{value}'.",
  "LicenseExpressionExpectCompoundOrWithFoundWord": "Expected either AND, OR, or WITH, found a license or exception name: '{value}'.",
  "LicenseExpressionExpectExceptionFoundCompound": "Expected an exception name, found the compound {value}.",
  "LicenseExpressionExpectExceptionFoundEof": "Expected an exception name, found the end of the string.",
  "LicenseExpressionExpectExceptionFoundParen": "Expected an exception name, found a parenthesis.",
  "LicenseExpressionExpectLicenseFoundCompound": "Expected a license name, found the compound {value}.",
  "LicenseExpressionExpectLicenseFoundEof": "Expected a license name, found the end of the string.",
  "LicenseExpressionExpectLicenseFoundParen": "Expected a license name, found a parenthesis.",
  "LicenseExpressionImbalancedParens": "There was a close parenthesis without an opening parenthesis.",
  "LicenseExpressionUnknownException": "Unknown license exception identifier '{value}'. Known values are listed at https://spdx.org/licenses/exceptions-index.html",
  "LicenseExpressionUnknownLicense": "Unknown license identifier '{value}'. Known values are listed at https://spdx.org/licenses/",
  "MsiexecFailedToExtract": "msiexec failed while extracting '{path}' with launch or exit code {exit_code} and message:",
  "NoLocalizationForMessages": "No localization for the following messages:",
  "NoteMessage": "note: ",
  "ProcessorArchitectureMalformed": "Failed to parse %PROCESSOR_ARCHITECTURE% ({arch}) as a valid CPU architecture.",
  "ProcessorArchitectureMissing": "The required environment variable %PROCESSOR_ARCHITECTURE% is missing.",
  "ProcessorArchitectureW6432Malformed": "Failed to parse %PROCESSOR_ARCHITEW6432% ({arch}) as a valid CPU architecture. Falling back to %PROCESSOR_ARCHITECTURE%.",
  "ResultsHeader": "RESULTS",
  "ResultsLine": "    {spec}: {build_result}: {elapsed}",
  "SeeURL": "See {url} for more information.",
  "SuggestNewVersionScheme": "Use the version scheme \"{new_scheme}\" instead of \"{old_scheme}\" in port \"{package_name}\".\nUse `--{option}` to disable this check.",
  "UnknownBaselineFileContent": "unrecognizable baseline entry; expected 'port:triplet=(fail|skip)'",
  "UnsupportedSystemName": "Error: Could not map VCPKG_CMAKE_SYSTEM_NAME '{system_name}' to a vcvarsall platform. Supported system names are '', 'Windows' and 'WindowsStore'.",
  "UnsupportedToolchain": "Error: in triplet {triplet}: Unable to find a valid toolchain combination.\n    The requested target architecture was {arch}\n    The selected Visual Studio instance is at {path}\n    The available toolchain combinations are {list}\n",
  "UsingManifestAt": "Using manifest file at {path}.",
  "Utf8DecoderDereferencedAtEof": "dereferenced Utf8Decoder at the end of a string.",
  "VSExaminedInstances": "The following Visual Studio instances were considered:",
  "VSExaminedPaths": "The following paths were examined for Visual Studio instances:",
  "VSNoInstances": "Could not locate a complete Visual Studio instance",
  "VcpkgCeIsExperimental": "vcpkg-ce ('configure environment') is experimental and may change at any time.",
  "VcpkgDisallowedClassicMode": "Error: Could not locate a manifest (vcpkg.json) above the current working directory.\nThis vcpkg distribution does not have a classic mode instance.",
  "VcpkgHasCrashed": "vcpkg.exe has crashed.\nPlease send an email to:\n    {email}\ncontaining a brief summary of what you were trying to do and the following data blob:",
  "VcpkgHasCrashedArgument": "{value}|",
  "VcpkgHasCrashedDataBlob": "\nVersion={version}\nEXCEPTION='{error}'\nCMD=",
  "VcpkgInvalidCommand": "invalid command: {command_name}",
  "VcpkgSendMetricsButDisabled": "Warning: passed --sendmetrics, but metrics are disabled.",
  "VersionInvalidDate": "`{version}` is not a valid date version. Dates must follow the format YYYY-MM-DD and disambiguators must be dot-separated positive integer values without leading zeroes.",
  "VersionInvalidRelaxed": "`{version}` is not a valid relaxed version (semver with arbitrary numeric element count).",
  "VersionInvalidSemver": "`{version}` is not a valid semantic version, consult <https://semver.org>.",
  "VersionSpecMismatch": "error: Failed to load port because version specs did not match\n    Path: {path}\n    Expected: {expected_version}\n    Actual: {actual_version}",
  "WarningMessage": "warning: ",
  "WarningsTreatedAsErrors": "previous warnings being interpreted as errors"
}
