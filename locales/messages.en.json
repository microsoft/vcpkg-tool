{
  "AddArtifactOnlyOne": "'{command_line}' can only add one artifact at a time.",
  "AddCommandFirstArg": "The first parameter to add must be 'artifact' or 'port'.",
  "AddFirstArgument": "The first argument to '{command_line}' must be 'artifact' or 'port'.",
  "AddPortRequiresManifest": "'{command_line}' requires an active manifest file.",
  "AddPortSucceeded": "Succeeded in adding ports to vcpkg.json file.",
  "AddRecurseOption": "If you are sure you want to remove them, run the command with the --recurse option.",
  "AddTripletExpressionNotAllowed": "triplet expressions are not allowed here. You may want to change `{package_name}:{triplet}` to `{package_name}` instead.",
  "AddVersionAddedVersionToFile": "added version {version} to {path}",
  "AddVersionCommitChangesReminder": "Did you remember to commit your changes?",
  "AddVersionCommitResultReminder": "Don't forget to commit the result!",
  "AddVersionDetectLocalChangesError": "skipping detection of local changes due to unexpected format in git status output",
  "AddVersionFileNotFound": "couldn't find required file {path}",
  "AddVersionFormatPortSuggestion": "Run `{command_line}` to format the file",
  "AddVersionIgnoringOptionAll": "ignoring --{option} since a port name argument was provided",
  "AddVersionLoadPortFailed": "can't load port {package_name}",
  "AddVersionNewFile": "(new file)",
  "AddVersionNewShaIs": "new SHA: {value}",
  "AddVersionNoFilesUpdated": "No files were updated",
  "AddVersionNoFilesUpdatedForPort": "No files were updated for {package_name}",
  "AddVersionNoGitSha": "can't obtain SHA for port {package_name}",
  "AddVersionOldShaIs": "old SHA: {value}",
  "AddVersionOverwriteOptionSuggestion": "Use --{option} to bypass this check",
  "AddVersionPortDoesNotExist": "{package_name} does not exist",
  "AddVersionPortFilesShaChanged": "checked-in files for {package_name} have changed but the version was not updated",
  "AddVersionPortFilesShaUnchanged": "checked-in files for {package_name} are unchanged from version {version}",
  "AddVersionPortHasImproperFormat": "{package_name} is not properly formatted",
  "AddVersionSuggestNewVersionScheme": "Use the version scheme \"{new_scheme}\" instead of \"{old_scheme}\" in port \"{package_name}\".\nUse --{option} to disable this check.",
  "AddVersionUnableToParseVersionsFile": "unable to parse versions file {path}",
  "AddVersionUncommittedChanges": "there are uncommitted changes for {package_name}",
  "AddVersionUpdateVersionReminder": "Did you remember to update the version or port version?",
  "AddVersionUseOptionAll": "{command_name} with no arguments requires passing --{option} to update all port versions at once",
  "AddVersionVersionAlreadyInFile": "version {version} is already in {path}",
  "AddVersionVersionIs": "version: {version}",
  "AddingCompletionEntry": "Adding vcpkg completion entry to {path}.",
  "AdditionalPackagesToExport": "Additional packages (*) need to be exported to complete this operation.",
  "AdditionalPackagesToRemove": "Additional packages (*) need to be removed to complete this operation.",
  "AllFormatArgsRawArgument": "format string \"{value}\" contains a raw format argument",
  "AllFormatArgsUnbalancedBraces": "unbalanced brace in format string \"{value}\"",
  "AllPackagesAreUpdated": "All installed packages are up-to-date with the local portfile.",
  "AlreadyInstalled": "{spec} is already installed",
  "AlreadyInstalledNotHead": "{spec} is already installed -- not building from HEAD",
  "AndroidHomeDirMissingProps": "source.properties missing in {env_var} directory: {path}",
  "AnotherInstallationInProgress": "Another installation is in progress on the machine, sleeping 6s before retrying.",
  "AppliedUserIntegration": "Applied user-wide integration for this vcpkg root.",
  "ArtifactsOptionIncompatibility": "--{option} has no effect on find artifact.",
  "AssetSourcesArg": "Add sources for asset caching. See 'vcpkg help assetcaching'.",
  "AttemptingToFetchPackagesFromVendor": "Attempting to fetch {count} package(s) from {vendor}",
  "AuthenticationMayRequireManualAction": "One or more {vendor} credential providers requested manual action. Add the binary source 'interactive' to allow interactivity.",
  "AutoSettingEnvVar": "-- Automatically setting {env_var} environment variables to \"{url}\".",
  "AutomaticLinkingForMSBuildProjects": "All MSBuild C++ projects can now #include any installed libraries. Linking will be handled automatically. Installing new libraries will make them instantly available.",
  "AvailableArchitectureTriplets": "Available architecture triplets:",
  "AvailableHelpTopics": "Available help topics:",
  "BinarySourcesArg": "Add sources for binary caching. See 'vcpkg help binarycaching'.",
  "BothYesAndNoOptionSpecifiedError": "cannot specify both --no-{option} and --{option}.",
  "BuildAlreadyInstalled": "{spec} is already installed; please remove {spec} before attempting to build it.",
  "BuildDependenciesMissing": "The build command requires all dependencies to be already installed.\nThe following dependencies are missing:",
  "BuildResultBuildFailed": "BUILD_FAILED",
  "BuildResultCacheMissing": "CACHE_MISSING",
  "BuildResultCascadeDueToMissingDependencies": "CASCADED_DUE_TO_MISSING_DEPENDENCIES",
  "BuildResultDownloaded": "DOWNLOADED",
  "BuildResultExcluded": "EXCLUDED",
  "BuildResultFileConflicts": "FILE_CONFLICTS",
  "BuildResultPostBuildChecksFailed": "POST_BUILD_CHECKS_FAILED",
  "BuildResultRemoved": "REMOVED",
  "BuildResultSucceeded": "SUCCEEDED",
  "BuildResultSummaryHeader": "SUMMARY FOR {triplet}",
  "BuildResultSummaryLine": "{build_result}: {count}",
  "BuildTreesRootDir": "(Experimental) Specify the buildtrees root directory.",
  "BuildTroubleshootingMessage1": "Please ensure you're using the latest port files with `git pull` and `vcpkg update`.\nThen check for known issues at:",
  "BuildTroubleshootingMessage2": "You can submit a new issue at:",
  "BuildTroubleshootingMessage3": "Include '[{package_name}] Build error' in your bug report title, the following version information in your bug description, and attach any relevant failure logs from above.",
  "BuildTroubleshootingMessage4": "Please use the prefilled template from {path} when reporting your issue.",
  "BuildingFromHead": "Building {spec} from HEAD...",
  "BuildingPackage": "Building {spec}...",
  "BuildingPackageFailed": "building {spec} failed with: {build_result}",
  "BuildingPackageFailedDueToMissingDeps": "due to the following missing dependencies:",
  "BuiltInTriplets": "vcpkg built-in triplets:",
  "CMakeTargetsUsage": "{package_name} provides CMake targets:",
  "CMakeTargetsUsageHeuristicMessage": "# this is heuristically generated, and may not be correct",
  "CMakeToolChainFile": "CMake projects should use: \"-DCMAKE_TOOLCHAIN_FILE={path}\"",
  "CMakeUsingExportedLibs": "To use exported libraries in CMake projects, add {value} to your CMake command line.",
  "ChecksFailedCheck": "vcpkg has crashed; no additional details are available.",
  "ChecksUnreachableCode": "unreachable code was reached",
  "ChecksUpdateVcpkg": "updating vcpkg by rerunning bootstrap-vcpkg may resolve this failure.",
  "CiBaselineAllowUnexpectedPassingRequiresBaseline": "--allow-unexpected-passing can only be used if a baseline is provided via --ci-baseline.",
  "CiBaselineDisallowedCascade": "REGRESSION: {spec} cascaded, but it is required to pass. ({path}).",
  "CiBaselineRegression": "REGRESSION: {spec} failed with {build_result}. If expected, add {spec}=fail to {path}.",
  "CiBaselineRegressionHeader": "REGRESSIONS:",
  "CiBaselineUnexpectedPass": "PASSING, REMOVE FROM FAIL LIST: {spec} ({path}).",
  "ClearingContents": "Clearing contents of {path}",
  "CmakeTargetsExcluded": "note: {count} additional targets are not displayed.",
  "CommandFailed": "command:\n{command_line}\nfailed with the following results:",
  "CommunityTriplets": "VCPKG community triplets:",
  "ComparingUtf8Decoders": "Comparing Utf8Decoders with different provenance; this is always an error",
  "CompressFolderFailed": "Failed to compress folder \"{path}\":",
  "ComputingInstallPlan": "Computing installation plan...",
  "ConflictingFiles": "The following files are already installed in {path} and are in conflict with {spec}",
  "ConflictingValuesForOption": "conflicting values specified for '--{option}'.",
  "ConstraintViolation": "Found a constraint violation:",
  "ContinueCodeUnitInStart": "found continue code unit in start position",
  "ControlAndManifestFilesPresent": "Both a manifest file and a CONTROL file exist in port directory: {path}",
  "CopyrightIsDir": "`{path}` being a directory is deprecated.",
  "CorruptedDatabase": "Database corrupted.",
  "CorruptedInstallTree": "Your vcpkg 'installed' tree is corrupted.",
  "CouldNotDeduceNugetIdAndVersion": "Could not deduce nuget id and version from filename: {path}",
  "CreateFailureLogsDir": "Creating failure logs output directory {path}.",
  "CreatedNuGetPackage": "Created nupkg: {path}",
  "Creating7ZipArchive": "Creating 7zip archive...",
  "CreatingNugetPackage": "Creating NuGet package...",
  "CreatingZipArchive": "Creating zip archive...",
  "CreationFailed": "Creating {path} failed.",
  "CurlReportedUnexpectedResults": "curl has reported unexpected results to vcpkg and vcpkg cannot continue.\nPlease review the following text for sensitive information and open an issue on the Microsoft/vcpkg GitHub to help fix this problem!\ncmd: {command_line}\n=== curl output ===\n{actual}\n=== end curl output ===",
  "DateTableHeader": "Date",
  "DefaultBrowserLaunched": "Default browser launched to {url}.",
  "DefaultFlag": "Defaulting to --{option} being on.",
  "DefaultPathToBinaries": "Based on your system settings, the default path to store binaries is \"{path}\". This consults %LOCALAPPDATA%/%APPDATA% on Windows and $XDG_CACHE_HOME or $HOME on other platforms.",
  "DeprecatedPrefabDebugOption": "--prefab-debug is now deprecated.",
  "DetectCompilerHash": "Detecting compiler hash for triplet {triplet}...",
  "DocumentedFieldsSuggestUpdate": "If these are documented fields that should be recognized try updating the vcpkg tool.",
  "DownloadAvailable": "A downloadable copy of this tool is available and can be used by unsetting {env_var}.",
  "DownloadRootsDir": "Specify the downloads root directory.\n(default: {env_var})",
  "DownloadedSources": "Downloaded sources for {spec}",
  "DownloadingVcpkgCeBundle": "Downloading vcpkg-ce bundle {version}...",
  "DownloadingVcpkgCeBundleLatest": "Downloading latest vcpkg-ce bundle...",
  "DownloadingVcpkgStandaloneBundle": "Downloading standalone bundle {version}.",
  "DownloadingVcpkgStandaloneBundleLatest": "Downloading latest standalone bundle.",
  "DuplicateCommandOption": "The option --{option} can only be passed once.",
  "DuplicateOptions": "'--{value}' specified multiple times.",
  "ElapsedForPackage": "Elapsed time to handle {spec}: {elapsed}",
  "ElapsedInstallTime": "Total elapsed time: {count}",
  "ElapsedTimeForChecks": "Time to determine pass/fail: {elapsed}",
  "EmailVcpkgTeam": "Send an email to {url} with any feedback.",
  "EmptyArg": "The option --{option} must be passed a non-empty argument.",
  "EmptyLicenseExpression": "SPDX license expression was empty.",
  "EndOfStringInCodeUnit": "found end of string in middle of code point",
  "EnvStrFailedToExtract": "could not expand the environment string:",
  "ErrorDetectingCompilerInfo": "while detecting compiler information:\nThe log file content at \"{path}\" is:",
  "ErrorIndividualPackagesUnsupported": "In manifest mode, `vcpkg install` does not support individual package arguments.\nTo install additional packages, edit vcpkg.json and then run `vcpkg install` without any package arguments.",
  "ErrorInvalidClassicModeOption": "The option --{option} is not supported in classic mode and no manifest was found.",
  "ErrorInvalidManifestModeOption": "The option --{option} is not supported in manifest mode.",
  "ErrorMessage": "error: ",
  "ErrorMessageMustUsePrintError": "The message named {value} starts with error:, it must be changed to prepend ErrorMessage in code instead.",
  "ErrorMissingVcpkgRoot": "Could not detect vcpkg-root. If you are trying to use a copy of vcpkg that you've built, you must define the VCPKG_ROOT environment variable to point to a cloned copy of https://github.com/Microsoft/vcpkg.",
  "ErrorNoVSInstance": "in triplet {triplet}: Unable to find a valid Visual Studio instance",
  "ErrorNoVSInstanceAt": "at \"{path}\"",
  "ErrorNoVSInstanceFullVersion": "with toolset version prefix {version}",
  "ErrorNoVSInstanceVersion": "with toolset version {version}",
  "ErrorParsingBinaryParagraph": "while parsing the Binary Paragraph for {spec}",
  "ErrorRequireBaseline": "this vcpkg instance requires a manifest with a specified baseline in order to interact with ports. Please add 'builtin-baseline' to the manifest or add a 'vcpkg-configuration.json' that redefines the default registry.",
  "ErrorRequirePackagesList": "`vcpkg install` requires a list of packages to install in classic mode.",
  "ErrorUnableToDetectCompilerInfo": "vcpkg was unable to detect the active compiler's information. See above for the CMake failure output.",
  "ErrorVcvarsUnsupported": "in triplet {triplet}: Use of Visual Studio's Developer Prompt is unsupported on non-Windows hosts.\nDefine 'VCPKG_CMAKE_SYSTEM_NAME' or 'VCPKG_CHAINLOAD_TOOLCHAIN_FILE' in the triplet file.",
  "ErrorVsCodeNotFound": "Visual Studio Code was not found and the environment variable {env_var} is not set or invalid.",
  "ErrorVsCodeNotFoundPathExamined": "The following paths were examined:",
  "ErrorWhileParsing": "Errors occurred while parsing {path}.",
  "ErrorWhileWriting": "Error occured while writing {path}",
  "ErrorsFound": "Found the following errors:",
  "ExceededRecursionDepth": "Recursion depth exceeded.",
  "ExcludedPackage": "Excluded {spec}",
  "ExcludedPackages": "The following packages are excluded:",
  "ExpectedAtMostOneSetOfTags": "Found {count} sets of {old_value}.*{new_value} but expected at most 1, in block:\n{value}",
  "ExpectedCascadeFailure": "Expected {expected} cascade failure, but there were {actual} cascade failures.",
  "ExpectedCharacterHere": "expected '{expected}' here",
  "ExpectedFailOrSkip": "expected 'fail', 'skip', or 'pass' here",
  "ExpectedOneSetOfTags": "Found {count} sets of {old_value}.*{new_value} but expected exactly 1, in block:\n{value}",
  "ExpectedPortName": "expected a port name here",
  "ExpectedStatusField": "Expected 'status' field in status paragraph",
  "ExpectedTripletName": "expected a triplet name here",
  "ExpectedValueForOption": "expected value after --{option}.",
  "ExportArchitectureReq": "Export prefab requires targeting at least one of the following architectures arm64-v8a, armeabi-v7a, x86_64, x86 to be present.",
  "ExportPrefabRequiresAndroidTriplet": "export prefab requires an Android triplet.",
  "ExportUnsupportedInManifest": "vcpkg export does not support manifest mode, in order to allow for future design considerations. You may use export in classic mode by running vcpkg outside of a manifest-based project.",
  "Exported7zipArchive": "7zip archive exported at: {path}",
  "ExportedZipArchive": "Zip archive exported at: {path}",
  "ExportingAlreadyBuiltPackages": "The following packages are already built and will be exported:",
  "ExportingMaintenanceTool": "Exporting maintenance tool...",
  "ExportingPackage": "Exporting {package_name}...",
  "ExtendedDocumentationAtUrl": "Extended documentation available at '{url}'.",
  "FailedToExtract": "Failed to extract \"{path}\":",
  "FailedToFindPortFeature": "Could not find {feature} in {spec}.",
  "FailedToFormatMissingFile": "No files to format.\nPlease pass either --all, or the explicit files to format or convert.",
  "FailedToLoadInstalledManifest": "The control or manifest file for {spec} could not be loaded due to the following error. Please remove {spec} and try again.",
  "FailedToLoadPort": "Failed to load port {package_name} from {path}",
  "FailedToLoadPortFrom": "Failed to load port from {path}",
  "FailedToLocateSpec": "Failed to locate spec in graph: {spec}",
  "FailedToObtainDependencyVersion": "Cannot find desired dependency version.",
  "FailedToObtainLocalPortGitSha": "Failed to obtain git SHAs for local ports.",
  "FailedToObtainPackageVersion": "Cannot find desired package version.",
  "FailedToParseCMakeConsoleOut": "Failed to parse CMake console output to locate block start/end markers.",
  "FailedToParseControl": "Failed to parse control file: {path}",
  "FailedToParseJson": "Failed to parse JSON file: {path}",
  "FailedToParseManifest": "Failed to parse manifest file: {path}",
  "FailedToParseSerializedBinParagraph": "[sanity check] Failed to parse a serialized binary paragraph.\nPlease open an issue at https://github.com/microsoft/vcpkg, with the following output:\n{error_msg}\nSerialized Binary Paragraph:",
  "FailedToProvisionCe": "Failed to provision vcpkg-ce.",
  "FailedToRead": "Failed to read {path}: {error_msg}",
  "FailedToReadParagraph": "Failed to read paragraphs from {path}",
  "FailedToRemoveControl": "Failed to remove control file {path}",
  "FailedToRunToolToDetermineVersion": "Failed to run \"{path}\" to determine the {tool_name} version.",
  "FailedToStoreBackToMirror": "failed to store back to mirror:",
  "FailedToStoreBinaryCache": "Failed to store binary cache {path}",
  "FailedToWriteManifest": "Failed to write manifest file {path}",
  "FailedVendorAuthentication": "One or more {vendor} credential providers failed to authenticate. See '{url}' for more details on how to provide credentials.",
  "FeedbackAppreciated": "Thank you for your feedback!",
  "FileNotFound": "{path}: file not found",
  "FileSystemOperationFailed": "Filesystem operation failed:",
  "FilesExported": "Files exported at: {path}",
  "FishCompletion": "vcpkg fish completion is already added at \"{path}\".",
  "FollowingPackagesMissingControl": "The following packages do not have a valid CONTROL or vcpkg.json:",
  "FollowingPackagesNotInstalled": "The following packages are not installed:",
  "FollowingPackagesUpgraded": "The following packages are up-to-date:",
  "ForceSystemBinariesOnWeirdPlatforms": "Environment variable VCPKG_FORCE_SYSTEM_BINARIES must be set on arm, s390x, and ppc64le platforms.",
  "FormattedParseMessageExpression": "on expression: {value}",
  "GenerateMsgErrorParsingFormatArgs": "parsing format string for {value}:",
  "GenerateMsgIncorrectComment": "message {value} has an incorrect comment:",
  "GenerateMsgNoArgumentValue": "{{{value}}} was specified in a comment, but was not used in the message.",
  "GenerateMsgNoCommentValue": "{{{value}}} was used in the message, but not commented.",
  "GeneratedConfiguration": "Generated configuration {path}.",
  "GeneratedInstaller": "{path} installer generated.",
  "GeneratingConfiguration": "Generating configuration {path}...",
  "GeneratingInstaller": "Generating installer {path}...",
  "GeneratingRepo": "Generating repository {path}...",
  "GetParseFailureInfo": "Use '--debug' to get more information about the parse failures.",
  "GitCommandFailed": "failed to execute: {command_line}",
  "GitStatusOutputExpectedFileName": "expected a file name",
  "GitStatusOutputExpectedNewLine": "expected new line",
  "GitStatusOutputExpectedRenameOrNewline": "expected renamed file or new lines",
  "GitStatusUnknownFileStatus": "unknown file status: {value}",
  "GitUnexpectedCommandOutput": "unexpected git output",
  "GraphCycleDetected": "Cycle detected within graph at {package_name}:",
  "HashFileFailureToRead": "failed to read file \"{path}\" for hashing: ",
  "HeaderOnlyUsage": "{package_name} is header-only and can be used from CMake via:",
  "HelpBuiltinBase": "The baseline references a commit within the vcpkg repository that establishes a minimum version on every dependency in the graph. For example, if no other constraints are specified (directly or transitively), then the version will resolve to the baseline of the top level manifest. Baselines of transitive dependencies are ignored.",
  "HelpContactCommand": "Display contact information to send feedback.",
  "HelpCreateCommand": "Create a new port.",
  "HelpDependInfoCommand": "Display a list of dependencies for ports.",
  "HelpEditCommand": "Open a port for editing (use the environment variable '{env_var}' to set an editor program, defaults to 'code').",
  "HelpEnvCommand": "Creates a clean shell environment for development or compiling.",
  "HelpExampleCommand": "For more help (including examples) see the accompanying README.md and docs folder.",
  "HelpExampleManifest": "Example manifest:",
  "HelpExportCommand": "Exports a package.",
  "HelpFormatManifestCommand": "Formats all vcpkg.json files. Run this before committing to vcpkg.",
  "HelpHashCommand": "Hash a file by specific algorithm, default SHA512.",
  "HelpInitializeRegistryCommand": "Initializes a registry in the directory <path>.",
  "HelpInstallCommand": "Install a package.",
  "HelpListCommand": "List installed packages.",
  "HelpManifestConstraints": "Manifests can place three kinds of constraints upon the versions used",
  "HelpMinVersion": "Vcpkg will select the minimum version found that matches all applicable constraints, including the version from the baseline specified at top-level as well as any \"version>=\" constraints in the graph.",
  "HelpOverrides": "When used as the top-level manifest (such as when running `vcpkg install` in the directory), overrides allow a manifest to short-circuit dependency resolution and specify exactly the version to use. These can be used to handle version conflicts, such as with `version-string` dependencies. They will not be considered when transitively depended upon.",
  "HelpOwnsCommand": "Search for files in installed packages.",
  "HelpPackagePublisher": "Additionally, package publishers can use \"version>=\" constraints to ensure that consumers are using at least a certain minimum version of a given dependency. For example, if a library needs an API added to boost-asio in 1.70, a \"version>=\" constraint will ensure transitive users use a sufficient version even in the face of individual version overrides or cross-registry references.",
  "HelpPortVersionScheme": "Each version additionally has a \"port-version\" which is a nonnegative integer. When rendered as text, the port version (if nonzero) is added as a suffix to the primary version text separated by a hash (#). Port-versions are sorted lexographically after the primary version text, for example:\n1.0.0 < 1.0.0#1 < 1.0.1 < 1.0.1#5 < 2.0.0",
  "HelpRemoveCommand": "Uninstall a package.",
  "HelpRemoveOutdatedCommand": "Uninstall all out-of-date packages.",
  "HelpResponseFileCommand": "Specify a response file to provide additional parameters.",
  "HelpSearchCommand": "Search for packages available to be built.",
  "HelpTopicCommand": "Display help for a specific topic.",
  "HelpTopicsCommand": "Display the list of help topics.",
  "HelpUpdateBaseline": "The best approach to keep your libraries up to date, the best approach is to update your baseline reference. This will ensure all packages, including transitive ones, are updated. However if you need to update a package independently, you can use a \"version>=\" constraint.",
  "HelpUpdateCommand": "List packages that can be updated.",
  "HelpUpgradeCommand": "Rebuild all outdated packages.",
  "HelpVersionCommand": "Display version information.",
  "HelpVersionDateScheme": "A date (2021-01-01.5)",
  "HelpVersionGreater": "Within the \"dependencies\" field, each dependency can have a minimum constraint listed. These minimum constraints will be used when transitively depending upon this library. A minimum port-version can additionally be specified with a '#' suffix.",
  "HelpVersionScheme": "A dot-separated sequence of numbers (1.2.3.4)",
  "HelpVersionSchemes": "The following versioning schemes are accepted.",
  "HelpVersionSemverScheme": "A Semantic Version 2.0 (2.1.0-rc2)",
  "HelpVersionStringScheme": "An exact, incomparable version (Vista)",
  "HelpVersioning": "Versioning allows you to deterministically control the precise revisions of dependencies used by your project from within your manifest file.",
  "IgnoringVcpkgRootEnvironment": "Ignoring VCPKG_ROOT environment variable; use --vcpkg-root \"{path}\" to use the environment value or unset the VCPKG_ROOT environment variable to suppress this message. Using detected vcpkg root: \"{actual}\".",
  "IllegalFeatures": "List of features is not allowed in this context",
  "IllegalPlatformSpec": "Platform qualifier is not allowed in this context",
  "ImproperShaLength": "SHA512's must be 128 hex characters: {value}",
  "IncorrectNumberOfArgs": "'{command_name}' requires '{expected}' arguments, but '{actual}' were provided.",
  "IncrementedUtf8Decoder": "Incremented Utf8Decoder at the end of the string",
  "InfoSetEnvVar": "You can also set the environment variable '{env_var}' to your editor of choice.",
  "InitRegistryFailedNoRepo": "Could not create a registry at {path} because this is not a git repository root.\nUse `git init {command_line}` to create a git repository in this folder.",
  "InstallFailed": "failed: {path}: {error_msg}",
  "InstallPackageInstruction": "With a project open, go to Tools->NuGet Package Manager->Package Manager Console and paste:\n Install-Package \"{value}\" -Source \"{path}\"",
  "InstallRootDir": "(Experimental) Specify the install root directory.",
  "InstallWithSystemManager": "You may be able to install this tool via your system package manager.",
  "InstallWithSystemManagerMono": "Ubuntu 18.04 users may need a newer version of mono, available at {url}.",
  "InstallWithSystemManagerPkg": "You may be able to install this tool via your system package manager ({command_line}).",
  "InstalledBy": "Installed by {path}",
  "InstalledPackages": "The following packages are already installed:",
  "InstalledRequestedPackages": "All requested packages are currently installed.",
  "InstallingFromLocation": "-- Installing port from location: {path}",
  "InstallingMavenFile": "{path} installing maven file",
  "InstallingPackage": "Installing {action_index}/{count} {spec}...",
  "IntegrationFailed": "Integration was not applied.",
  "InternalCICommand": "vcpkg ci is an internal command which will change incompatibly or be removed at any time.",
  "InternalErrorMessage": "internal error: ",
  "InternalErrorMessageContact": "Please open an issue at https://github.com/microsoft/vcpkg/issues/new?template=other-type-of-bug-report.md&labels=category:vcpkg-bug with detailed steps to reproduce the problem.",
  "InvalidArgMustBeAnInt": "--{option} must be an integer.",
  "InvalidArgMustBePositive": "--{option} must be non-negative.",
  "InvalidArgument": "invalid argument",
  "InvalidArgumentRequiresAbsolutePath": "invalid argument: binary config '{binary_source}' path arguments for binary config strings must be absolute",
  "InvalidArgumentRequiresBaseUrl": "invalid argument: binary config '{binary_source}' requires a {base_url} base url as the first argument",
  "InvalidArgumentRequiresBaseUrlAndToken": "invalid argument: binary config '{binary_source}' requires at least a base-url and a SAS token",
  "InvalidArgumentRequiresNoneArguments": "invalid argument: binary config '{binary_source}' does not take arguments",
  "InvalidArgumentRequiresOneOrTwoArguments": "invalid argument: binary config '{binary_source}' requires 1 or 2 arguments",
  "InvalidArgumentRequiresPathArgument": "invalid argument: binary config '{binary_source}' requires at least one path argument",
  "InvalidArgumentRequiresPrefix": "invalid argument: binary config '{binary_source}' requires at least one prefix",
  "InvalidArgumentRequiresSingleArgument": "invalid argument: binary config '{binary_source}' does not take more than 1 argument",
  "InvalidArgumentRequiresSingleStringArgument": "invalid argument: binary config '{binary_source}' expects a single string argument",
  "InvalidArgumentRequiresSourceArgument": "invalid argument: binary config '{binary_source}' requires at least one source argument",
  "InvalidArgumentRequiresTwoOrThreeArguments": "invalid argument: binary config '{binary_source}' requires 2 or 3 arguments",
  "InvalidArgumentRequiresValidToken": "invalid argument: binary config '{binary_source}' requires a SAS token without a preceeding '?' as the second argument",
  "InvalidBuildInfo": "Invalid BUILD_INFO file for package: {error_msg}",
  "InvalidCodePoint": "Invalid code point passed to utf8_encoded_code_point_count",
  "InvalidCodeUnit": "invalid code unit",
  "InvalidCommandArgSort": "Value of --sort must be one of 'lexicographical', 'topological', 'reverse'.",
  "InvalidCommitId": "Invalid commit id {value}",
  "InvalidFileType": "failed: {path} cannot handle file type",
  "InvalidFilename": "Filename cannot contain invalid chars {value}, but was {path}",
  "InvalidFormatString": "invalid format string: {actual}",
  "InvalidLinkage": "Invalid {system_name} linkage type: [{value}]",
  "InvalidOptionForRemove": "'remove' accepts either libraries or '--outdated'",
  "InvalidTriplet": "Invalid triplet: {triplet}",
  "IrregularFile": "path was not a regular file: {path}",
  "JsonErrorMustBeAnObject": "Expected \"{path}\" to be an object.",
  "JsonSwitch": "(Experimental) Request JSON output.",
  "LaunchingProgramFailed": "Launching {tool_name}:",
  "LicenseExpressionContainsExtraPlus": "SPDX license expression contains an extra '+'. These are only allowed directly after a license identifier.",
  "LicenseExpressionContainsInvalidCharacter": "SPDX license expression contains an invalid character (0x{value:02X} '{value}').",
  "LicenseExpressionContainsUnicode": "SPDX license expression contains a unicode character (U+{value:04X} '{pretty_value}'), but these expressions are ASCII-only.",
  "LicenseExpressionDocumentRefUnsupported": "The current implementation does not support DocumentRef- SPDX references.",
  "LicenseExpressionExpectCompoundFoundParen": "Expected a compound or the end of the string, found a parenthesis.",
  "LicenseExpressionExpectCompoundFoundWith": "Expected either AND or OR, found WITH (WITH is only allowed after license names, not parenthesized expressions).",
  "LicenseExpressionExpectCompoundFoundWord": "Expected either AND or OR, found a license or exception name: '{value}'.",
  "LicenseExpressionExpectCompoundOrWithFoundWord": "Expected either AND, OR, or WITH, found a license or exception name: '{value}'.",
  "LicenseExpressionExpectExceptionFoundCompound": "Expected an exception name, found the compound {value}.",
  "LicenseExpressionExpectExceptionFoundEof": "Expected an exception name, found the end of the string.",
  "LicenseExpressionExpectExceptionFoundParen": "Expected an exception name, found a parenthesis.",
  "LicenseExpressionExpectLicenseFoundCompound": "Expected a license name, found the compound {value}.",
  "LicenseExpressionExpectLicenseFoundEof": "Expected a license name, found the end of the string.",
  "LicenseExpressionExpectLicenseFoundParen": "Expected a license name, found a parenthesis.",
  "LicenseExpressionImbalancedParens": "There was a close parenthesis without an opening parenthesis.",
  "LicenseExpressionUnknownException": "Unknown license exception identifier '{value}'. Known values are listed at https://spdx.org/licenses/exceptions-index.html",
  "LicenseExpressionUnknownLicense": "Unknown license identifier '{value}'. Known values are listed at https://spdx.org/licenses/",
  "ListOfValidFieldsForControlFiles": "This is the list of valid fields for CONTROL files (case-sensitive):",
  "LoadingCommunityTriplet": "-- [COMMUNITY] Loading triplet configuration from: {path}",
  "LoadingDependencyInformation": "Loading dependency information for {count} packages...",
  "LoadingOverlayTriplet": "-- [OVERLAY] Loading triplet configuration from: {path}",
  "LocalizedMessageMustNotContainIndents": "The message named {value} contains what appears to be indenting which must be changed to use LocalizedString::append_indent instead.",
  "LocalizedMessageMustNotEndWithNewline": "The message named {value} ends with a newline which should be added by formatting rather than by localization.",
  "ManifestConflict": "Found both a manifest and CONTROL files in port \"{path}\"; please rename one or the other",
  "ManifestFormatCompleted": "Succeeded in formatting the manifest files.",
  "MismatchedFiles": "file to store does not match hash",
  "MismatchedNames": "names did not match: '{package_name}' != '{actual}'",
  "Missing7zHeader": "Unable to find 7z header.",
  "MissingAndroidEnv": "ANDROID_NDK_HOME environment variable missing",
  "MissingAndroidHomeDir": "ANDROID_NDK_HOME directory does not exist: {path}",
  "MissingArgFormatManifest": "format-manifest was passed --convert-control without '--all'.\nThis doesn't do anything: control files passed explicitly are converted automatically.",
  "MissingDependency": "Package {spec} is installed, but dependency {package_name} is not.",
  "MissingExtension": "Missing '{extension}' extension.",
  "MissingOption": "This command requires --{option}",
  "MissingPortSuggestPullRequest": "If your port is not listed, please open an issue at and/or consider making a pull request.",
  "MissmatchedBinParagraphs": "The serialized binary paragraph was different from the original binary paragraph. Please open an issue at https://github.com/microsoft/vcpkg with the following output:",
  "MonoInstructions": "This may be caused by an incomplete mono installation. Full mono is available on some systems via `sudo apt install mono-complete`. Ubuntu 18.04 users may need a newer version of mono, available at https://www.mono-project.com/download/stable/",
  "MsiexecFailedToExtract": "msiexec failed while extracting \"{path}\" with launch or exit code {exit_code} and message:",
  "MultiArch": "Multi-Arch must be 'same' but was {option}",
  "MutuallyExclusiveOption": "--{value} can not be used with --{option}.",
  "NavigateToNPS": "Please navigate to {url} in your preferred browser.",
  "NewConfigurationAlreadyExists": "Creating a manifest would overwrite a vcpkg-configuration.json at {path}.",
  "NewManifestAlreadyExists": "A manifest is already present at {path}.",
  "NewNameCannotBeEmpty": "--name cannot be empty.",
  "NewOnlyOneVersionKind": "Only one of --version-relaxed, --version-date, or --version-string may be specified.",
  "NewSpecifyNameVersionOrApplication": "Either specify --name and --version to produce a manifest intended for C++ libraries, or specify --application to indicate that the manifest is not intended to be used as a port.",
  "NewVersionCannotBeEmpty": "--version cannot be empty.",
  "NoArgumentsForOption": "The option --{option} does not accept an argument.",
  "NoCachedPackages": "No packages are cached.",
  "NoError": "no error",
  "NoInstalledPackages": "No packages are installed. Did you mean `search`?",
  "NoLocalizationForMessages": "No localized messages for the following: ",
  "NoOutdatedPackages": "There are no outdated packages.",
  "NoRegistryForPort": "no registry configured for port {package_name}",
  "NoteMessage": "note: ",
  "NugetPackageFileSucceededButCreationFailed": "NuGet package creation succeeded, but no .nupkg was produced. Expected: \"{path}\"",
  "OptionMustBeInteger": "Value of --{option} must be an integer.",
  "OptionRequired": "--{option} option is required.",
  "OptionRequiresOption": "--{value} requires --{option}",
  "OriginalBinParagraphHeader": "\nOriginal Binary Paragraph",
  "OverlayPatchDir": "Overlay path \"{path}\" must exist and must be a directory.",
  "OverlayTriplets": "Overlay triplets from {path} :",
  "OverwritingFile": "File {path} was already present and will be overwritten",
  "PackageAlreadyRemoved": "unable to remove package {spec}: already removed",
  "PackageFailedtWhileExtracting": "'{value}' failed while extracting {path}.",
  "PackageRootDir": "(Experimental) Specify the packages root directory.",
  "PackagesToInstall": "The following packages will be built and installed:",
  "PackagesToInstallDirectly": "The following packages will be directly installed:",
  "PackagesToModify": "Additional packages (*) will be modified to complete this operation.",
  "PackagesToRebuild": "The following packages will be rebuilt:",
  "PackagesToRebuildSuggestRecurse": "If you are sure you want to rebuild the above packages, run the command with the --recurse option.",
  "PackagesToRemove": "The following packages will be removed:",
  "PackingVendorFailed": "Packing {vendor} failed. Use --debug for more information.",
  "PairedSurrogatesAreInvalid": "trailing surrogate following leading surrogate (paired surrogates are invalid)",
  "ParseControlErrorInfoInvalidFields": "The following fields were not expected:",
  "ParseControlErrorInfoMissingFields": "The following fields were missing:",
  "ParseControlErrorInfoTypesEntry": "{value} was expected to be {expected}",
  "ParseControlErrorInfoWhileLoading": "while loading {path}:",
  "ParseControlErrorInfoWrongTypeFields": "The following fields had the wrong types:",
  "PortDependencyConflict": "Port {package_name} has the following unsupported dependencies:",
  "PortNotInBaseline": "the baseline does not contain an entry for port {package_name}",
  "PortSupportsField": "(supports: \"{supports_expression}\")",
  "PortTypeConflict": "The port type of {spec} differs between the installed and available portfile.\nPlease manually remove {spec} and re-run this command.",
  "PortsAdded": "The following {count} ports were added:",
  "PortsNoDiff": "There were no changes in the ports between the two commits.",
  "PortsRemoved": "The following {count} ports were removed:",
  "PortsUpdated": "\nThe following {count} ports were updated:",
  "PrebuiltPackages": "There are packages that have not been built. To build them run:",
  "PreviousIntegrationFileRemains": "Previous integration file was not removed.",
  "ProcessorArchitectureMalformed": "Failed to parse %PROCESSOR_ARCHITECTURE% ({arch}) as a valid CPU architecture.",
  "ProcessorArchitectureMissing": "The required environment variable %PROCESSOR_ARCHITECTURE% is missing.",
  "ProcessorArchitectureW6432Malformed": "Failed to parse %PROCESSOR_ARCHITEW6432% ({arch}) as a valid CPU architecture. Falling back to %PROCESSOR_ARCHITECTURE%.",
  "ProgramReturnedNonzeroExitCode": "{tool_name} failed with exit code: ({exit_code}).",
  "ProvideExportType": "At least one of the following options are required: --raw --nuget --ifw --zip --7zip --chocolatey --prefab.",
  "PushingVendorFailed": "Pushing {vendor} to \"{path}\" failed. Use --debug for more information.",
  "RegistryCreated": "Successfully created registry at {path}",
  "RemoveDependencies": "To remove dependencies in manifest mode, edit your manifest (vcpkg.json) and run 'install'.",
  "RemovePackageConflict": "Another installed package matches the name of an unmatched request. Did you mean {spec}?",
  "RemovingPackage": "Removing {action_index}/{count} {spec}",
  "ReplaceSecretsError": "Replace secretes produced the following error: '{error_msg}'",
  "RestoredPackage": "Restored package from \"{path}\"",
  "RestoredPackagesFromVendor": "Restored {count} package(s) from {value} in {elapsed}. Use --debug to see more details.",
  "ResultsHeader": "RESULTS",
  "SeeURL": "See {url} for more information.",
  "SerializedBinParagraphHeader": "\nSerialized Binary Paragraph",
  "SettingEnvVar": "-- Setting \"{env_var}\" environment variables to \"{url}\".",
  "ShaPassedAsArgAndOption": "SHA512 passed as both an argument and as an option. Only pass one of these.",
  "ShaPassedWithConflict": "SHA512 passed, but --skip-sha512 was also passed; only do one or the other.",
  "ShallowRepositoryDetected": "vcpkg was cloned as a shallow repository in: {path}\nTry again with a full vcpkg clone.",
  "SkipClearingInvalidDir": "Skipping clearing contents of {path} because it was not a directory.",
  "SourceFieldPortNameMismatch": "The 'Source' field inside the CONTROL file, or \"name\" field inside the vcpkg.json file has the name {package_name} and does not match the port directory \"{path}\".",
  "SpecifiedFeatureTurnedOff": "'{command_name}' feature specifically turned off, but --{option} was specified.",
  "SpecifyDirectoriesContaining": "Specifiy directories containing triplets files.\n(also: '{env_var}')",
  "SpecifyDirectoriesWhenSearching": "Specify directories to be used when searching for ports.\n(also: '{env_var}')",
  "SpecifyHostArch": "Specify the host architecture triplet. See 'vcpkg help triplet'.\n(default: '{env_var}')",
  "SpecifyTargetArch": "Specify the target architecture triplet. See 'vcpkg help triplet'.\n(default: '{env_var}')",
  "StartCodeUnitInContinue": "found start code unit in continue position",
  "StoreOptionMissingSha": "--store option is invalid without a sha512",
  "StoredBinaryCache": "Stored binary cache: \"{path}\"",
  "SuccessfulyExported": "Exported {package_name} to {path}",
  "SuggestGitPull": "The result may be outdated. Run `git pull` to get the latest results.",
  "SuggestResolution": "To attempt to resolve all errors at once, run:\nvcpkg {command_name} --{option}",
  "SuggestStartingBashShell": "Please make sure you have started a new bash shell for the change to take effect.",
  "SuggestUpdateVcpkg": "You may need to update the vcpkg binary; try running {command_line} to update.",
  "SupportedPort": "Port {package_name} is supported.",
  "SystemApiErrorMessage": "calling {system_api} failed with {exit_code} ({error_msg})",
  "ToolFetchFailed": "Could not fetch {tool_name}.",
  "ToolInWin10": "This utility is bundled with Windows 10 or later.",
  "TotalTime": "Total elapsed time: {elapsed}",
  "TwoFeatureFlagsSpecified": "Both '{value}' and -'{value}' were specified as feature flags.",
  "UndeterminedToolChainForTriplet": "Unable to determine toolchain use for {triplet} with with CMAKE_SYSTEM_NAME {system_name}. Did you mean to use VCPKG_CHAINLOAD_TOOLCHAIN_FILE?",
  "UnexpectedByteSize": "Expected {expected} bytes to be written, but {actual} were written.",
  "UnexpectedErrorDuringBulkDownload": "an unexpected error occurred during bulk download.",
  "UnexpectedExtension": "Unexpected archive extension: '{extension}'.",
  "UnexpectedFormat": "Expected format is [{expected}], but was [{actual}].",
  "UnexpectedToolOutput": "{tool_name} ({path}) produced unexpected output when attempting to determine the version:",
  "UnknownBaselineFileContent": "unrecognizable baseline entry; expected 'port:triplet=(fail|skip|pass)'",
  "UnknownBinaryProviderType": "unknown binary provider type: valid providers are 'clear', 'default', 'nuget', 'nugetconfig','nugettimeout', 'interactive', 'x-azblob', 'x-gcs', 'x-aws', 'x-aws-config', 'http', and 'files'",
  "UnknownOptions": "Unknown option(s) for command '{command_name}':",
  "UnknownParameterForIntegrate": "Unknown parameter '{value}' for integrate.",
  "UnknownPolicySetting": "Unknown setting for policy '{value}': {option}",
  "UnknownSettingForBuildType": "Unknown setting for VCPKG_BUILD_TYPE {option}. Valid settings are '', 'debug', and 'release'.",
  "UnknownTool": "vcpkg does not have a definition of this tool for this platform.",
  "UnknownTopic": "unknown topic {value}",
  "UnknownVariablesInTemplate": "invalid argument: url template '{value}' contains unknown variables: {list}",
  "UnrecognizedConfigField": "configuration contains the following unrecognized fields:",
  "UnrecognizedIdentifier": "Unrecognized identifer name {value}. Add to override list in triplet file.",
  "UnsupportedFeature": "feature {feature} was passed, but that is not a feature supported by {package_name} supports.",
  "UnsupportedPort": "Port {package_name} is not supported.",
  "UnsupportedPortDependency": "- dependency {value} is not supported.",
  "UnsupportedPortFeature": "{spec} is only supported on '{supports_expression}'",
  "UnsupportedShortOptions": "short options are not supported: '{value}'",
  "UnsupportedSyntaxInCDATA": "]]> is not supported in CDATA block",
  "UnsupportedSystemName": "Could not map VCPKG_CMAKE_SYSTEM_NAME '{system_name}' to a vcvarsall platform. Supported system names are '', 'Windows' and 'WindowsStore'.",
  "UnsupportedToolchain": "in triplet {triplet}: Unable to find a valid toolchain for requested target architecture {arch}.\nThe selected Visual Studio instance is at: {path}\nThe available toolchain combinations are: {list}",
  "UpdateBaselineAddBaselineNoManifest": "the --{option} switch was passed, but there is no manifest file to add a `builtin-baseline` field to.",
  "UpdateBaselineLocalGitError": "git failed to parse HEAD for the local vcpkg registry at \"{path}\"",
  "UpdateBaselineNoConfiguration": "neither `vcpkg.json` nor `vcpkg-configuration.json` exist to update.",
  "UpdateBaselineNoExistingBuiltinBaseline": "the manifest file currently does not contain a `builtin-baseline` field; in order to add one, pass the --{option} switch.",
  "UpdateBaselineNoUpdate": "registry '{url}' not updated: '{value}'",
  "UpdateBaselineRemoteGitError": "git failed to fetch remote repository '{url}'",
  "UpdateBaselineUpdatedBaseline": "updated registry '{url}': baseline '{old_value}' -> '{new_value}'",
  "UpgradeInManifest": "The upgrade command does not currently support manifest mode. Instead, modify your vcpkg.json and run install.",
  "UpgradeRunWithNoDryRun": "If you are sure you want to rebuild the above packages, run this command with the --no-dry-run option.",
  "UploadedBinaries": "Uploaded binaries to {count} {vendor}.",
  "UploadedPackagesToVendor": "Uploaded {count} package(s) to {vendor} in {elapsed}",
  "UploadingBinariesToVendor": "Uploading binaries for '{spec}' to '{vendor}' source \"{path}\".",
  "UploadingBinariesUsingVendor": "Uploading binaries for '{spec}' using '{vendor}' \"{path}\".",
  "UseEnvVar": "-- Using {env_var} in environment variables.",
  "UserWideIntegrationDeleted": "User-wide integration is not installed.",
  "UserWideIntegrationRemoved": "User-wide integration was removed.",
  "UsingCommunityTriplet": "-- Using community triplet {triplet}. This triplet configuration is not guaranteed to succeed.",
  "UsingManifestAt": "Using manifest file at {path}.",
  "Utf8ConversionFailed": "Failed to convert to UTF-8",
  "VSExaminedInstances": "The following Visual Studio instances were considered:",
  "VSExaminedPaths": "The following paths were examined for Visual Studio instances:",
  "VSNoInstances": "Could not locate a complete Visual Studio instance",
  "VcpkgCeIsExperimental": "vcpkg-artifacts are experimental and may change at any time.",
  "VcpkgCommitTableHeader": "VCPKG Commit",
  "VcpkgCompletion": "vcpkg {value} completion is already imported to your \"{path}\" file.\nThe following entries were found:",
  "VcpkgDisallowedClassicMode": "Could not locate a manifest (vcpkg.json) above the current working directory.\nThis vcpkg distribution does not have a classic mode instance.",
  "VcpkgHasCrashed": "vcpkg has crashed. Please create an issue at https://github.com/microsoft/vcpkg containing a brief summary of what you were trying to do and the following information.",
  "VcpkgInVsPrompt": "vcpkg appears to be in a Visual Studio prompt targeting {value} but installing for {triplet}. Consider using --triplet {value}-windows or --triplet {value}-uwp.",
  "VcpkgInvalidCommand": "invalid command: {command_name}",
  "VcpkgRootRequired": "Setting VCPKG_ROOT is required for standalone bootstrap.",
  "VcpkgRootsDir": "Specify the vcpkg root directory.\n(default: '{env_var}')",
  "VcpkgSendMetricsButDisabled": "passed --sendmetrics, but metrics are disabled.",
  "VersionCommandHeader": "vcpkg package management program version {version}\n\nSee LICENSE.txt for license information.",
  "VersionConstraintViolated": "dependency {spec} was expected to be at least version {expected_version}, but is currently {actual_version}.",
  "VersionInvalidDate": "`{version}` is not a valid date version. Dates must follow the format YYYY-MM-DD and disambiguators must be dot-separated positive integer values without leading zeroes.",
  "VersionInvalidRelaxed": "`{version}` is not a valid relaxed version (semver with arbitrary numeric element count).",
  "VersionInvalidSemver": "`{version}` is not a valid semantic version, consult <https://semver.org>.",
  "VersionSpecMismatch": "Failed to load port because versions are inconsistent. The file \"{path}\" contains the version {actual_version}, but the version database indicates that it should be {expected_version}.",
  "VersionTableHeader": "Version",
  "WaitingForChildrenToExit": "Waiting for child processes to exit...",
  "WaitingToTakeFilesystemLock": "waiting to take filesystem lock on {path}...",
  "WarningMessage": "warning: ",
  "WarningMessageMustUsePrintWarning": "The message named {value} starts with warning:, it must be changed to prepend WarningMessage in code instead.",
  "WarningsTreatedAsErrors": "previous warnings being interpreted as errors",
  "WhileLookingForSpec": "while looking for {spec}:",
  "WindowsOnlyCommand": "This command only supports Windows.",
  "WroteNuGetPkgConfInfo": "Wrote NuGet package config information to {path}"
}
