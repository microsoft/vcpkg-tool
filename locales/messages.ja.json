{
  "ABaseline": "ベースライン",
  "ABaselineObject": "ベースライン オブジェクト",
  "ABoolean": "ブール値",
  "ABuiltinRegistry": "ビルトイン レジストリ",
  "AConfigurationObject": "構成オブジェクト",
  "ADateVersionString": "日付バージョン文字列",
  "ADemandObject": "要求オブジェクト",
  "ADependency": "依存関係",
  "ADictionaryOfContacts": "連絡先の辞書",
  "AFeature": "機能",
  "AFilesystemRegistry": "ファイルシステム レジストリ",
  "AGitObjectSha": "Git オブジェクト SHA",
  "AGitReference": "Git 参照 (ブランチなど)",
  "AGitRegistry": "Git レジストリ",
  "AGitRepositoryUrl": "Git リポジトリ URL",
  "AManifest": "マニフェスト",
  "AMaximumOfOneAssetReadUrlCanBeSpecified": "最大 1 つのアセット読み取り URL を指定できます。",
  "AMaximumOfOneAssetWriteUrlCanBeSpecified": "最大 1 つのアセット書き込み URL を指定できます。",
  "ANonNegativeInteger": "負でない整数",
  "APackageName": "パッケージ名",
  "APackagePattern": "パッケージ パターン",
  "APackagePatternArray": "パッケージ パターン配列",
  "APath": "パス",
  "APlatformExpression": "プラットフォーム式",
  "ARegistry": "レジストリ",
  "ARegistryImplementationKind": "レジストリの実装の種類",
  "ARegistryPath": "レジストリ パス",
  "ARegistryPathMustBeDelimitedWithForwardSlashes": "レジストリ パスでは、パスの区切り記号として 1 つのスラッシュを使用する必要があります。",
  "ARegistryPathMustNotHaveDots": "レジストリ パスに 'dot' または 'dot dot' パス要素を含めることはできません。",
  "ARegistryPathMustStartWithDollar": "レジストリ のルートを意図するには、レジストリ パスの先頭を '$' にする必要があります。例: '$/foo/bar'。",
  "ARelaxedVersionString": "緩和されたバージョン文字列",
  "ASemanticVersionString": "セマンティック バージョン文字列",
  "ASetOfFeatures": "機能のセット",
  "AString": "文字列",
  "AStringOrArrayOfStrings": "文字列または文字列の配列",
  "AStringStringDictionary": "\"string\": \"string\" ディクショナリ",
  "AUrl": "URL",
  "AVcpkgRepositoryCommit": "vcpkg リポジトリ コミット",
  "AVersionConstraint": "バージョン制約",
  "AVersionDatabaseEntry": "バージョン データベース エントリ",
  "AVersionObject": "バージョン オブジェクト",
  "AVersionOfAnyType": "任意の種類のバージョン",
  "AddArtifactOnlyOne": "'{command_line}' は一度に 1 つの成果物のみを追加できます。",
  "AddCommandFirstArg": "追加する最初のパラメーターは 'artifact' または 'port' である必要があります。",
  "AddFirstArgument": "「{command_line}」の最初の引数は「artifact」または「port」である必要があります。",
  "AddHelp": "指定されたポートまたは成果物を、現在のディレクトリに関連付けられているマニフェストに追加します。",
  "AddPortRequiresManifest": "'{command_line}' にはアクティブなマニフェスト ファイルが必要です。",
  "AddPortSucceeded": "vcpkg.json ファイルへのポートの追加に成功しました。",
  "AddRecurseOption": "削除する場合は、--recurse オプションを使用してコマンドを実行します。",
  "AddTripletExpressionNotAllowed": "ここではトリプレット式は使用できません。代わりに、「{package_name}:{triplet}」を「{package_name}」に変更することができます。",
  "AddVersionAddedVersionToFile": "バージョン {version} を {path} に追加しました",
  "AddVersionCommitChangesReminder": "変更をコミットしたことを覚えていますか?",
  "AddVersionCommitResultReminder": "結果をコミットすることを忘れないでください。",
  "AddVersionDetectLocalChangesError": "Git 状態出力で予期しない形式が存在するため、ローカルの変更の検出をスキップしています",
  "AddVersionFileNotFound": "必要なファイル {path} が見つかりませんでした",
  "AddVersionFormatPortSuggestion": "'{command_line}' を実行してファイルをフォーマットします",
  "AddVersionIgnoringOptionAll": "ポート名引数が指定されたため、--{option} を無視しています",
  "AddVersionLoadPortFailed": "ポート {package_name} を読み込めません",
  "AddVersionNewFile": "(新しいファイル)",
  "AddVersionNewShaIs": "新しい SHA: {commit_sha}",
  "AddVersionNoFilesUpdated": "更新されたファイルはありません",
  "AddVersionNoFilesUpdatedForPort": "{package_name} のファイルが更新されませんでした",
  "AddVersionNoGitSha": "ポート {package_name} の SHA を取得できません",
  "AddVersionOldShaIs": "古い SHA: {commit_sha}",
  "AddVersionOverwriteOptionSuggestion": "--{option} を使用してこのチェックをバイパスする",
  "AddVersionPortFilesShaChanged": "{package_name} のチェックイン ファイルが変更されましたが、バージョンは更新されませんでした",
  "AddVersionPortFilesShaUnchanged": "{package_name} のチェックイン ファイルはバージョン {version} から変更されていません",
  "AddVersionPortHasImproperFormat": "{package_name} が正しく書式設定されていません",
  "AddVersionSuggestNewVersionScheme": "ポート \"{new_scheme package_name}\" の \"{old_scheme}\" ではなく、バージョン スキーム \"{package_name}\" を使用します。\n--{option} を使用してこのチェックを無効にします。",
  "AddVersionUnableToParseVersionsFile": "バージョン ファイル {path} を解析できません",
  "AddVersionUncommittedChanges": "{package_name} にコミットされていない変更があります",
  "AddVersionUpdateVersionReminder": "バージョンまたはポートのバージョンを更新したことを覚えていますか?",
  "AddVersionUseOptionAll": "引数のない {command_name} では、すべてのポート バージョンを一度に更新するために --{option} を渡す必要があります",
  "AddVersionVersionAlreadyInFile": "バージョン {version} は既に {path} にあります",
  "AddVersionVersionIs": "バージョン: {version}",
  "AddingCompletionEntry": "vcpkg 補完エントリを {path} に追加しています。",
  "AdditionalPackagesToExport": "この操作を完了するには、追加のパッケージ (*) をエクスポートする必要があります。",
  "AdditionalPackagesToRemove": "この操作を完了するには、追加のパッケージ (*) を削除する必要があります。",
  "AllFormatArgsRawArgument": "書式指定文字列 \"{value}\" に未加工の書式引数が含まれています",
  "AllFormatArgsUnbalancedBraces": "書式指定文字列 \"{value}\" の大かっこが対応していません",
  "AllPackagesAreUpdated": "インストールされているすべてのパッケージは、ローカル ポート ファイルで最新の状態です。",
  "AlreadyInstalled": "{spec} は既にインストールされています",
  "AlreadyInstalledNotHead": "{spec} は既にインストールされています -- HEAD からビルドしていません",
  "AmbiguousConfigDeleteConfigFile": "マニフェストと構成ファイルの両方によって提供される vcpkg 構成があいまいです。\n-- 構成ファイル {path} の削除",
  "AnArrayOfDependencies": "依存関係の配列",
  "AnArrayOfDependencyOverrides": "依存関係オーバーライドの配列",
  "AnArrayOfIdentifers": "識別子の配列",
  "AnArrayOfOverlayPaths": "オーバーレイ パスの配列",
  "AnArrayOfOverlayTripletsPaths": "オーバーレイ 3 列パスの配列",
  "AnArrayOfRegistries": "レジストリの配列",
  "AnArrayOfVersions": "バージョンの配列",
  "AnArtifactsGitRegistryUrl": "成果物の Git レジストリ URL",
  "AnArtifactsRegistry": "成果物レジストリ",
  "AnExactVersionString": "正確なバージョン文字列",
  "AnIdentifer": "識別子",
  "AnObjectContainingVcpkgArtifactsMetadata": "vcpkg 成果物メタデータを含むオブジェクト",
  "AnOverlayPath": "オーバーレイ パス",
  "AnOverlayTripletsPath": "3 列パス",
  "AnOverride": "オーバーライド",
  "AnSpdxLicenseExpression": "SPDX ライセンス式",
  "AndroidHomeDirMissingProps": "{env_var} ディレクトリに source.properties がありません: {path}",
  "AnotherInstallationInProgress": "コンピューターで別のインストールが進行中です。再試行する前に 6 をスリープ状態にします。",
  "AppliedUserIntegration": "この vcpkg ルートにユーザー全体の統合を適用しました。",
  "ApplocalProcessing": "vcpkg applocal 処理: {path}",
  "ArtifactsBootstrapFailed": "vckpg-artifacts がインストールされておらず、ブートストラップできませんでした。",
  "ArtifactsNotInstalledReadonlyRoot": "vcpkg-artifacts がインストールされておらず、VCPKG_ROOT が読み取り専用と見なされているためインストールできません。'one liner' を使用して vcpkg を再インストールすればこの問題を解決できる可能性があります。",
  "ArtifactsNotOfficialWarning": "非公式の vcpkg-artifacts を使用しています ",
  "ArtifactsOptionIncompatibility": "--{option} は成果物の検索には影響しません。",
  "AssetCacheProviderAcceptsNoArguments": "予期しない引数: '{value}' は引数を受け付けませんでした",
  "AssetSourcesArg": "資産キャッシュのソースを追加します。'vcpkg help assetcaching' を参照してください。",
  "AttemptingToFetchPackagesFromVendor": "{vendor} から {count} 個のパッケージをフェッチしようとしています",
  "AttemptingToSetBuiltInBaseline": "vcpkg-configuration.json で default-registry をオーバーライドしながら、vcpkg.json で builtin-baseline を設定しようとしています。\nvcpkg-configuration.json の default-registry が使用されます。",
  "AuthenticationMayRequireManualAction": "1 つ以上の {vendor} 資格情報プロバイダーが手動操作を要求しました。対話機能を許可するには、バイナリ ソース 'interactive' を追加します。",
  "AutoSettingEnvVar": "-- \"{env_var}\"環境変数を自動的に \"{url}\"に設定しています。",
  "AutomaticLinkingForMSBuildProjects": "すべての MSBuild C++ プロジェクトで、インストールされているすべてのライブラリの #include を実行できるようになりました。リンクは自動的に処理されます。新しいライブラリをインストールすると、すぐに利用できるようになります。",
  "AutomaticLinkingForVS2017AndLater": "Visual Studio 2017 以降では、インストールされている任意のライブラリを #include できるようになりました。リンクは自動的に処理されます。新しいライブラリをインストールすると、すぐに使用できるようになります。",
  "AvailableArchitectureTriplets": "使用可能なアーキテクチャ トリプレット:",
  "AvailableHelpTopics": "利用可能なヘルプ トピック:",
  "AzUrlAssetCacheRequiresBaseUrl": "予期しない引数: アセット構成 'azurl' にはベース URL が必要です",
  "AzUrlAssetCacheRequiresLessThanFour": "予期しない引数: アセット構成 'azurl' には 4 個未満の引数が必要です",
  "BaselineConflict": "マニフェスト ファイルで vcpkg-configuration.default-registry を指定すると、組み込みのベースラインと競合します。\nこれらの競合する設定のいずれかを削除してください。",
  "BaselineFileNoDefaultField": "コミット {commit_sha} のベースライン ファイルが無効でした (\"default\" フィールドがありません)。",
  "BaselineFileNoDefaultFieldPath": "{path} のベースライン ファイルが無効でした。(\"default\" フィールドがありません)",
  "BaselineGitShowFailed": "コミット '{commit_sha}' からベースラインをチェックアウトしているときに、`git show` versions/baseline.json に失敗しました。これは、'git fetch' を使用してコミットをフェッチすることで修正できる可能性があります。",
  "BaselineMissing": "ベースライン バージョンが見つかりません。以下を実行してください:\nvcpkg x-add-version {package_name}\ngit add versions\ngit commit -m \"Update version database\"\n{version} をベースライン バージョンとして設定します。",
  "BaselineMissingDefault": "リポジトリ {url} のコミット `\"{commit_sha}\"` からの baseline.json が無効でした (\"default\" フィールドが含まれていません)。",
  "BinaryCacheVendorHTTP": "HTTP サーバー",
  "BinarySourcesArg": "バイナリ キャッシュのソースを追加します。'vcpkg help binarycaching' を参照してください。",
  "BinaryWithInvalidArchitecture": "{path}\n 予期された値: {expected} が {actual} でした",
  "BuildAlreadyInstalled": "{spec} は既にインストールされています。ビルドする前に {spec} を削除してください。",
  "BuildDependenciesMissing": "ビルド コマンドには、すべての依存関係が既にインストールされている必要があります。\n次の依存関係がありません:",
  "BuildResultBuildFailed": "BUILD_FAILED",
  "BuildResultCacheMissing": "CACHE_MISSING",
  "BuildResultCascadeDueToMissingDependencies": "CASCADED_DUE_TO_MISSING_DEPENDENCIES",
  "BuildResultDownloaded": "ダウンロード済み",
  "BuildResultExcluded": "除外",
  "BuildResultFileConflicts": "FILE_CONFLICTS",
  "BuildResultPostBuildChecksFailed": "POST_BUILD_CHECKS_FAILED",
  "BuildResultRemoved": "削除済み",
  "BuildResultSucceeded": "成功",
  "BuildResultSummaryHeader": "{triplet} の概要",
  "BuildResultSummaryLine": "{build_result}: {count}",
  "BuildTreesRootDir": "(試験段階) buildtrees ルート ディレクトリを指定します。",
  "BuildTroubleshootingMessage1": "'git pull' と 'vcpkg update' で最新のポート ファイルを使用していることを確認してください。\nその後、次の場所で既知の問題を確認します:",
  "BuildTroubleshootingMessage2": "次の場所で新しい問題を送信できます:",
  "BuildTroubleshootingMessage3": "バグ報告のタイトルに「[{package_name}] ビルド エラー」を含め、バグの説明に次のバージョン情報を含め、関連する失敗ログを上記から添付します。",
  "BuildTroubleshootingMessage4": "問題を報告するときは、{path} の事前に入力されたテンプレートを使用してください。",
  "BuildTroubleshootingMessageGH": "実行して問題を提出することもできます (GitHub cli をインストールする必要があります)。",
  "BuildingFromHead": "HEAD から {spec} をビルドしています...",
  "BuildingPackage": "{spec} をビルドしています...",
  "BuildingPackageFailed": "{spec} のビルドに失敗しました: {build_result}",
  "BuildingPackageFailedDueToMissingDeps": "次の依存関係がないためです。",
  "BuiltInTriplets": "vcpkg 組み込みトリプレット:",
  "BuiltWithIncorrectArchitecture": "次のファイルは、正しくないアーキテクチャ用にビルドされました:",
  "CISettingsExclude": "スキップするポートのコンマ区切りの一覧",
  "CISettingsOptCIBase": "ci.baseline.txt ファイルへのパス。ポートをスキップし、回帰を検出するために使用されます。",
  "CISettingsOptExclude": "スキップするポートのコンマ区切りの一覧",
  "CISettingsOptFailureLogs": "エラー ログのコピー先のディレクトリ",
  "CISettingsOptHostExclude": "ホスト トリプレットのスキップするポートのコンマ区切りの一覧",
  "CISettingsOptOutputHashes": "決定されたすべてのパッケージ ハッシュを出力するファイル",
  "CISettingsOptParentHashes": "変更されたパッケージのセットを減らすために、親 CI 状態のパッケージ ハッシュを読み取るファイル",
  "CISettingsOptSkippedCascadeCount": "--exclude とサポートの数が、この数値と完全に等しい数スキップすることをアサートします",
  "CISettingsOptXUnit": "結果を XUnit 形式で出力するファイル (内部)",
  "CISettingsVerifyGitTree": "各 Git ツリー オブジェクトが宣言されたバージョンと一致することを確認します (これは非常に低速です)",
  "CISettingsVerifyVersion": "エラーだけでなく、各ポートの結果を出力します。",
  "CISkipInstallation": "次のパッケージは既にインストールされており、再度ビルドすることはできません: {list}",
  "CISwitchOptAllowUnexpectedPassing": "「合格、失敗リストから削除 」の結果を出力しないことを示します。",
  "CISwitchOptDryRun": "プランを実行せずに印刷する",
  "CISwitchOptRandomize": "インストール順序をランダム化する",
  "CISwitchOptSkipFailures": "ci.baseline.txt で '=fail' とマークされたポートをスキップする必要があることを示します。",
  "CISwitchOptXUnitAll": "変更されていないポートも XUnit 出力に報告する (内部)",
  "CMakeTargetsUsage": "{package_name} は CMake ターゲットを提供します:",
  "CMakeTargetsUsageHeuristicMessage": "# これはヒューリスティックに生成され、正しくない可能性があります",
  "CMakeToolChainFile": "CMake プロジェクトでは次を使用する必要があります: \"-DCMAKE_TOOLCHAIN_FILE={path}\"",
  "CMakeUsingExportedLibs": "CMake プロジェクトでエクスポートされたライブラリを使用するには、CMake コマンド ラインに {value} を追加します。",
  "CacheHelp": "引数は、検索対象のサブ文字列であるか、またはすべてのキャッシュされたライブラリを表示する no 引数である必要があります。",
  "CheckedOutGitSha": "チェックアウトされた Git SHA: {commit_sha}",
  "CheckedOutObjectMissingManifest": "チェックアウトされたオブジェクトにコントロール ファイルまたは vcpkg.json ファイルが含まれていません。",
  "ChecksFailedCheck": "vcpkg がクラッシュしました。その他の詳細はありません。",
  "ChecksUnreachableCode": "到達できないコードに達しました",
  "ChecksUpdateVcpkg": "bootstrap-vcpkg を再実行して vcpkg を更新すると、このエラーが解決される可能性があります。",
  "CiBaselineAllowUnexpectedPassingRequiresBaseline": "--allow-unexpected-passing は、--ci-baseline を介してベースラインが指定されている場合にのみ使用できます。",
  "CiBaselineDisallowedCascade": "回帰: {spec} がカスケードされましたが、渡す必要があります。({path})。",
  "CiBaselineIndependentRegression": "回帰: 独立した {spec} が {build_result} で失敗しました。",
  "CiBaselineRegression": "回帰: {spec} は {build_result} で失敗しました。必要な場合は、{spec}=fail を {path} に追加します。",
  "CiBaselineRegressionHeader": "回帰:",
  "CiBaselineUnexpectedPass": "成功、失敗リストから削除: {spec} ({path})。",
  "ClearingContents": "{path} の内容をクリアしています",
  "CmakeTargetsExcluded": "注: 追加の {count} 件のターゲットは表示されません。",
  "CmdAddVersionOptAll": "すべてのポートのバージョンを処理します。",
  "CmdAddVersionOptOverwriteVersion": "既存のバージョンの 'git-tree' を上書きします。",
  "CmdAddVersionOptSkipFormatChk": "vcpkg.json ファイルの書式設定チェックをスキップします。",
  "CmdAddVersionOptSkipVersionFormatChk": "バージョン形式の確認をスキップします。",
  "CmdAddVersionOptVerbose": "エラーだけでなく、成功メッセージを出力します。",
  "CmdContactOptSurvey": "現在の vcpkg アンケートに対して既定のブラウザーを起動する",
  "CmdDependInfoFormatConflict": "競合する複数の形式が指定されました。--format、--dgml、--dot はいずれか 1 つだけを使用できます。",
  "CmdDependInfoFormatHelp": "出力形式としては 'list'、'tree'、'mermaid'、'dot'、'dgml' のいずれかを選択してください。",
  "CmdDependInfoFormatInvalid": "--format={value} は形式として認識できません。--format は、'list'、'tree'、'mermaid'、'dot'、'dgml' のいずれかである必要があります。",
  "CmdDependInfoOptDepth": "再帰の深さを 'リスト' 出力に表示します。",
  "CmdDependInfoOptMaxRecurse": "再帰深度の最大値を設定します。既定値は制限なしです。",
  "CmdDependInfoOptSort": "'リスト' 形式の並べ替え順序として、'lexicographical' (辞書順)、'topological' (位相順 - 既定)、'reverse' (逆位相順) のいずれかを選択してください",
  "CmdDependInfoShowDepthFormatMismatch": "--show-depth は、'list' および 'tree' 形式でのみ使用できます。",
  "CmdDependInfoXtreeTree": "--sort=x-tree はツリー以外の形式では使用できません",
  "CmdEditOptAll": "ポートとポート固有の buildtree サブフォルダーにエディターを開く",
  "CmdEditOptBuildTrees": "ポート固有の buildtree サブフォルダーにエディターを開く",
  "CmdEnvOptions": "インストールされている {path} を {env_var} に追加します",
  "CmdExportOpt7Zip": "7zip (.7z) ファイルにエクスポートする",
  "CmdExportOptChocolatey": "Chocolatey パッケージをエクスポートする (試験的な機能)",
  "CmdExportOptDebug": "プレハブデバッグを有効にする",
  "CmdExportOptDryRun": "実際にはエクスポートしないでください。",
  "CmdExportOptIFW": "IFW ベースのインストーラーにエクスポートする",
  "CmdExportOptInstalled": "インストールされているすべてのパッケージをエクスポートする",
  "CmdExportOptMaven": "Maven を有効にする",
  "CmdExportOptNuget": "NuGet パッケージをエクスポートする",
  "CmdExportOptPrefab": "プレハブ形式にエクスポート",
  "CmdExportOptRaw": "圧縮されていないディレクトリにエクスポートする",
  "CmdExportOptZip": "zip ファイルにエクスポートする",
  "CmdExportSettingChocolateyMaint": "エクスポートされた Chocolatey パッケージのメンテナンスツールを指定する (試験的な機能)",
  "CmdExportSettingChocolateyVersion": "エクスポートされた Chocolatey パッケージに追加するバージョン サフィックスを指定します (試験段階の機能)",
  "CmdExportSettingConfigFile": "インストーラー構成の一時ファイル パスを指定する",
  "CmdExportSettingInstallerPath": "エクスポートしたインストーラーのファイル パスを指定します",
  "CmdExportSettingNugetDesc": "エクスポートされた NuGet パッケージの説明を指定する",
  "CmdExportSettingNugetID": "エクスポートされた NuGet パッケージの ID を指定します (オーバーライド --output)",
  "CmdExportSettingNugetVersion": "エクスポートされた NuGet パッケージのバージョンを指定する",
  "CmdExportSettingOutput": "出力名を指定します (ファイル名の作成に使用)",
  "CmdExportSettingOutputDir": "生成された成果物の出力ディレクトリを指定する",
  "CmdExportSettingPkgDir": "再パックされたパッケージの一時ディレクトリ パスを指定します",
  "CmdExportSettingPrefabArtifactID": "成果物 ID は、Maven の仕様に従ったプロジェクトの名前です",
  "CmdExportSettingPrefabGroupID": "GroupId は Maven の仕様に従ってプロジェクトを一意に識別します",
  "CmdExportSettingPrefabVersion": "バージョンは、Maven の仕様に従ったプロジェクトの名前です",
  "CmdExportSettingRepoDir": "エクスポートされたリポジトリのディレクトリ パスを指定します",
  "CmdExportSettingRepoURL": "オンライン インストーラーのリモート リポジトリ URL を指定します",
  "CmdExportSettingSDKMinVersion": "Android でサポートされている SDK の最小バージョン",
  "CmdExportSettingSDKTargetVersion": "Android ターゲット SDK のバージョン",
  "CmdFetchOptXStderrStatus": "stdout ではなく stderr にメッセージを直接ステータス/ダウンロードしています。(エラー/失敗は引き続き stdout に移動します)",
  "CmdFormatManifestOptAll": "すべてのポートのマニフェスト ファイルをフォーマットします。",
  "CmdFormatManifestOptConvertControl": "CONTROL ファイルをマニフェスト ファイルに変換します。",
  "CmdGenerateMessageMapOptNoOutputComments": "メッセージ マップを生成するときは、コメントを除外します (英語のローカライズ ファイルの生成に役立ちます)",
  "CmdInfoOptInstalled": "(試験段階)利用可能ではなくインストール済みパッケージに関するレポート",
  "CmdInfoOptTransitive": "(試験段階)インストールされているパッケージの依存関係についても報告する",
  "CmdNewOptApplication": "アプリケーション マニフェストを作成します (名前やバージョンは必要ありません)。",
  "CmdNewOptSingleFile": "vcpkg-configuration.json を vcpkg.json に埋め込みます。",
  "CmdNewOptVersionDate": "--version を ISO 8601 の日付として解釈します。(YYYY-MM-DD)",
  "CmdNewOptVersionRelaxed": "--version を緩やかな数値バージョンとして解釈します。(負でない数値をドットで区切ります)",
  "CmdNewOptVersionString": "--version を順序付け動作のない文字列として解釈します。",
  "CmdNewSettingName": "新しいマニフェストの名前。",
  "CmdNewSettingVersion": "新しいマニフェストのバージョン。",
  "CmdRegenerateOptDryRun": "は実際にはアクションを実行せず、実行される内容のみを表示します",
  "CmdRegenerateOptForce": "確認せずに (潜在的に危険な) アクションを続行する",
  "CmdRegenerateOptNormalize": "非推奨の修正プログラムを適用する",
  "CmdRemoveOptDryRun": "削除するパッケージを印刷しますが、削除しないでください",
  "CmdRemoveOptOutdated": "ポート ファイルと一致しないバージョンのすべてのパッケージを選択します",
  "CmdRemoveOptRecurse": "コマンド ラインで明示的に指定されていないパッケージの削除を許可する",
  "CmdSetInstalledOptDryRun": "実際にビルドまたはインストールしない",
  "CmdSetInstalledOptNoUsage": "インストール後に CMake の使用状況情報を印刷しないでください。",
  "CmdSetInstalledOptWritePkgConfig": "外部バイナリ キャッシュで使用するために NuGet packages.config 形式のファイルを書き込みます。\n詳細については、「vcpkg help binarycaching」を参照してください。",
  "CmdSettingCopiedFilesLog": "作成するコピーされたファイルのログへのパス",
  "CmdSettingInstalledDir": "使用するインストール済みツリーへのパス",
  "CmdSettingTLogFile": "作成する tlog ファイルへのパス",
  "CmdSettingTargetBin": "分析するバイナリへのパス",
  "CmdUpdateBaselineOptDryRun": "プランを実行せずに印刷する",
  "CmdUpdateBaselineOptInitial": "まだ存在しない vcpkg.json に 'builtin-baseline' を追加する",
  "CmdUpdateRegistryAll": "すべての既知の成果物レジストリを更新する",
  "CmdUpdateRegistryAllExcludesTargets": "update registry --all は、成果物レジストリのリストでは使用できません",
  "CmdUpdateRegistryAllOrTargets": "update registry には、更新する成果物レジストリ名または URI のリスト、または --all のいずれかが必要です。",
  "CmdUpgradeOptAllowUnsupported": "サポートされていないポートでエラーが発生する代わりに、警告を続行します。",
  "CmdUpgradeOptNoDryRun": "実際にアップグレードする",
  "CmdUpgradeOptNoKeepGoing": "失敗時にパッケージのインストールを停止する",
  "CmdXDownloadOptHeader": "URL からフェッチするときに使用する追加のヘッダー",
  "CmdXDownloadOptSha": "ダウンロードするファイルのハッシュ",
  "CmdXDownloadOptSkipSha": "ダウンロードしたファイルの SHA512 を確認しない",
  "CmdXDownloadOptStore": "フェッチする代わりにファイルを格納する必要があることを示します",
  "CmdXDownloadOptUrl": "キャッシュに存在しない場合にダウンロードして保存する URL",
  "CommandFailed": "コマンド: \n{command_line}\nに失敗しました。次の結果が返されました:",
  "Commands": "コマンド:",
  "CommunityTriplets": "VCPKG コミュニティ トリプレット:",
  "ComparingUtf8Decoders": "Utf8Decoders と異なる来歴との比較では、常にエラーが発生します",
  "CompressFolderFailed": "フォルダー \"{path}\":を圧縮できませんでした:",
  "ComputingInstallPlan": "インストール プランを計算しています...",
  "ConfigurationErrorRegistriesWithoutBaseline": "{path} で定義されている構成が無効です。\n\nレジストリを使用するには、既定のレジストリにベースラインが設定されているか、既定のレジストリが null である必要があります。\n\n詳細については、{url} を参照してください。",
  "ConfigurationNestedDemands": "[\"{json_field}\"] に入れ子になった 'demands' オブジェクトが含まれています (入れ子になった 'demands' には効果がありません)",
  "ConflictingFiles": "次のファイルはすでに {path} にインストールされており、{spec} と競合しています",
  "ConstraintViolation": "以下の制約違反が見つかりました。",
  "ContinueCodeUnitInStart": "開始位置で continue コード単位が見つかりました",
  "ControlAndManifestFilesPresent": "マニフェスト ファイルとコントロール ファイルの両方がポート ディレクトリに存在します: {path}",
  "ControlCharacterInString": "文字列内の制御文字",
  "CopyrightIsDir": "`{path}` はディレクトリとして使用されなくなりました。",
  "CorruptedDatabase": "データベースが破損しています。",
  "CorruptedInstallTree": "vcpkg の 'installed' ツリーが破損しています。",
  "CouldNotDeduceNugetIdAndVersion": "ファイル名 {path} から nuget ID とバージョンを推測できませんでした",
  "CouldNotFindBaseline": "ベースライン ファイル {path} に明示的に指定されたベースライン `\"{commit_sha}\"` が見つかりませんでした",
  "CouldNotFindBaselineForRepo": "リポジトリ {package_name} のベースライン `\"{commit_sha}\"` が見つかりませんでした",
  "CouldNotFindBaselineInCommit": "リポジトリ {package_name} からコミット`\"{commit_sha}\"` にベースラインが見つかりませんでした:",
  "CouldNotFindGitTreeAtCommit": "コミット {commit_sha} でリポジトリ {package_name} に `versions` の Git ツリーが見つかりませんでした",
  "CouldNotFindToolVersion": "{path} に <tools version=\"{version}\"> が見つかりませんでした",
  "CouldNotFindVersionDatabaseFile": "バージョン データベース ファイルが見つかりませんでした: {path}",
  "CreateFailureLogsDir": "エラー ログ出力ディレクトリ {path} を作成しています。",
  "CreatedNuGetPackage": "作成された nupkg: {path}",
  "Creating7ZipArchive": "7zip アーカイブを作成しています...",
  "CreatingNugetPackage": "NuGet パッケージを作成しています...",
  "CreatingZipArchive": "zip アーカイブを作成しています...",
  "CreationFailed": "{path} を作成できませんでした。",
  "CurlFailedToExecute": "curl を実行できませんでした。終了コード{exit_code}。",
  "CurlFailedToPut": "curl は終了コード {exit_code} でファイルを {url} に配置できませんでした。",
  "CurlFailedToPutHttp": "curl は終了コード {exit_code} と http コード {value} でファイルを {url} に配置できませんでした。",
  "CurlReportedUnexpectedResults": "curl から vcpkg に対して予期しない結果が報告されました。vcpkg を続行できません。\n次のテキストに機密情報がないか確認して、Microsoft/vcpkg GitHub で問題を作成し解決に役立ててください。\ncmd: {command_line}\n=== curl の出力 ===\n{actual}\n=== curl の出力の終わり ===",
  "CurlReturnedUnexpectedResponseCodes": "curl が要求に対して予期された数と異なる数の応答コードを返しました。予期された {expected}) に対して ({actual}。",
  "CurrentCommitBaseline": "現在のコミットをベースラインとして使用できます。これは次のとおりです。\n\t\"builtin-baseline\": \"{commit_sha}\"",
  "CycleDetectedDuring": "サイクルが {spec} 中に検出されました:",
  "DateTableHeader": "日付",
  "DefaultBinaryCachePlatformCacheRequiresAbsolutePath": "環境変数 VCPKG_DEFAULT_BINARY_CACHE はディレクトリである必要があります (旧: {path})",
  "DefaultBinaryCacheRequiresAbsolutePath": "環境変数 VCPKG_DEFAULT_BINARY_CACHE は絶対変数である必要があります (旧: {path})",
  "DefaultBinaryCacheRequiresDirectory": "環境変数 VCPKG_DEFAULT_BINARY_CACHE はディレクトリである必要があります (旧: {path})",
  "DefaultBrowserLaunched": "既定のブラウザーで {url} が開かれました。",
  "DefaultFlag": "既定で --{option} をオンにしています。",
  "DefaultRegistryIsArtifact": "既定のレジストリを成果物レジストリにすることはできません。",
  "DefaultTriplet": "2023 年 9 月のリリース以降、vcpkg ライブラリのデフォルトのトリプレットは、x86-windows から検出されたホストのトリプレット ({triplet}) に変更されます。このメッセージを解決するには、--triplet x86-windows を追加して、同じ動作を維持します。",
  "DeleteVcpkgConfigFromManifest": "-- または、マニフェスト ファイル {path} から \"vcpkg-configuration\" を削除します。",
  "DeprecatedPrefabDebugOption": "--prefab-debug は現在非推奨です。",
  "DetectCompilerHash": "トリプレット「{triplet}」のコンパイラ ハッシュを検出しています...",
  "DocumentedFieldsSuggestUpdate": "これらのフィールドを認識する必要がある場合は、vcpkg ツールの更新をお試しください。",
  "DownloadAvailable": "このツールのダウンロード可能なコピーを使用でき、{env_var} の設定を解除すると使用できます。",
  "DownloadFailedCurl": "{url}: curl は終了コード {exit_code} でダウンロードできませんでした",
  "DownloadFailedHashMismatch": "ファイルに必要なハッシュがありません:\nurl: {url}\nファイル: {path}\n必要なハッシュ: {expected}実際の\nハッシュ: {actual}",
  "DownloadFailedRetrying": "ダウンロードに失敗しました -- {value}ミリ秒後に再試行しています",
  "DownloadFailedStatusCode": "{url}: 失敗しました: 状態コード {value}",
  "DownloadRootsDir": "ダウンロード ルート ディレクトリを指定します。\n(既定値: {env_var})",
  "DownloadWinHttpError": "{url}: {system_api} が終了コード {exit_code} で失敗しました",
  "DownloadedSources": "{spec} 用にダウンロードされたソース",
  "DownloadingPortableToolVersionX": "{tool_name} の適切なバージョンが見つかりませんでした (v{version} が必要です) ポータブル {tool_name} {version} をダウンロードしています...",
  "DownloadingTool": "{tool_name} をダウンロードしています...\n{url}->{path}",
  "DownloadingUrl": "{url} をダウンロードしています",
  "DownloadingVcpkgStandaloneBundle": "スタンドアロン バンドル {version} をダウンロードしています。",
  "DownloadingVcpkgStandaloneBundleLatest": "最新のスタンドアロン バンドルをダウンロードしています。",
  "DuplicatePackagePattern": "パッケージ \"{package_name}\" が重複しています。",
  "DuplicatePackagePatternFirstOcurrence": "最初の宣言:",
  "DuplicatePackagePatternIgnoredLocations": "次の再宣言は無視されます:",
  "DuplicatePackagePatternLocation": "場所: {path}",
  "DuplicatePackagePatternRegistry": "レジストリ: {url}",
  "DuplicatedKeyInObj": "オブジェクト内の重複するキー \"{value}\"",
  "ElapsedForPackage": "{spec} の処理の経過時間: {elapsed}",
  "ElapsedInstallTime": "経過した総時間: {count}",
  "ElapsedTimeForChecks": "成功/失敗を判断する時間: {elapsed}",
  "EmailVcpkgTeam": "フィードバックは {url} にメールでお送りください。",
  "EmbeddingVcpkgConfigInManifest": "マニフェスト ファイルへの `vcpkg-configuration` の埋め込みは実験的な機能です。",
  "EmptyLicenseExpression": "SPDX ライセンス式が空でした。",
  "EndOfStringInCodeUnit": "コード ポイントの中央で文字列の終端が見つかりました",
  "EnvInvalidMaxConcurrency": "{env_var} は {value}であり、> 0 にする必要があります",
  "EnvPlatformNotSupported": "ビルド環境コマンドは、このプラットフォームではサポートされていません",
  "EnvStrFailedToExtract": "次の環境文字列を展開できませんでした:",
  "EnvVarMustBeAbsolutePath": "{env_var} ({path}) は絶対パスではありませんでした",
  "ErrorDetectingCompilerInfo": "コンパイラ情報の検出中:\n\"{path}\"のログ ファイルの内容は次のとおりです:",
  "ErrorIndividualPackagesUnsupported": "マニフェスト モードでは、「vcpkg install」は個々のパッケージ引数をサポートしていません。\n追加のパッケージをインストールするには、vcpkg.json を編集し、パッケージ引数を指定せずに「vcpkg install」を実行してください。",
  "ErrorInvalidClassicModeOption": "オプション --{option}はクラシック モードではサポートされていません。マニフェストが見つかりませんでした。",
  "ErrorInvalidManifestModeOption": "オプション --{option}はマニフェスト モードではサポートされていません。",
  "ErrorMessage": "エラー: ",
  "ErrorMessageMustUsePrintError": "{value}という名前のメッセージは「error:」で始まります。代わりに、コードの先頭に「ErrorMessage」を追加するように変更する必要があります。",
  "ErrorMissingVcpkgRoot": "vcpkg-root を検出できませんでした。作成した vcpkg のコピーを使用する場合は、VCPKG_ROOT 環境変数を定義して、https://github.com/Microsoft/vcpkg の複製されたコピーを指すようにする必要があります。",
  "ErrorNoVSInstance": "トリプレット内 {triplet}: 有効な Visual Studio インスタンスが見つかりません",
  "ErrorNoVSInstanceAt": "「{path}」で",
  "ErrorNoVSInstanceFullVersion": "ツールセットのバージョン プレフィックス {version} で",
  "ErrorNoVSInstanceVersion": "ツールセット バージョン {version} で",
  "ErrorParsingBinaryParagraph": "{spec} のバイナリ段落の解析中",
  "ErrorRequireBaseline": "この vcpkg インスタンスでは、ポートと対話するために指定されたベースラインを持つマニフェストが必要です。マニフェストに「builtin-baseline」を追加するか、既定のレジストリを再定義する「vcpkg-configuration.json」を追加してください。",
  "ErrorRequirePackagesList": "「vcpkg install」には、クラシック モードでインストールするパッケージのリストが必要です。",
  "ErrorUnableToDetectCompilerInfo": "vcpkg はアクティブなコンパイラの情報を検出できませんでした。CMake エラーの出力については、上記を参照してください。",
  "ErrorVcvarsUnsupported": "トリプレット内 {triplet}: Visual Studio の開発者プロンプトの使用は、Windows 以外のホストではサポートされていません。\nトリプレット ファイルに「VCPKG_CMAKE_SYSTEM_NAME」または「VCPKG_CHAINLOAD_TOOLCHAIN_FILE」を定義してください。",
  "ErrorVsCodeNotFound": "Visual Studio Code が見つかりませんでした。環境変数「{env_var}」が設定されていないか、設定された値が無効です。",
  "ErrorVsCodeNotFoundPathExamined": "次のパスが調査されました:",
  "ErrorWhileFetchingBaseline": "リポジトリ {package_name} からベースライン `\"{value}\"` をフェッチ中:",
  "ErrorWhileParsing": "{path} の解析中にエラーが発生しました。",
  "ErrorWhileWriting": "{path} の書き込み中にエラーが発生しました。",
  "ErrorsFound": "次のエラーが見つかりました:",
  "Example": "例:",
  "ExceededRecursionDepth": "再帰深度を超過しました。",
  "ExcludedPackage": "{spec} を除外しました",
  "ExcludedPackages": "次のパッケージは除外されています。",
  "ExpectedAnObject": "オブジェクトが必要です",
  "ExpectedAtMostOneSetOfTags": "{old_value} の {count} セットが見つかりました。*{new_value} ですが、block:\n{value} でほぼ 1 が予測されます",
  "ExpectedCharacterHere": "ここには '{expected}' が必要です",
  "ExpectedDefaultFeaturesList": "既定の機能の一覧に ',' またはテキストの終わりが必要です",
  "ExpectedDependenciesList": "依存関係リストに ',' またはテキストの終わりが必要です",
  "ExpectedDigitsAfterDecimal": "小数点以下の桁数が必要です",
  "ExpectedEof": "eof が必要です",
  "ExpectedExplicitTriplet": "明示的なトリプレットが必要です",
  "ExpectedFailOrSkip": "'fail'、'skip'、または 'pass' が必要です",
  "ExpectedFeatureListTerminal": "機能リストには ',' または ']' が必要です",
  "ExpectedFeatureName": "機能名が必要です (使用可能: 小文字、数字、'-')",
  "ExpectedOneSetOfTags": "{old_value} の {count} セットが見つかりました。*{new_value} ですが、block:\n{value} で正確には 1 が予測されます",
  "ExpectedOneVersioningField": "バージョン管理フィールドが 1 つだけ必要でした",
  "ExpectedPackageSpecifier": "パッケージ指定子が必要です",
  "ExpectedPathToExist": "フェッチ後に {path} が存在する必要があります",
  "ExpectedPortName": "ここにはポート名が必要です (使用可能: 小文字、数字、'-')",
  "ExpectedReadWriteReadWrite": "予期しない引数: 'read'、'readwrite'、または 'write' が必要です",
  "ExpectedStatusField": "ステータス段落に 'status' フィールドが必要です",
  "ExpectedTripletName": "ここにはトリプレット名が必要です (使用可能: 小文字、数字、'-')",
  "ExportArchitectureReq": "エクスポートの prefab を使用するには、arm64-v8a、armeabi-v7a、x86_64、x86 のいずれかのアーキテクチャが存在する必要があります。",
  "ExportPrefabRequiresAndroidTriplet": "エクスポートの prefab には Android トリプレットが必要です。",
  "ExportUnsupportedInManifest": "vcpkg のエクスポートは、将来の設計上の考慮事項を考慮するためにマニフェスト モードをサポートしていません。マニフェスト ベースのプロジェクトの外部で vcpkg を実行すると、クラシック モードでエクスポートを使用できます。",
  "Exported7zipArchive": "7zip アーカイブのエクスポートされた場所: {path}",
  "ExportedZipArchive": "zip アーカイブのエクスポートされた場所: {path}",
  "ExportingAlreadyBuiltPackages": "次のパッケージは既にビルドされており、エクスポートされます:",
  "ExportingMaintenanceTool": "メンテナンス ツールをエクスポートしています...",
  "ExportingPackage": "{package_name} のエクスポート...",
  "ExtendedDocumentationAtUrl": "'{url}' で利用できる拡張ドキュメント。",
  "ExtractingTool": "{tool_name} を抽出しています...",
  "FailedPostBuildChecks": "{count} 個のビルド後チェックの問題が見つかりました。これらのポートをキュレーションされたカタログに送信するには、まず portfile を修正してください: {path}",
  "FailedToAcquireMutant": "ミュータント {path} を取得できませんでした",
  "FailedToCheckoutRepo": "リポジトリ {package_name} から `versions` をチェックアウトできませんでした",
  "FailedToDeleteDueToFile": "{path} が原因で、remove_all({value}) できませんでした: ",
  "FailedToDeleteInsideDueToFile": "{path} が原因で、 remove_all_inside({value}) できませんでした: ",
  "FailedToDetermineArchitecture": "{path} のアーキテクチャを特定できません。\n{command_line}",
  "FailedToDetermineCurrentCommit": "現在のコミットを特定できませんでした:",
  "FailedToDownloadFromMirrorSet": "ミラー セットからダウンロードできませんでした",
  "FailedToExtract": "\"{path}\" を抽出できませんでした:",
  "FailedToFetchError": "{error_msg}\n {package_name} をフェッチできませんでした:",
  "FailedToFindBaseline": "baseline.json が見つかりませんでした",
  "FailedToFindPortFeature": "{package_name} には {feature} という名前の機能がありません。",
  "FailedToFormatMissingFile": "書式設定するファイルがありません。\n--all または明示的なファイルを渡して、書式設定または変換してください。",
  "FailedToLoadInstalledManifest": "次のエラーのため、{package_name} の制御ファイルまたはマニフェスト ファイルを読み込めませんでした。{package_name} を削除してから、もう一度お試しください。",
  "FailedToLoadManifest": "ディレクトリ {path} からマニフェストを読み込めませんでした",
  "FailedToLoadPort": "{path} からポート {package_name} を読み込めませんでした",
  "FailedToLoadPortFrom": "{path} からポートを読み込めませんでした",
  "FailedToLoadUnnamedPortFromPath": "{path} からポートを読み込めませんでした",
  "FailedToLocateSpec": "グラフで以下の仕様の検索に失敗しました: {spec}",
  "FailedToObtainDependencyVersion": "目的の依存関係のバージョンが見つかりません。",
  "FailedToObtainLocalPortGitSha": "ローカル ポートの Git SAS を取得できませんでした。",
  "FailedToObtainPackageVersion": "目的のパッケージ バージョンが見つかりません。",
  "FailedToOpenAlgorithm": "{value} を開けませんでした",
  "FailedToParseBaseline": "ベースラインを解析できませんでした: {path}",
  "FailedToParseCMakeConsoleOut": "CMake コンソール出力を解析してブロックの開始/終了マーカーを見つけることができませんでした。",
  "FailedToParseConfig": "構成を解析できませんでした: {path}",
  "FailedToParseControl": "コントロール ファイルを解析できませんでした: {path}",
  "FailedToParseManifest": "マニフェスト ファイルを解析できませんでした: {path}",
  "FailedToParseNoTopLevelObj": "{path} を解析できませんでした。最上位のオブジェクトが必要です。",
  "FailedToParseNoVersionsArray": "{path} を解析できませんでした。'versions' 配列が必要です。",
  "FailedToParseSerializedBinParagraph": "[サニティ チェック] シリアル化されたバイナリ段落を解析できませんでした。\nhttps://github.com/microsoft/vcpkg でイシューを開き、次の出力を含めてください。\n{error_msg}\nシリアル化されたバイナリ段落:",
  "FailedToParseVersionXML": "ツール {tool_name} のバージョンを解析できませんでした。バージョン文字列: {version}",
  "FailedToParseVersionsFile": "バージョン ファイル {path} を解析できませんでした",
  "FailedToProvisionCe": "vcpkg 成果物をプロビジョニングできませんでした。",
  "FailedToReadParagraph": "{path} から段落を読み取ることができませんでした",
  "FailedToRemoveControl": "コントロール ファイル {path} を削除できませんでした",
  "FailedToRunToolToDetermineVersion": "\"{path}\" を実行して {tool_name} バージョンを特定できませんでした。",
  "FailedToStoreBackToMirror": "ミラーに保存できませんでした:",
  "FailedToStoreBinaryCache": "バイナリ キャッシュ {path} を格納できませんでした",
  "FailedToTakeFileSystemLock": "{path} でファイル システム ロックを取得できませんでした",
  "FailedToWriteManifest": "マニフェスト ファイル {path} を書き込めませんでした",
  "FailedVendorAuthentication": "1 つ以上の {vendor} 資格情報プロバイダーを認証できませんでした。資格情報を提供する方法の詳細については、'{url}' を参照してください。",
  "FeedbackAppreciated": "フィードバックをお送りいただきありがとうございました。",
  "FetchingBaselineInfo": "{package_name} からベースライン情報をフェッチしています...",
  "FetchingRegistryInfo": "{url} ({value}) からレジストリ情報をフェッチしています...",
  "FieldKindDidNotHaveExpectedValue": "\"kind\" に必要な値がありませんでした: (次のいずれかが必要です: {expected}; {actual} が見つかりました)",
  "FileNotFound": "{path}: ファイルが見つかりません",
  "FileReadFailed": "オフセット {byte_offset} の {path} から {count} バイトを読み取れませんでした。",
  "FileSeekFailed": "{path}内の位置{byte_offset}を検索できませんでした。",
  "FileSystemOperationFailed": "ファイル システム操作に失敗しました:",
  "FilesContainAbsolutePath1": "インストールされているパッケージには、次のような絶対パスを指定しないでください:",
  "FilesContainAbsolutePath2": "次のファイルに絶対パスが見つかりました:",
  "FilesExported": "エクスポートされたファイルの場所: {path}",
  "FindHelp": "指定された成果物またはポートを検索します。'artifact' または 'port' の後にパラメーターがない場合は、すべてを表示します。",
  "FishCompletion": "vcpkg fish 補完は既に \"{path}\" に追加されています。",
  "FloatingPointConstTooBig": "浮動小数点定数が大きすぎます: {count}",
  "FollowingPackagesMissingControl": "次のパッケージには有効な CONTROL または vcpkg.json がありません:",
  "FollowingPackagesNotInstalled": "次のパッケージはインストールされていません:",
  "FollowingPackagesUpgraded": "次のパッケージは最新です:",
  "ForceSystemBinariesOnWeirdPlatforms": "arm、s390x、ppc64le、riscv プラットフォームでは、環境変数 VCPKG_FORCE_SYSTEM_BINARIES を設定する必要があります。",
  "FormattedParseMessageExpression": "式: {value}",
  "GHAParametersMissing": "GHA バイナリ ソースでは、ACTIONS_RUNTIME_TOKEN環境変数とACTIONS_CACHE_URL環境変数を設定する必要があります。詳細については、{url} を参照してください。",
  "GenerateMsgErrorParsingFormatArgs": "{value} の書式指定文字列を解析しています:",
  "GenerateMsgIncorrectComment": "メッセージ {value} のコメントが正しくありません:",
  "GenerateMsgNoArgumentValue": "コメントで指定されている{{{value}}}がメッセージ内にありません。",
  "GenerateMsgNoCommentValue": "{{{value}}} がメッセージ内で使用されていますが、コメントに含まれていません。",
  "GeneratedConfiguration": "構成 {path} を生成しました。",
  "GeneratedInstaller": "{path} インストーラーが生成されました。",
  "GeneratingConfiguration": "構成 {path} を生成しています...",
  "GeneratingInstaller": "インストーラー {path} を生成しています...",
  "GeneratingRepo": "リポジトリ {path} を生成しています...",
  "GetParseFailureInfo": "'--debug' を使用して、解析エラーに関する詳細情報を取得します。",
  "GitCommandFailed": "{command_line} を実行できませんでした",
  "GitFailedToFetch": "リポジトリ {url} から参照 {value} をフェッチできませんでした",
  "GitFailedToInitializeLocalRepository": "ローカル リポジトリ {path} を初期化できませんでした",
  "GitRegistryMustHaveBaseline": "\"{package_name}\" の Git レジストリ エントリには、有効な Git コミット SHA (40 文字の 16 進数) である \"ベースライン\" フィールドが必要です。\nそのリポジトリの現在の HEAD は\"{value}\" です。",
  "GitStatusOutputExpectedFileName": "ファイル名が必要です",
  "GitStatusOutputExpectedNewLine": "改行が必要です",
  "GitStatusOutputExpectedRenameOrNewline": "名前が変更されたファイルまたは改行が必要です",
  "GitStatusUnknownFileStatus": "不明なファイルの状態: {value}",
  "GitUnexpectedCommandOutputCmd": "Git が {command_line} の実行中に予期しない出力を生成しました",
  "GraphCycleDetected": "{package_name} のグラフ内で循環が検出されました:",
  "HashFileFailureToRead": "ハッシュのためにファイル \"{path}\" を読み取れませんでした: ",
  "HeaderOnlyUsage": "{package_name} はヘッダーのみであり、CMake から次の方法で使用できます:",
  "HelpAssetCaching": "**実験的な機能: これはいつでも変更または削除される可能性があります**\n\nvcpkg はミラーを使用してダウンロードしたアセットをキャッシュし、元のソースが変更または消失した場合でも操作を継続できるようにします。\n\n資産キャッシュは、環境変数 X_VCPKG_ASSET_SOURCES をセミコロンで区切られたソースのリストに設定するか、一連の --x-asset-sources=<source> コマンド ライン オプションを渡すことによって構成できます。コマンド ライン ソースは、環境ソースの後に解釈されます。コンマ、セミコロン、およびバックティックは、バックティック (`) を使用してエスケープできます。\n\n特定の文字列の <rw> オプション パラメーターは、それらへのアクセス方法を制御します。\"read\"、\"write\"、または \"readwrite\" として指定でき、既定値は \"read\" です。\n\n有効なソース:",
  "HelpAssetCachingAzUrl": "オプションで Shared Access Signature 検証を使用して、Azure Blob Storage ソースを追加します。URL にはコンテナー パスを含め、末尾の \"/\" で終了する必要があります。<sas> が定義されている場合は、\"?\" をプレフィックスとして付ける必要があります。Azure 以外のサーバーも、\"<url><sha512><sas>\" の形式の GET および PUT 要求に応答する場合に機能します。",
  "HelpAssetCachingBlockOrigin": "ミラーに使用可能なファイルがない場合に備えて、元の URL へのフォールバックを無効にします。",
  "HelpAssetCachingScript": "資産をフェッチするために外部ツールにディスパッチします。テンプレート内で、\"{{url}}\" は元の URL に置き換えられ、\"{{sha512}}\" は SHA512 値に置き換えられ、\"{{dst}}\" は保存先の出力パスに置き換えられます。これらの置換はすべて適切にシェル エスケープされるため、テンプレートの例は次のようになります: \"curl -L {{url}} --output {{dst}}\"。拡張を避けるために、\"{{{{\" は \"}}\" に置き換えられ、\"}}}}\" は \"}}\" に置き換えられます。これはビルド環境内で実行されるため、PATH およびその他の環境変数はトリプレットによって変更されることに注意してください。",
  "HelpBinaryCaching": "vcpkg は、コンパイルされたパッケージをキャッシュして、単一のマシンまたはネットワーク全体での復元を高速化できます。既定では、vcpkg はローカル マシンのキャッシュにビルドを保存します。これは、コマンド ラインの最後のオプションとして \"--binarysource=clear\" を渡すことで無効にできます。\n\nバイナリ キャッシュは、すべてのコマンド ラインに \"--binarysource=<source>\" オプションを渡すか、`VCPKG_BINARY_SOURCES` 環境変数を一連のソースに設定することで、さらに構成できます (例: \"<source>;<source>;...\")。コマンド ライン ソースは、環境ソースの後に解釈されます。\n\n特定の文字列の \"<rw>\" オプション パラメーターは、バイナリをダウンロードする際に参照するかどうか、およびオンデマンド ビルドをそのリモートにアップロードするかどうかを制御します。\"read\"、\"write\" または \"readwrite\" として指定できます。\n\n一般的なソース:",
  "HelpBinaryCachingAws": "**実験的: 警告なしに変更または削除されます**\nAWS S3 ソースを追加します。アップロードとダウンロードに aws CLI を使用します。プレフィックスには s3:// スキームを含め、\"/\" をサフィックスとして付ける必要があります。",
  "HelpBinaryCachingAwsConfig": "**実験的: 警告なしに変更または削除されます**\nAWS S3 ソースを追加します。AWS 構成を追加します。現在、AWS CLI の --no-sign-request パラメーターに相当する 'no-sign-request' パラメーターのみをサポートしています。",
  "HelpBinaryCachingAwsHeader": "Azure Web サービス ソース",
  "HelpBinaryCachingAzBlob": "**実験的: 警告なしに変更または削除されます**\nAzure Blob Storage ソースを追加します。Shared Access Signature 検証を使用します。<url> にはコンテナー パスを含める必要があります。<sas> には \"?\" を前に付ける必要があります。",
  "HelpBinaryCachingCos": "**実験的: 警告なしに変更または削除されます**\nCOS ソースを追加します。アップロードとダウンロードに cos CLI を使用します。<prefix> にはスキーム 'cos://' を含め、\"/\" のサフィックスを付ける必要があります。",
  "HelpBinaryCachingDefaults": "既定のファイルベースの場所を追加します。システム設定に基づいて、バイナリを格納するための既定のパスは “{path}” です。これは、Windows では %LOCALAPPDATA%/%APPDATA% を参照し、他のプラットフォームでは $XDG_CACHE_HOME または $HOME を参照します。",
  "HelpBinaryCachingDefaultsError": "既定のファイルベースの場所を追加します。",
  "HelpBinaryCachingFiles": "カスタム ファイル ベースの場所を追加します。",
  "HelpBinaryCachingGcs": "**実験的: 警告なしに変更または削除されます**\nGoogle Cloud Storage (GCS) ソースを追加します。アップロードとダウンロードに gsutil CLI を使用します。プレフィックスには gs:// スキームを含め、\"/\" をサフィックスとして付ける必要があります。",
  "HelpBinaryCachingHttp": "カスタム HTTP ベースの場所を追加します。バイナリをダウンロード、確認、アップロードするために、GET、HEAD、PUT 要求が実行されます。変数 {{name}}、{{version}}、{{sha}}、および {{triplet}} を使用できます。URL の例は、'https://cache.example.com/{{triplet}}/{{name}}/{{version}}/{{sha}}' になります。ヘッダー フィールドを介して、認証トークンを渡すカスタム ヘッダーを設定できます。",
  "HelpBinaryCachingNuGet": "NuGet ベースのソースを追加します。NuGet CLI の \"-Source\" パラメーターに相当します。",
  "HelpBinaryCachingNuGetConfig": "NuGet 構成ファイル ベースのソースを追加します。NuGet CLI の \"-Config\" パラメーターに相当します。この構成では、アップロード用に \"defaultPushSource\" を指定する必要があります。",
  "HelpBinaryCachingNuGetFooter": "NuGet のキャッシュは既定では使用されません。すべての NuGet ベースのソースで使用するには、環境変数 \"VCPKG_USE_NUGET_CACHE\" を \"true\" (大文字と小文字を区別しない) または \"1\" に設定します。\n\"nuget\" および \"nugetconfig\" ソース プロバイダーは、NuGet パッケージの生成中に特定の環境変数を尊重します。適切な環境変数が定義されていて空でない場合、次の例のいずれかのように \"metadata.repository\" フィールドが生成されます。",
  "HelpBinaryCachingNuGetHeader": "NuGet ソース",
  "HelpBinaryCachingNuGetInteractive": "NuGet の対話型資格情報管理を有効にします。NuGet CLI の \"-NonInteractive\" パラメーターの反対です。",
  "HelpBinaryCachingNuGetTimeout": "NuGet ネットワーク操作の NuGet タイムアウトを指定します。NuGet CLI の \"-Timeout\" パラメーターに相当します。",
  "HelpBuiltinBase": "ベースラインでは、グラフ内のすべての依存関係で最小バージョンを確立する vcpkg リポジトリ内のコミットを参照しています。たとえば、(直接または推移的に) 指定された他の制約がない場合、バージョンは最上位レベルのマニフェストのベースラインに解決されます。推移的な依存関係のベースラインは無視されます。",
  "HelpCachingClear": "既定を含め、以前のすべてのソースを削除します。",
  "HelpContactCommand": "フィードバックを送信するための連絡先情報を表示します。",
  "HelpCreateCommand": "新しいポートを作成します。",
  "HelpDependInfoCommand": "ポートの依存関係の一覧を表示します。",
  "HelpEditCommand": "編集用のポートを開きます (エディター プログラムを設定するには、環境変数 '{env_var}' を使用します。既定値は 'code' です)。",
  "HelpEnvCommand": "開発またはコンパイル用にクリーンなシェル環境を作成します。",
  "HelpExampleCommand": "ヘルプ (例を含む) については、付属の README.md とドキュメント フォルダーを参照してください。",
  "HelpExampleManifest": "マニフェストの例:",
  "HelpExportCommand": "パッケージをエクスポートします。",
  "HelpFormatManifestCommand": "すべての vcpkg.json ファイルをフォーマットします。vcpkg にコミットする前にこれを実行します。",
  "HelpHashCommand": "特定のアルゴリズム (既定の SHA512) でファイルをハッシュします。",
  "HelpInitializeRegistryCommand": "ディレクトリ <path> 内のレジストリを初期化します。",
  "HelpInstallCommand": "パッケージをインストールします。",
  "HelpListCommand": "インストールされているパッケージを一覧表示します。",
  "HelpManifestConstraints": "マニフェストでは、使用中のバージョンに 3 種類の制約を配置できます",
  "HelpMinVersion": "Vcpkg は、最上位レベルで指定されたベースラインのバージョンやグラフ内の \"version>=\" 制約など、適用可能なすべての制約との一致を検出する最小バージョンを選択します。",
  "HelpOverrides": "最上位レベルのマニフェストとして使用する場合 (ディレクトリで 'vcpkg install' を実行している場合など)、オーバーライドを使用すると、マニフェストは依存関係の解決をショートし、使用するバージョンを正確に指定できます。これらは、'version-string' 依存関係など、バージョンの競合の処理に使用できます。推移的に依存している場合は考慮されません。",
  "HelpOwnsCommand": "インストールされているパッケージ内のファイルを検索します。",
  "HelpPackagePublisher": "また、パッケージ パブリッシャーは \"version>=\" 制約を使用して、コンシューマーが付与された依存関係の少なくとも特定の最小バージョンを使用していることを確認できます。たとえば、ライブラリが 1.70 で boost-asio に API を追加する必要がある場合、\"version>=\" 制約を使用すると、推移ユーザーは、個々のバージョンのオーバーライドやレジストリ間の参照が発生した場合でも、十分なバージョンを使用できます。",
  "HelpPortVersionScheme": "また、各バージョンには、負でない整数である \"port-version\" があります。テキストとしてレンダリングされる場合、ポート バージョン (ゼロ以外の場合) は、ハッシュ (#) で区切られたプライマリ バージョン テキストにサフィックスとして追加されます。Port-version は、プライマリ バージョン テキストの後に辞書で並べ替えられます。例: \n1.0.0 < 1.0.0#1 < 1.0.1 < 1.0.1#5 < 2.0.0",
  "HelpRemoveCommand": "パッケージをアンインストールします。",
  "HelpRemoveOutdatedCommand": "期限切れのパッケージをすべてアンインストールします。",
  "HelpResponseFileCommand": "応答ファイルを指定して、追加のパラメーターを指定します。",
  "HelpSearchCommand": "ビルド可能なパッケージを検索します。",
  "HelpTextOptFullDesc": "長いテキストは切り捨てないでください。",
  "HelpTopicCommand": "特定のトピックのヘルプを表示します。",
  "HelpTopicsCommand": "ヘルプ トピックの一覧を表示します。",
  "HelpTxtOptAllowUnsupportedPort": "サポートされていないポートでエラーが発生する代わりに、警告を続行します。",
  "HelpTxtOptCleanAfterBuild": "各パッケージをビルドした後、ビルドツリー、パッケージ、ダウンロードをクリーンアップします。",
  "HelpTxtOptCleanBuildTreesAfterBuild": "各パッケージのビルド後にビルドツリーをクリーンアップします。",
  "HelpTxtOptCleanDownloadsAfterBuild": "各パッケージをビルドした後、ダウンロードをクリーンします。",
  "HelpTxtOptCleanPkgAfterBuild": "各パッケージのビルド後にパッケージをクリーンアップします。",
  "HelpTxtOptDryRun": "実際にはビルドまたはインストールしないでください。",
  "HelpTxtOptEditable": "コマンド ライン (クラシック モード) でライブラリのソース再抽出とバイナリ キャッシュを無効にする",
  "HelpTxtOptEnforcePortChecks": "ポートで問題が検出された場合、または非推奨の機能を使用しようとした場合にインストールに失敗する",
  "HelpTxtOptKeepGoing": "エラー発生時にパッケージのインストールを続行します。",
  "HelpTxtOptManifestFeature": "インストールする最上位マニフェストの追加機能 (マニフェスト モード)。",
  "HelpTxtOptManifestNoDefault": "最上位のマニフェスト (マニフェスト モード) から既定の機能をインストールしないでください。",
  "HelpTxtOptNoDownloads": "新しいソースをダウンロードしないでください。",
  "HelpTxtOptNoUsage": "インストール後に CMake の使用状況情報を印刷しないでください。",
  "HelpTxtOptOnlyBinCache": "キャッシュされたバイナリが使用できない場合は失敗します。",
  "HelpTxtOptOnlyDownloads": "ビルドせずにソースをダウンロードするよう最善を尽くしてください。",
  "HelpTxtOptRecurse": "インストールの一部としてパッケージの削除を許可します。",
  "HelpTxtOptUseAria2": "aria2 を使用してダウンロード タスクを実行します。",
  "HelpTxtOptUseHeadVersion": "最新のアップストリーム ソース (クラシック モード) を使用して、コマンド ラインにライブラリをインストールします。",
  "HelpTxtOptWritePkgConfig": "外部バイナリ キャッシュで使用するために NuGet packages.config 形式のファイルを書き込みます。\n詳細については、「vcpkg help binarycaching」を参照してください。",
  "HelpUpdateBaseline": "ライブラリを最新の状態に保つ最善の方法は、ベースライン参照を更新することです。これにより、推移的なパッケージを含むすべてのパッケージが更新されます。ただし、パッケージを個別に更新する必要がある場合は、\"version>=\" 制約を使用できます。",
  "HelpUpdateCommand": "更新できるパッケージを一覧表示します。",
  "HelpUpgradeCommand": "古いパッケージをすべてリビルドします。",
  "HelpVersionCommand": "バージョン情報を表示します。",
  "HelpVersionDateScheme": "日付 (2021-01-01.5)",
  "HelpVersionGreater": "[依存関係] フィールド内では、各依存関係に最小の制約を一覧表示させることができます。これらの最小の制約は、このライブラリに応じて推移的に使用されます。最小 port-version は、さらに '#' サフィックスと共に指定できます。",
  "HelpVersionScheme": "数字のドット区切りのシーケンス (1.2.3.4)",
  "HelpVersionSchemes": "次のバージョン管理スキームが承認されます。",
  "HelpVersionSemverScheme": "セマンティック バージョン 2.0 (2.1.0-rc2)",
  "HelpVersionStringScheme": "厳密で互換性のないバージョン (Vista)",
  "HelpVersioning": "バージョン管理を使用すると、マニフェスト ファイル内からプロジェクトによって使用される依存関係の正確なリビジョンを明確に制御できます。",
  "IgnoringVcpkgRootEnvironment": "vcpkg {value} は検出された vcpkg ルート {actual} を使用しています。一致しない VCPKG_ROOT 環境値{ path} は無視されています。このメッセージを表示しない場合は、環境変数の設定を解除するか、--vcpkg-root コマンド ライン スイッチを使用してください。",
  "IllegalFeatures": "このコンテキストでは機能のリストは許可されていません",
  "IllegalPlatformSpec": "プラットフォーム修飾子はこのコンテキストでは許可されていません",
  "ImproperShaLength": "SHA512 は 128 文字の 16 進文字である必要があります: {value}",
  "IncorrectArchiveFileSignature": "アーカイブ ファイルの署名が正しくありません",
  "IncorrectPESignature": "PE 署名が正しくありません",
  "IncrementedUtf8Decoder": "文字列の末尾に増分された Utf8Decoder",
  "InfoSetEnvVar": "環境変数「{env_var}」を選択したエディターに設定することもできます。",
  "InitRegistryFailedNoRepo": "これは Git リポジトリのルートではないため、{path} にレジストリを作成できませんでした。\n'git init {command_line}' を使用して、このフォルダーに Git リポジトリを作成します。",
  "InstallCopiedFile": "{path_source} -> {path_destination} 完了",
  "InstallFailed": "失敗しました: {path}: {error_msg}",
  "InstallPackageInstruction": "プロジェクトを開いて、[ツール] -> [NuGet パッケージ マネージャー] -> [パッケージ マネージャー コンソール] に移動し、次を貼り付けます:\n Install-Package \"{value}\" -Source \"{path}\"",
  "InstallRootDir": "(試験段階) インストール ルート ディレクトリを指定します。",
  "InstallSkippedUpToDateFile": "{path_source} -> {path_destination} はスキップされました。最新の状態です",
  "InstallWithSystemManager": "このツールは、システム パッケージ マネージャーを使用してインストールできる場合があります。",
  "InstallWithSystemManagerMono": "Ubuntu 18.04 のユーザーは、{url} で入手可能な、新しいバージョンの mono が必要な場合があります。",
  "InstallWithSystemManagerPkg": "このツールは、システム パッケージ マネージャー ({command_line}) を使用してインストールできる場合があります。",
  "InstalledBy": "{path} でインストール済み",
  "InstalledPackages": "次のパッケージは既にインストールされています。",
  "InstalledRequestedPackages": "要求されたすべてのパッケージが現時点でインストール済みです。",
  "InstallingFromLocation": "-- 次の場所からポートをインストールしています: {path}",
  "InstallingMavenFile": "Maven ファイルをインストールしています {path}",
  "InstallingPackage": "{action_index}/{count} {spec} をインストールしています...",
  "IntegrateBashHelp": "[bash] タブ補完を有効にします。",
  "IntegrateFishHelp": "[fish] タブ補完を有効にします。",
  "IntegrateInstallHelpLinux": "インストールされているパッケージをユーザー全体で利用できるようにします。",
  "IntegrateInstallHelpWindows": "インストールされているパッケージをユーザー全体で利用できるようにします。初めて使用する場合は管理者特権が必要です。",
  "IntegratePowerShellHelp": "PowerShell タブ補完を有効にします。",
  "IntegrateProjectHelp": "個々の VS プロジェクトで使用するために、参照している NuGet パッケージを生成します。",
  "IntegrateRemoveHelp": "ユーザー全体の統合を削除します。",
  "IntegrateZshHelp": "[zsh] タブ補完を有効にします。",
  "IntegrationFailedVS2015": "Visual Studio 2015 には統合が適用されませんでした。",
  "InternalCICommand": "vcpkg CI は、非互換性に変更されるか、いつでも削除できる内部コマンドです。",
  "InternalErrorMessage": "内部エラー: ",
  "InternalErrorMessageContact": "https://github.com/microsoft/vcpkg/issues/new?template=other-type-of-bug-report.md&labels=category:vcpkg-bug で問題を開き、問題を再現するための詳細な手順を確認してください。",
  "InvalidArchitecture": "アーキテクチャが無効です: {value}",
  "InvalidArgument": "無効な引数です",
  "InvalidArgumentRequiresAbsolutePath": "無効な引数: バイナリ構成文字列のバイナリ構成 '{binary_source}' パス引数は絶対である必要があります",
  "InvalidArgumentRequiresBaseUrl": "無効な引数: バイナリ構成 '{binary_source}' には、最初の引数として {base_url} ベース URL が必要です",
  "InvalidArgumentRequiresBaseUrlAndToken": "無効な引数: バイナリ構成 '{binary_source}' には、少なくともベース URL と SAS トークンが必要です",
  "InvalidArgumentRequiresNoWildcards": "ワイルドカードを含むパスの Windows パス ケースを修正できません: {path}",
  "InvalidArgumentRequiresNoneArguments": "無効な引数: バイナリ構成 '{binary_source}' は引数を受け取りません",
  "InvalidArgumentRequiresOneOrTwoArguments": "無効な引数: バイナリ構成 '{binary_source}' には 1 つまたは 2 つの引数が必要です",
  "InvalidArgumentRequiresPathArgument": "無効な引数: バイナリ構成 '{binary_source}' には少なくとも 1 つのパス引数が必要です",
  "InvalidArgumentRequiresPrefix": "無効な引数: バイナリ構成 '{binary_source}' には少なくとも 1 つのプレフィックスが必要です",
  "InvalidArgumentRequiresSingleArgument": "無効な引数: バイナリ構成 '{binary_source}' は 1 個を超える引数を受け取りません",
  "InvalidArgumentRequiresSingleStringArgument": "無効な引数: バイナリ構成 '{binary_source}' には 1 つの文字列引数が必要です",
  "InvalidArgumentRequiresSourceArgument": "無効な引数: バイナリ構成 '{binary_source}' には少なくとも 1 つのソース引数が必要です",
  "InvalidArgumentRequiresTwoOrThreeArguments": "無効な引数: バイナリ構成 '{binary_source}' には 2 つまたは 3 つの引数が必要です",
  "InvalidArgumentRequiresValidToken": "無効な引数: バイナリ構成 '{binary_source}' には、2 番目の引数として先頭に '?' がない SAS トークンが必要です",
  "InvalidArgumentRequiresZeroOrOneArgument": "無効な引数: バイナリ構成 '{binary_source}' には 0 または 1 個の引数が必要です",
  "InvalidBuildInfo": "パッケージの BUILD_INFO ファイルが無効です: {error_msg}",
  "InvalidBuiltInBaseline": "最上位の組み込みベースライン ({value}) は有効なコミット sha ではありませんでした: 16 進数 40 文字が必要です。",
  "InvalidBundleDefinition": "バンドル定義が無効です。",
  "InvalidCharacterInFeatureList": "機能名に無効な文字があります (小文字、数字、'-'、または '*' にする必要があります)",
  "InvalidCharacterInFeatureName": "機能名に無効な文字があります (小文字、数字、'-' にする必要があります)",
  "InvalidCharacterInPackageName": "パッケージ名に無効な文字があります (小文字、数字、'-' にする必要があります)",
  "InvalidCodePoint": "無効なコード ポイントが utf8_encoded_code_point_count に渡されました",
  "InvalidCodeUnit": "無効なコード単位",
  "InvalidCommandArgSort": "--sort の値は、'lexicographical'、'topological'、'reverse' のいずれかである必要があります。",
  "InvalidCommentStyle": "vcpkg は c スタイルのコメントをサポートしていませんが、ほとんどのオブジェクトでは $-prefixed フィールドをコメントとして使用できます。",
  "InvalidCommitId": "無効なコミット ID: {commit_sha}",
  "InvalidDefaultFeatureName": "'default' は予約済みの機能名です",
  "InvalidDependency": "依存関係は、予約された名前の 1 つではなく、小文字の英数字とハイフンにする必要があります",
  "InvalidFeature": "機能は、予約された名前の 1 つではなく、小文字の英数字とハイフンにする必要があります",
  "InvalidFileType": "失敗しました: {path} はファイルの種類を処理できません",
  "InvalidFilename": "ファイル名に無効な文字 {value} を含めることはできませんが、{path} を含みます",
  "InvalidFloatingPointConst": "無効な浮動小数点定数: {count}",
  "InvalidFormatString": "無効な形式の文字列: {actual}",
  "InvalidHexDigit": "Unicode エスケープの 16 進数が無効です",
  "InvalidIntegerConst": "整数定数が無効です: {count}",
  "InvalidLibraryMissingLinkerMembers": "ライブラリが無効です: リンカー メンバーが見つかりませんでした。",
  "InvalidLinkage": "リンケージの種類 {system_name} が無効です: [{value}]",
  "InvalidLogicExpressionUnexpectedCharacter": "論理式が無効です。予期しない文字です",
  "InvalidLogicExpressionUsePipe": "論理式が無効です。'or' の代わりに '|' を使用してください",
  "InvalidNoVersions": "ファイルにバージョンが含まれていません。",
  "InvalidOptionForRemove": "'remove' はライブラリまたは '--outdated' のいずれかを受け入れます",
  "InvalidPortVersonName": "無効なポート バージョン ファイル名が見つかりました: '{path}'。",
  "InvalidSharpInVersion": "バージョン テキストに無効な文字 '#' があります",
  "InvalidSharpInVersionDidYouMean": "バージョン テキストに無効な文字 '#' があります。\"port-version\" を意図していましたか: {value}?",
  "InvalidString": "無効な utf8 が Value::string(std::string) に渡されました",
  "InvalidTriplet": "無効なトリプレット: {triplet}",
  "InvalidUri": "URI を解析できません: {value}",
  "IrregularFile": "パスが通常のファイルではありませんでした: {path}",
  "JsonErrorMustBeAnObject": "\"{path}\" はオブジェクトである必要があります。",
  "JsonFieldNotObject": "[\"{json_field}\"] の値はオブジェクトである必要があります",
  "JsonFieldNotString": "[\"{json_field}\"] の値は文字列である必要があります",
  "JsonFileMissingExtension": "JSON ファイル {path} には .json (すべて小文字) 拡張子が必要です",
  "JsonSwitch": "(試験段階) JSON 出力を要求します。",
  "JsonValueNotArray": "json 値が配列ではありません",
  "JsonValueNotObject": "json 値がオブジェクトではありません",
  "JsonValueNotString": "json が文字列ではありません",
  "LaunchingProgramFailed": "{tool_name} を起動しています:",
  "LibraryArchiveMemberTooSmall": "ライブラリ アーカイブ メンバーが小さすぎて、期待されるデータ型を格納できませんでした。",
  "LibraryFirstLinkerMemberMissing": "最初のリンカー メンバー名が見つかりませんでした。",
  "LicenseExpressionContainsExtraPlus": "SPDX ライセンス式に追加の `+` が含まれています。これらは、ライセンス識別子の直後にのみ許可されます。",
  "LicenseExpressionContainsInvalidCharacter": "SPDX ライセンス式に無効な文字が含まれています (0x{value:02X} `{value}`)。",
  "LicenseExpressionContainsUnicode": "SPDX ライセンス式には Unicode 文字 (U+{value:04X} `{pretty_value}`) が含まれていますが、これらの式は ASCII のみです。",
  "LicenseExpressionDocumentRefUnsupported": "現在の実装では、DocumentRef- SPDX 参照はサポートされていません。",
  "LicenseExpressionExpectCompoundFoundParen": "複合または文字列の末尾が必要です。かっこが 1 つ見つかりました。",
  "LicenseExpressionExpectCompoundFoundWith": "AND または OR のいずれかが必要です。WITH が見つかりました (WITH は、かっこで囲まれた式ではなく、ライセンス名の後にのみ許可されます)。",
  "LicenseExpressionExpectCompoundFoundWord": "AND または OR が必要ですが、ライセンス名または例外名が見つかりました: `{value}`。",
  "LicenseExpressionExpectCompoundOrWithFoundWord": "AND、OR、または WITH のいずれかが必要です。ライセンス名または例外名が見つかりました: `{value}`。",
  "LicenseExpressionExpectExceptionFoundCompound": "例外名が必要です。複合 {value} が見つかりました。",
  "LicenseExpressionExpectExceptionFoundEof": "例外名が必要です。文字列の末尾が見つかりました。",
  "LicenseExpressionExpectExceptionFoundParen": "例外名が必要です。かっこが 1 つ見つかりました。",
  "LicenseExpressionExpectLicenseFoundCompound": "ライセンス名が必要です。複合 {value} が見つかりました。",
  "LicenseExpressionExpectLicenseFoundEof": "ライセンス名が必要です。文字列の末尾が見つかりました。",
  "LicenseExpressionExpectLicenseFoundParen": "ライセンス名が必要です。かっこが 1 つ見つかりました。",
  "LicenseExpressionImbalancedParens": "右かっこがあるのに左かっこがありません。",
  "LicenseExpressionString": "<license string>",
  "LicenseExpressionUnknownException": "不明なライセンス例外識別子 `{value}` です。既知の値は https://spdx.org/licenses/exceptions-index.html に一覧表示されます",
  "LicenseExpressionUnknownLicense": "不明なライセンス識別子 `{value}`。既知の値は https://spdx.org/licenses/ に一覧表示されます",
  "LinkageDynamicDebug": "動的デバッグ (/MDd)",
  "LinkageDynamicRelease": "動的リリース (/MD)",
  "LinkageStaticDebug": "静的デバッグ (/MTd)",
  "LinkageStaticRelease": "静的リリース (/MT)",
  "ListHelp": "引数は、検索対象のサブ文字列であるか、またはインストールされているすべてのライブラリを表示する no 引数である必要があります。",
  "ListOfValidFieldsForControlFiles": "これは、CONTROL ファイルの有効なフィールドの一覧です (大文字と小文字が区別されます):",
  "LoadingCommunityTriplet": "-- [COMMUNITY] 以下からトリプレット構成を読み込んでいます: {path}",
  "LoadingDependencyInformation": "{count} 個のパッケージの依存関係情報を読み込んでいます...",
  "LoadingOverlayTriplet": "-- [OVERLAY] 以下からトリプレット構成を読み込んでいます: {path}",
  "LocalPortfileVersion": "ローカル portfile バージョンの使用。 ローカルの portfile を更新するには、`git pull` を使用します。",
  "LocalizedMessageMustNotContainIndents": "{value}という名前のメッセージにインデントが含まれているようです。このインデントは、LocalizedString::append_indent に変更する必要があります。",
  "LocalizedMessageMustNotEndWithNewline": "{value}という名前のメッセージは改行で終わり、ローカライズではなく書式設定によって追加される必要があります。",
  "ManifestConflict": "ポート \"{path}\" にマニフェストと CONTROL ファイルの両方が見つかりました。いずれかの名前を変更してください",
  "ManifestFormatCompleted": "マニフェスト ファイルの書式設定に成功しました。",
  "MismatchedBinParagraphs": "シリアル化されたバイナリ段落が、元のバイナリ段落と異なっていました。https://github.com/microsoft/vcpkg でイシューを開き、次の出力を含めてください。",
  "MismatchedFiles": "格納するファイルがハッシュと一致しません",
  "MismatchedManifestAfterReserialize": "シリアル化されたマニフェストは元のマニフェストとは異なります。次の出力を使用して、https://github.com/microsoft/vcpkg で問題を開いてください。",
  "MismatchedNames": "名前が一致しませんでした: '{package_name}' != '{actual}'",
  "MismatchedSpec": "ポート {path} の仕様が一致しません: {expected} が予期された、実際は {actual}",
  "MismatchedType": "{json_field}: 型が一致しません: {json_type} が必要です",
  "Missing7zHeader": "7z ヘッダーが見つかりません。",
  "MissingAndroidEnv": "ANDROID_NDK_HOME 環境変数がありません",
  "MissingAndroidHomeDir": "ANDROID_NDK_HOME ディレクトリが存在しません: {path}",
  "MissingArgFormatManifest": "format-manifest に '--all' を指定せずに --convert-control が渡されました。\nこれでは何も実行されません。明示的に渡されたコントロール ファイルは自動的に変換されます。",
  "MissingClosingParen": "右かっこ ) がありません。",
  "MissingDependency": "パッケージ {spec} はインストールされていますが、依存関係 {package_name} はインストールされていません。",
  "MissingExtension": "'{extension}' 拡張子がありません。",
  "MissingOption": "このコマンドには --{option} が必須です",
  "MissingOrInvalidIdentifer": "識別子が見つからないか無効です",
  "MissingPortSuggestPullRequest": "ポートが一覧にない場合は、問題を開くか、pull request を作成することを検討してください。",
  "MissingRequiredField": "必須フィールド '{json_field}' ({json_type}) がありません",
  "MixingBooleanOperationsNotAllowed": "& と | を混合しています許可されていません。() を使用して操作の順序を指定してください",
  "MonoInstructions": "Mono のインストールが不完全であることが原因である可能性があります。'sudo apt install mono-complete' を使用して、一部のシステムで Mono をフルで使用できます。Ubuntu 18.04 ユーザーについては、https://www.mono-project.com/download/stable/ で利用可能な新しいバージョンの Mono が必要な場合があります",
  "MsiexecFailedToExtract": "起動または終了コード {exit_code} とメッセージで \"{path}\" を抽出中に msiexec が失敗しました:",
  "MultiArch": "Multi-Arch は 'same' である必要がありますが、{option} でした",
  "MultipleFeatures": "{package_name} が {feature} を複数回宣言しています; 機能に一意の名前があることを確認してください",
  "MutuallyExclusiveOption": "--{value} を --{option} と共に使用することはできません。",
  "NavigateToNPS": "任意のブラウザーで {url} に移動してください。",
  "NewConfigurationAlreadyExists": "マニフェストを作成すると、{path} で vcpkg-configuration.json が上書きされます。",
  "NewManifestAlreadyExists": "マニフェストは既に {path} に存在します。",
  "NewNameCannotBeEmpty": "--name を空にすることはできません。",
  "NewOnlyOneVersionKind": "--version-relaxed、--version-date、--version-string のうちの 1 つだけを指定できます。",
  "NewSpecifyNameVersionOrApplication": "C++ ライブラリ用のマニフェストを作成するために --name と --version を指定するか、マニフェストをポートとして使用しないことを示すために --application を指定します。",
  "NewVersionCannotBeEmpty": "--version を空にすることはできません。",
  "NoArgumentsForOption": "オプション --{option} は引数を取りません。",
  "NoCachedPackages": "パッケージがキャッシュされていません。",
  "NoError": "エラーはありません",
  "NoInstalledPackages": "パッケージがインストールされていません。'検索' ということですか?",
  "NoLocalizationForMessages": "次のローカライズされたメッセージはありません: ",
  "NoOutdatedPackages": "期限切れのパッケージはありません。",
  "NoRegistryForPort": "ポート {package_name} に対してレジストリが構成されていません",
  "NoUrlsAndHashSpecified": "SHA をダウンロードするための URL が指定されていません: {sha}",
  "NoUrlsAndNoHashSpecified": "URL が指定されておらず、ハッシュも指定されていません。",
  "NonExactlyArgs": "コマンド '{command_name}' には正確に {expected} 個の引数が必要ですが、{actual} 個が指定されました",
  "NonOneRemainingArgs": "コマンド '{command_name}' には正確に 1 個の引数が必要です",
  "NonRangeArgs": "コマンド '{command_name}' には、{lower} 引数と {upper} 引数の間 (両端を含む) が必要ですが、{actual} が指定されました",
  "NonZeroOrOneRemainingArgs": "コマンド '{command_name}' には 0 または 1 個の引数が必要です",
  "NonZeroRemainingArgs": "コマンド '{command_name}' は追加の引数を受け付けません",
  "NoteMessage": "メモ: ",
  "NugetOutputNotCapturedBecauseInteractiveSpecified": "--interactive が指定されたため、NuGet コマンドが失敗し、出力はキャプチャされませんでした",
  "NugetPackageFileSucceededButCreationFailed": "NuGet パッケージの作成に成功しましたが、.nupkg が生成されませんでした。次が必要です: \"{path}\"",
  "NugetTimeoutExpectsSinglePositiveInteger": "予期しない引数: バイナリ構成 'nugettimeout' には 1 つの正の整数引数が必要です",
  "OptionMustBeInteger": "--{option} 値は整数である必要があります。",
  "OptionRequired": "--{option} オプションが必要です。",
  "OptionRequiresANonDashesValue": "オプション '{option}' には値が必要です; '{option}' を '{value}' に設定する場合は、代わりに等号の形式を使用してください: {actual}={value}",
  "OptionRequiresAValue": "オプション '{option}' には値が必要です",
  "OptionRequiresOption": "--{value} には --{option} が必須です",
  "OptionUsedMultipleTimes": "オプション '{option}' が複数回指定されました。",
  "OptionalCommand": "コメント (オプション)",
  "Options": "オプション",
  "OriginalBinParagraphHeader": "\n元のバイナリ段落",
  "OverlayPatchDir": "オーバーレイ パス \"{path}\" が存在し、ディレクトリである必要があります。",
  "OverlayTriplets": "{path} からのオーバーレイ トリプレット:",
  "OverwritingFile": "ファイル {path} はすでに存在しているため、上書きされます",
  "PECoffHeaderTooShort": "ポータブル実行可能ファイル {path} の解析中、COFF ヘッダーのサイズが小さすぎて有効な PE ヘッダーを含めませんでした。",
  "PEConfigCrossesSectionBoundary": "ポータブル実行可能ファイル {path} の解析中に、イメージ構成ディレクトリがセッション境界を越えています。",
  "PEImportCrossesSectionBoundary": "ポータブル実行可能ファイル {path} の解析中に、インポート テーブルがセッション境界を越えています。",
  "PEPlusTagInvalid": "ポータブル実行可能ファイル {path} の解析中、省略可能なヘッダーは PE32 でも PE32+ でもありません。",
  "PERvaNotFound": "ポータブル実行可能ファイル {path} の解析中に、RVA {value:#X} が見つかりませんでした。",
  "PESignatureMismatch": "ポータブル実行可能ファイル {path} の解析中に署名が一致しません。",
  "PackageAlreadyRemoved": "{spec} を削除できません: すでに削除されています",
  "PackageFailedtWhileExtracting": "{path} の抽出中に '{value}' が失敗しました。",
  "PackageInfoHelp": "パッケージの詳細情報を表示します。",
  "PackageRootDir": "(試験段階) パッケージ ルート ディレクトリを指定します。",
  "PackagesToInstall": "次のパッケージが作成され、インストールされます。",
  "PackagesToInstallDirectly": "次のパッケージが直接インストールされます。",
  "PackagesToModify": "この操作を完了するために、追加のパッケージ (*) が変更されます。",
  "PackagesToRebuild": "次のパッケージが再構築されます。",
  "PackagesToRebuildSuggestRecurse": "上記のパッケージを再構築する場合は、--recurse オプションを使用してコマンドを実行します。",
  "PackagesToRemove": "次のパッケージが移動されます。",
  "PackagesUpToDate": "パッケージを更新する必要はありません。",
  "PackingVendorFailed": "{vendor} のパッキングに失敗しました。詳細については、--debug を使用してください。",
  "PairedSurrogatesAreInvalid": "先頭のサロゲートに続く末尾のサロゲート (ペアリングされたサロゲートは無効です)",
  "ParagraphDuplicateField": "重複するフィールド名",
  "ParagraphExactlyOne": "段落は 1 つだけである必要があります",
  "ParagraphExpectedColonAfterField": "フィールド名の後に ':' が必要です",
  "ParagraphExpectedFieldName": "フィールド名が必要です",
  "ParagraphUnexpectedEndOfLine": "予期しない行の終わりです。空白行にまたがる場合は \" .\" を使用します",
  "ParseControlErrorInfoInvalidFields": "次のフィールドが想定外でした:",
  "ParseControlErrorInfoMissingFields": "次のフィールドが見つかりませんでした:",
  "ParseControlErrorInfoTypesEntry": "{value}は{expected}である必要があります",
  "ParseControlErrorInfoWhileLoading": "{path}の読み込み中:",
  "ParseControlErrorInfoWrongTypeFields": "次のフィールドの型が正しくありません:",
  "ParseIdentifierError": "\"{value}\" は有効な識別子ではありません。識別子は小文字の英数字とハイフンにする必要があり、また、予約されていないことが必須になります (詳細については、{url} を参照してください)",
  "ParsePackageNameError": "\"{package_name}\" は有効なパッケージ名ではありません。パッケージ名は小文字の英数字とハイフンにする必要があり、また、予約されていないことが必須になります (詳細については、{url} を参照してください)",
  "ParsePackagePatternError": "\"{package_name}\" は有効なパッケージ パターンではありません。パッケージ パターンではワイルドカード文字 (*) を 1 つだけ使用し、それをそのパターンの最後の文字にする必要があります (詳細については、{url} を参照してください)",
  "PathMustBeAbsolute": "環境変数 X_VCPKG_REGISTRIES_CACHE の値が絶対ではありません: {path}",
  "PerformingPostBuildValidation": "-- ビルド後の検証の実行",
  "PortBugAllowRestrictedHeaders": "例外的な状況では、このポリシーは {env_var} 経由で無効にすることができます",
  "PortBugBinDirExists": "静的ビルドには bin\\ ディレクトリを含めてはなりませんが、{path} は存在します。",
  "PortBugDebugBinDirExists": "静的ビルドには debug\\bin\\ ディレクトリは存在しませんが、{path} は存在します。",
  "PortBugDebugShareDir": "/debug/share は存在しません。重要なファイルを再構成してから、\nファイル (REMOVE_RECURSE \"${{CURRENT_PACKAGES_DIR}}/debug/share\") を使用してください",
  "PortBugDllAppContainerBitNotSet": "Windows Store アプリには、App Container ビットを設定する必要があります。次の DLL には、App Container ビットが設定されていません。",
  "PortBugDllInLibDir": "/lib または /debug/lib に次の dll が見つかりました。それぞれ /bin または /debug/bin に移動してください。",
  "PortBugDuplicateIncludeFiles": "インクルード ファイルを /debug/include ディレクトリに複製しないでください。プロジェクト cmake でこれを無効にできない場合は、\nfile(REMOVE_RECURSE \"${{CURRENT_PACKAGES_DIR}}/debug/include\") を使用します",
  "PortBugFoundCopyrightFiles": "次のファイルは著作権ファイルの可能性があります:",
  "PortBugFoundDebugBinaries": "{count} 個のデバッグ バイナリが見つかりました:",
  "PortBugFoundDllInStaticBuild": "DLL は静的ビルドに存在してはなりませんが、次の DLL が見つかりました。",
  "PortBugFoundEmptyDirectories": "{path} には空のディレクトリを含めてはなりません。次の空のディレクトリが見つかりました:",
  "PortBugFoundExeInBinDir": "/bin または /debug/bin に次の EXE が見つかりました。EXE は有効な配布ターゲットではありません。",
  "PortBugFoundReleaseBinaries": "{count} 個のリリース バイナリが見つかりました:",
  "PortBugIncludeDirInCMakeHelperPort": "フォルダー /include は cmake ヘルパー ポートに存在します。cmake ファイルのみをインストールする必要があるため、これは正しくありません",
  "PortBugInspectFiles": "{extension} ファイルを調べるには、次を使用します:",
  "PortBugInvalidCrtLinkage": "次のバイナリは {expected} CRT を使用する必要があります。",
  "PortBugInvalidCrtLinkageEntry": "{path} のリンク先:",
  "PortBugKernel32FromXbox": "選択したトリプレットは Xbox をターゲットにしていますが、次の DLL は kernel32 とリンクしています。kernel32 が存在しない Xbox では、これらの DLL を読み込むことができません。これは通常、onecore_apiset.lib や xgameplatform.lib などの適切な包括ライブラリではなく kernel32.lib とリンクすることによって発生します。",
  "PortBugMergeLibCMakeDir": "/lib/cmake フォルダーを /debug/lib/cmake とマージし、/share/{package_name}/cmake に移動する必要があります。ポート vcpkg-cmake-config からヘルパー関数 'vcpkg_cmake_config_fixup()' を使用してください。",
  "PortBugMismatchedNumberOfBinaries": "デバッグ バイナリとリリース バイナリの数が一致しません。",
  "PortBugMisplacedCMakeFiles": "次の cmake ファイルが /share/{spec} の外部で見つかりました。/share/{spec} に cmake ファイルを配置してください。",
  "PortBugMisplacedFiles": "次のファイルが {path} に配置されます:",
  "PortBugMisplacedFilesCont": "これらのディレクトリにファイルを存在することはできません。",
  "PortBugMisplacedPkgConfigFiles": "pkgconfig ディレクトリは、share/pkgconfig (ヘッダーのみのライブラリのみ)、lib/pkgconfig、または lib/debug/pkgconfig のいずれかである必要があります。次の正しく配置されなかった pkgconfig ファイルが見つかりました:",
  "PortBugMissingDebugBinaries": "デバッグ バイナリが見つかりませんでした。",
  "PortBugMissingFile": "/{path} ファイルが存在しません。このファイルは、CMake ヘルパー ポート用に存在する必要があります。",
  "PortBugMissingImportedLibs": "インポート ライブラリが {path} にありませんでした。\nこれが意図されている場合は、profile に次の行を追加します:\nset(VCPKG_POLICY_DLLS_WITHOUT_LIBS enabled)",
  "PortBugMissingIncludeDir": "フォルダー /include が空であるか、存在しません。これは、ライブラリが正しくインストールされなかった場合を示しています。",
  "PortBugMissingLicense": "ソフトウェア ライセンスは ${{CURRENT_PACKAGES_DIR}}/share/{package_name}/copyright で入手できる必要があります",
  "PortBugMissingProvidedUsage": "port に「usage」を指定しましたが、/share/{package_name}/usage にインストールするのを忘れていました。portfile に次の行を追加してください。",
  "PortBugMissingReleaseBinaries": "リリース バイナリが見つかりませんでした。",
  "PortBugMovePkgConfigFiles": "次のようなコマンドを使用して、pkgconfig ファイルを移動できます:",
  "PortBugOutdatedCRT": "次のファイルで古い動的 CRT が検出されました:",
  "PortBugRemoveBinDir": "bin\\ または debug\\bin\\ の作成を無効にできない場合は、ポートファイルでこれを使用して削除します",
  "PortBugRemoveEmptyDirectories": "ディレクトリを設定する必要があるが設定されていない場合は、portfile でエラーが発生する可能性があります。\nディレクトリが不要で、その作成を無効にできない場合は、portfile で次のように使用して削除します。",
  "PortBugRemoveEmptyDirs": "file(REMOVE_RECURSE 上記の名前変更によって残された空のディレクトリ)",
  "PortBugRestrictedHeaderPaths": "次の制限付きヘッダーを使用すると、コア C++ ランタイムおよびその他のパッケージが正しくコンパイルされない可能性があります。例外的な状況では、このポリシーは {env_var} 経由で無効にすることができます。",
  "PortBugSetDllsWithoutExports": "エクスポートを行わない DLL は、ビルド スクリプトのバグである可能性があります。これが意図されている場合は、以下の行を portfile を追加します:\nset(VCPKG_POLICY_DLLS_WITHOUT_EXPORTS enabled)\n次の DLL にはエクスポートがありません:",
  "PortDependencyConflict": "ポート {package_name} には、次のサポートされていない依存関係があります。",
  "PortDoesNotExist": "{package_name} は存在しません",
  "PortMissingManifest": "{package_name}{path} に vcpkg.json またはコントロール ファイルがありません",
  "PortNotInBaseline": "ベースラインにポート {package_name} のエントリが含まれていません",
  "PortSupportsField": "(supports: \"{supports_expression}\")",
  "PortVersionConflict": "次のパッケージは、ポート バージョンとは異なります。",
  "PortVersionMultipleSpecification": "\"port_version\" をバージョン内の埋め込み '#' と組み合わせることはできません",
  "PortsAdded": "次の {count} 個のポートが追加されました。",
  "PortsDiffHelp": "引数は、チェックアウトするブランチ/タグ/ハッシュである必要があります。",
  "PortsNoDiff": "2 つのコミットの間にポートの変更点はありませんでした。",
  "PortsRemoved": "次の {count} 個のポートが削除されました。",
  "PortsUpdated": "\n次の {count} 個のポートが更新されました。",
  "PrebuiltPackages": "ビルドされていないパッケージがあります。ビルドするには、次のコマンドを実行します:",
  "PreviousIntegrationFileRemains": "以前の統合ファイルは削除されませんでした。",
  "ProgramReturnedNonzeroExitCode": "{tool_name} が終了コード: ({exit_code}) で失敗しました。",
  "ProvideExportType": "次のオプションのうち少なくとも 1 つが必要です: --raw --nuget --ifw --zip --7zip --chocolatey --prefab。",
  "PushingVendorFailed": "{vendor} を \"{path}\" にプッシュできませんでした。詳細については、--debug を使用してください。",
  "RegeneratesArtifactRegistry": "成果物レジストリを再生成します。",
  "RegistryCreated": "{path} にレジストリが正常に作成されました",
  "RegistryValueWrongType": "レジストリ値 {path} が予期しない種類でした。",
  "RemoveDependencies": "マニフェスト モードで依存関係を削除するには、マニフェスト (vcpkg.json) を編集して 'インストール' を実行します。",
  "RemovePackageConflict": "{spec} はインストールされていませんが、{triplet} の {package_name} がインストールされています。{package_name}:{triplet} のことですか?",
  "RemovingPackage": "{action_index}/{count} {spec} を削除しています",
  "ResponseFileCode": "@response_file",
  "RestoredPackagesFromAWS": "{elapsed} で AWS から {count} パッケージを復元しました。--debug を使用して詳細を表示します。",
  "RestoredPackagesFromCOS": "{elapsed} の COS から {count} パッケージを復元しました。--debug を使用して詳細を表示します。",
  "RestoredPackagesFromFiles": "{elapsed} の {path} から {count} パッケージを復元しました。--debug を使用して詳細を表示します。",
  "RestoredPackagesFromGCS": "{elapsed} の GCS から {count} パッケージを復元しました。--debug を使用して詳細を表示します。",
  "RestoredPackagesFromGHA": "{elapsed} の GitHub Actions Cache から {count} パッケージを復元しました。--debug を使用して詳細を表示します。",
  "RestoredPackagesFromHTTP": "{elapsed} の HTTP サーバーから {count} パッケージを復元しました。--debug を使用して詳細を表示します。",
  "RestoredPackagesFromNuGet": "{elapsed} の NuGet から {count} パッケージを復元しました。--debug を使用して詳細を表示します。",
  "ResultsHeader": "結果",
  "ScriptAssetCacheRequiresScript": "必要な引数: アセット構成 'x-script' には引数として exec テンプレートが厳密に必要です",
  "SearchHelp": "引数は、検索対象のサブ文字列であるか、またはすべてのライブラリを表示する no 引数である必要があります。",
  "SecretBanner": "*** 秘密 ***",
  "SeeURL": "詳細については、{url} を参照してください。",
  "SerializedBinParagraphHeader": "\nシリアル化されたバイナリ段落",
  "SettingEnvVar": "-- \"{env_var}\"環境変数を\"{url}\"に設定しています。",
  "ShaPassedAsArgAndOption": "SHA512 は引数とオプションの両方として渡されました。これらのいずれかを渡すだけです。",
  "ShaPassedWithConflict": "SHA512 は渡されましたが、--skip-sha512 も渡されました。どちらか一方のみを実行してください。",
  "ShallowRepositoryDetected": "vcpkg は、{path}\n で浅いリポジトリとして複製されました。完全な vcpkg クローンを使用して、もう一度お試しください。",
  "SkipClearingInvalidDir": "ディレクトリでなかったため、{path} のコンテンツのクリアをスキップしています。",
  "SourceFieldPortNameMismatch": "CONTROL ファイル内の 'Source' フィールド、または vcpkg.json ファイル内の \"name\" フィールドに名前 {package_name} があり、ポート ディレクトリ \"{path}\" と一致しません。",
  "SpecifiedFeatureTurnedOff": "'{command_name}'機能は明確に無効になっていますが、--{option} が指定されました。",
  "SpecifyDirectoriesContaining": "トリプレット ファイルを含むディレクトリを指定します。\n(または: '{env_var}')",
  "SpecifyDirectoriesWhenSearching": "ポートを検索するときに使用するディレクトリを指定します。\n(または: '{env_var}')",
  "SpecifyHostArch": "ホスト アーキテクチャのトリプレットを指定します。'vcpkg help triplet' を参照してください。\n(既定値: '{env_var}')",
  "SpecifyTargetArch": "ターゲット アーキテクチャのトリプレットを指定します。'vcpkg help triplet' を参照してください。\n(既定値: '{env_var}')",
  "StartCodeUnitInContinue": "続行位置で開始コード単位が見つかりました",
  "StoreOptionMissingSha": "--store オプションは sha512 なしでは無効です",
  "StoredBinariesToDestinations": "{elapsed} の {count} 件の宛先にバイナリを格納しました。",
  "StoredBinaryCache": "格納されたバイナリ キャッシュ: \"{path}\"",
  "SuccessfulyExported": "{package_name} を {path} にエクスポートしました",
  "SuggestGitPull": "結果は古い可能性があります。'git pull' を実行して最新の結果を取得してください。",
  "SuggestResolution": "すべてのエラーを一度に解決するには、次を実行します: \nvcpkg {command_name} --{option}",
  "SuggestStartingBashShell": "変更を有効にするには、新しい bash シェルを開始したことをご確認ください。",
  "SuggestUpdateVcpkg": "vcpkg バイナリの更新が必要である可能性があります。{command_line} を実行して更新してみてください。",
  "SupportedPort": "ポート {package_name} がサポートされています。",
  "SwitchUsedMultipleTimes": "切り替え '{option}' が複数回指定されました",
  "SystemApiErrorMessage": "呼び出し {system_api} が {exit_code} ({error_msg}) で失敗しました",
  "SystemRootMustAlwaysBePresent": "Windows で SystemRoot 環境変数を常に設定する必要がありました。",
  "SystemTargetsInstallFailed": "システム ターゲット ファイルを {path} にインストールできませんでした",
  "ToRemovePackages": "古いパッケージのみを削除するには、\n{command_name} remove --outdated を実行します",
  "ToUpdatePackages": "これらのパッケージとすべての依存関係を更新するには、\n{command_name} upgrade' を実行します",
  "ToolFetchFailed": "{tool_name} をフェッチできませんでした。",
  "ToolInWin10": "このユーティリティは、Windows 10 以降にバンドルされています。",
  "ToolOfVersionXNotFound": "{tool_name} の適切なバージョンが見つからず (v{version} が必要)、ポータブル バージョンを自動的にダウンロードできません。{tool_name} の新しいバージョンをインストールしてください",
  "TotalInstallTime": "合計インストール時間: {elapsed}",
  "TrailingCommaInArray": "配列の末尾にコンマがあります",
  "TrailingCommaInObj": "オブジェクトの末尾にコンマがあります",
  "TripletFileNotFound": "トリプレット ファイル {triplet}.cmake が見つかりません",
  "TwoFeatureFlagsSpecified": "'{value}' と -'{value}' の両方が機能フラグとして指定されました。",
  "UnableToClearPath": "{path} を削除できません",
  "UnableToReadAppDatas": "%LOCALAPPDATA% と %APPDATA% の両方が読み取れませんでした",
  "UnableToReadEnvironmentVariable": "{env_var} を読み取ることができません",
  "UndeterminedToolChainForTriplet": "CMAKE_SYSTEM_NAME {system_name} との {triplet} に対するツールチェーンの使用を特定できません。VCPKG_CHAINLOAD_TOOLCHAIN_FILE を使用するということですか?",
  "UnexpectedArgument": "予期しない引数: {option}",
  "UnexpectedAssetCacheProvider": "不明なアセット プロバイダーの種類: 有効なソースの種類は 'x-azurl'、'x-script'、'x-block-origin'、'clear' です",
  "UnexpectedByteSize": "{expected} バイトが書き込まれる必要がありましたが、{actual} 書き込まれました。",
  "UnexpectedCharExpectedCloseBrace": "予期しない文字です; プロパティまたは閉じかっこが必要です",
  "UnexpectedCharExpectedColon": "予期しない文字です; コロンが必要です",
  "UnexpectedCharExpectedComma": "予期しない文字です; コンマまたは閉じかっこが必要です",
  "UnexpectedCharExpectedName": "予期しない文字です; プロパティ名必要です",
  "UnexpectedCharExpectedValue": "予期しない文字です; 値が必要です",
  "UnexpectedCharMidArray": "配列の中央に予期しない文字があります",
  "UnexpectedCharMidKeyword": "キーワードの中央に予期しない文字があります",
  "UnexpectedDigitsAfterLeadingZero": "先頭の 0 の後に予期しない数字があります",
  "UnexpectedEOFAfterBacktick": "予期しない eof: 末尾にエスケープされていないバッククォート (') は使用できません",
  "UnexpectedEOFAfterEscape": "エスケープ文字の後に予期しない EOF があります",
  "UnexpectedEOFAfterMinus": "マイナス記号の後に予期しない EOF があります",
  "UnexpectedEOFExpectedChar": "予期しない文字; EOF が必要です",
  "UnexpectedEOFExpectedCloseBrace": "予期しない EOF です; プロパティまたは閉じかっこが必要です",
  "UnexpectedEOFExpectedColon": "予期しない EOF です; コロンが必要です",
  "UnexpectedEOFExpectedName": "予期しない EOF; プロパティ名が必要です",
  "UnexpectedEOFExpectedProp": "予期しない EOF; プロパティが必要です",
  "UnexpectedEOFExpectedValue": "予期しない EOF です; 値が必要です",
  "UnexpectedEOFMidArray": "配列の途中に予期しない EOF があります",
  "UnexpectedEOFMidKeyword": "キーワードの途中に予期しない EOF があります",
  "UnexpectedEOFMidString": "文字列の途中に予期しない EOF があります",
  "UnexpectedEOFMidUnicodeEscape": "Unicode エスケープの途中で予期しないファイルの終わりが見つかりました",
  "UnexpectedErrorDuringBulkDownload": "一括ダウンロード中に予期しないエラーが発生しました。",
  "UnexpectedEscapeSequence": "予期しないエスケープ シーケンスの継続",
  "UnexpectedExtension": "予期しないアーカイブ拡張子: '{extension}'。",
  "UnexpectedFeatureList": "予期しない機能の一覧",
  "UnexpectedField": "予期しないフィールド '{json_field}'",
  "UnexpectedFieldSuggest": "予期しないフィールド '{json_field}' です。'{value}' のことですか?",
  "UnexpectedFormat": "必要な形式は [{expected}] ですが、[{actual}] でした。",
  "UnexpectedOption": "予期しないオプション: {option}",
  "UnexpectedPlatformExpression": "予期しないプラットフォーム式です",
  "UnexpectedPortName": "ポート {expected} が {path} で {actual} として宣言されています",
  "UnexpectedPortversion": "バージョン管理フィールドのない予期しない \"port-version\" です",
  "UnexpectedSwitch": "予期しない切り替え: {option}",
  "UnexpectedToolOutput": "{tool_name} ({path}) は、バージョンを特定しようとしたときに予期しない出力を生成しました:",
  "UnknownBaselineFileContent": "認識できないベースライン エントリ;'port:triplet=(fail|skip|pass)' が必要です",
  "UnknownBinaryProviderType": "不明なバイナリ プロバイダー タイプ: 有効なプロバイダーは 'clear'、'default'、'nuget'、'nugetconfig'、'nugettimeout'、'interactive'、'x-azblob'、'x-gcs'、'x-aws'、'x-aws-config'、'http'、'files' です",
  "UnknownBooleanSetting": "{option} の不明なブール値の設定: \"{value}\"。有効な値は ''、'1'、'0'、'ON'、'OFF'、'TRUE'、および 'FALSE' です。",
  "UnknownOptions": "コマンド '{command_name}' の不明なオプション:",
  "UnknownParameterForIntegrate": "統合のためのパラメーター '{value}' が不明です。",
  "UnknownPolicySetting": "ポリシー '{value}' の不明な設定: {option}",
  "UnknownSettingForBuildType": "VCPKG_BUILD_TYPE {option} の設定が不明です。有効な設定は、'debug'、および 'release' です。",
  "UnknownTool": "vcpkg に、このプラットフォーム用のこのツールの定義がありません。",
  "UnknownTopic": "不明なトピック {value}",
  "UnknownVariablesInTemplate": "無効な引数: URL テンプレー `'{value}` に不明な変数が含まれています: {list}",
  "UnrecognizedConfigField": "構成に次の認識できないフィールドが含まれています。",
  "UnrecognizedIdentifier": "識別子名 {value} が認識されません。トリプレット ファイル内のオーバーライド リストに追加します。",
  "UnsupportedFeature": "機能 {feature} が渡されましたが、それは {package_name} サポートにサポートされている機能ではありません。",
  "UnsupportedFeatureSupportsExpression": "{feature_spec} は '{supports_expression}' でのみサポートされていますが、これは {triplet} と一致しません。これは通常、他のプラットフォームをビルドする際に既知のビルド エラーまたは実行時の問題があることを意味します。これを無視して {package_name} のビルドを試みるには、vcpkg を `--allow-unsupported` で再実行してください。",
  "UnsupportedFeatureSupportsExpressionWarning": "{feature_spec} は '{supports_expression}' でのみサポートされていますが、これは {triplet} と一致しません。これは通常、他のプラットフォームをビルドする際に既知のビルド エラーまたは実行時の問題があることを意味します。`--allow-unsupported` であるため、とにかく続行します。",
  "UnsupportedPort": "ポート {package_name} はサポートされていません。",
  "UnsupportedPortDependency": "- 依存関係 {value} はサポートされていません。",
  "UnsupportedShortOptions": "短いオプションはサポートされていません: '{value}'",
  "UnsupportedSyntaxInCDATA": "]]> は CDATA ブロックでサポートされていません",
  "UnsupportedSystemName": "VCPKG_CMAKE_SYSTEM_NAME「{system_name}」を vcvarsall プラットフォームにマップできませんでした。サポートされているシステム名は、「」、「Windows」、および「WindowsStore」です。",
  "UnsupportedToolchain": "トリプレット内 {triplet}: 要求されたターゲットアーキテクチャ {arch} に対して有効なツールチェーンが見つかりません。\n選択された Visual Studio インスタンスは {path} にあり、\n利用可能なツールチェインの組み合わせは以下の通りです: {list}",
  "UnsupportedUpdateCMD": "更新コマンドは現在マニフェスト モードをサポートしていません。代わりに、vcpkg.json を変更してインストールを実行してください。",
  "UpdateBaselineAddBaselineNoManifest": "--{option} スイッチが渡されましたが、'組み込みベースライン' フィールドを追加するマニフェスト ファイルがありません。",
  "UpdateBaselineLocalGitError": "git は \"{path}\" のローカル vcpkg レジストリの HEAD を解析できませんでした",
  "UpdateBaselineNoConfiguration": "更新する 'vcpkg.json' も 'vcpkg-configuration.json' も存在しません。",
  "UpdateBaselineNoExistingBuiltinBaseline": "マニフェスト ファイルには現在、'組み込みベースライン' フィールドが含まれていません。追加するには、--{option} スイッチを渡してください。",
  "UpdateBaselineNoUpdate": "レジストリ '{url}' は更新されませんでした: '{value}'",
  "UpdateBaselineRemoteGitError": "git はリモートリポジトリ '{url}' の取り込みに失敗しました",
  "UpdateBaselineUpdatedBaseline": "レジストリ '{url}' を更新しました。ベースライン '{old_value}' -> '{new_value}'",
  "UpgradeInManifest": "アップグレード コマンドは現在マニフェスト モードをサポートしていません。代わりに、vcpkg.json を変更してインストールを実行してください。",
  "UpgradeRunWithNoDryRun": "上記のパッケージを再構築する場合は、--no-dry-run オプションを使用してこのコマンドを実行します。",
  "UploadedBinaries": "{count} {vendor} にバイナリをアップロードしました。",
  "UploadedPackagesToVendor": "{count} 個のパッケージを {elapsed} の {vendor} にアップロードしました",
  "UploadingBinariesToVendor": "'{spec}' のバイナリを '{vendor}' ソース \"{path}\" にアップロードしています。",
  "UploadingBinariesUsingVendor": "'{vendor}' \"{path}\" を使用して '{spec}' のバイナリをアップロードしています。",
  "UseEnvVar": "-- 環境変数で {env_var} を使用しています。",
  "UserWideIntegrationDeleted": "ユーザー全体の統合がインストールされていません。",
  "UserWideIntegrationRemoved": "ユーザー全体の統合が削除されました。",
  "UsingCommunityTriplet": "-- コミュニティ トリプレット {triplet} を使用しています。このトリプレット構成の成功は保証されていません。",
  "UsingManifestAt": "{path} でマニフェスト ファイルを使用しています。",
  "Utf8ConversionFailed": "UTF-8 への変換に失敗しました",
  "VSExaminedInstances": "次の Visual Studio インスタンスが考慮されました。",
  "VSExaminedPaths": "Visual Studio インスタンスについて、次のパスが調べられました。",
  "VSNoInstances": "完全な Visual Studio インスタンスが見つかりませんでした",
  "VcpkgCeIsExperimental": "vcpkg-artifacts は試験段階であり、いつでも変更される可能性があります。",
  "VcpkgCommitTableHeader": "VCPKG コミット",
  "VcpkgCompletion": "vcpkg {value} 補完は既に \"{path}\" ファイルにインポートされています。\n次のエントリが見つかりました:",
  "VcpkgDisallowedClassicMode": "現在の作業ディレクトリの上にマニフェスト (vcpkg.json) が見つかりませんでした。\nこの vcpkg ディストリビューションにはクラシック モード インスタンスがありません。",
  "VcpkgHasCrashed": "vcpkg がクラッシュしました。https://github.com/microsoft/vcpkg で問題を作成してください。問題には、実行しようとした作業の簡単な概要と次の情報を記載してください。",
  "VcpkgInVsPrompt": "vcpkg は、Visual Studio プロンプトで {value} をターゲットにしているように見えますが、{triplet} 用にインストールしているように見えます。triplet {value}-windows または --triplet {value}-uwp の使用を検討してください。",
  "VcpkgInvalidCommand": "無効なコマンド: {command_name}",
  "VcpkgRegistriesCacheIsNotDirectory": "環境変数 X_VCPKG_REGISTRIES_CACHE の値がディレクトリではありません: {path}",
  "VcpkgRootRequired": "スタンドアロン ブートストラップには VCPKG_ROOT の設定が必要です。",
  "VcpkgRootsDir": "vcpkg ルート ディレクトリを指定します。\n(既定値: {env_var})",
  "VcpkgSendMetricsButDisabled": "sendmetrics が渡されましたが、メトリクスは無効になっています。",
  "VcvarsRunFailed": "Visual Studio 環境を取得するために vcvarsall.bat を実行できませんでした",
  "VcvarsRunFailedExitCode": "Visual Studio 環境を取得しようとしたときに、vcvarsall.bat が {exit_code} を返しました",
  "VersionBaselineMismatch": "最新バージョンは {expected} ですが、ベースライン ファイルには {actual} が含まれています。\n以下を実行してください:\nvcpkg x-add-version {package_name}\ngit add versions\ngit commit -m \"Update version database\"\nベースライン バージョンを更新します。",
  "VersionBuiltinPortTreeEntryMissing": "{expected} で {package_name} のバージョン データベース エントリがありません。チェックアウトされたポートのツリー バージョン ({actual}) を使用しています。",
  "VersionCommandHeader": "vcpkg パッケージ管理プログラムのバージョン {version}\n\nライセンス情報については、LICENSE.txt を参照してください。",
  "VersionConflictXML": "{path} バージョン: [{expected_version}] が必要でしたが、[{actual_version}] でした。 bootstrap-vcpkg を再実行してください。",
  "VersionConstraintPortVersionMustBePositiveInteger": "\"version>=\" 内の port-version ('#' の後) は負ではない整数である必要があります",
  "VersionConstraintUnresolvable": "{spec} から依存関係 {package_name} の最小制約を解決できません。\n依存関係がベースラインに見つかりませんでした。これは、その時点でパッケージが存在しなかったことを示しています。これは、明示的なオーバーライド バージョンを \"overrides\" フィールドで指定するか、ベースラインを更新することで修正できます。\n詳細については、`vcpkg help versioning` を参照してください。",
  "VersionConstraintViolated": "依存関係 {spec} が少なくともバージョン {expected_version} であることが必要でしたが、現在は {actual_version} です。",
  "VersionDatabaseEntryMissing": "{version} に {package_name} のバージョン エントリがありません。",
  "VersionDatabaseFileMissing": "{package_name} にバージョン データベース ファイルが {path}にありません\nvcpkg x-add-version {package_name}\nを実行して、\nバージョン ファイルを作成します。",
  "VersionGitEntryMissing": "{version} に {package_name} のバージョン データベース エントリがありません。\n利用可能なバージョン:",
  "VersionInDeclarationDoesNotMatch": "ファイルで宣言されたバージョンがチェックアウトされたバージョンと一致しません: {version}",
  "VersionIncomparable1": "{spec} でのバージョンの競合: {constraint_origin} には {expected} が必要です。ベースライン バージョン {actual} と比較することはできません。",
  "VersionIncomparable2": "{version_spec} にはスキーム {new_scheme} があります",
  "VersionIncomparable3": "これは、優先するバージョンに明示的なオーバーライドを追加することで解決できます。例:",
  "VersionIncomparable4": "詳細については、`vcpkg help versioning` または {url} を参照してください。",
  "VersionIncomparableSchemeString": "どちらのバージョンにもスキーム文字列がありますが、プライマリ テキストは異なります。",
  "VersionIncomparableSchemes": "バージョンには、比較できないスキームがあります。",
  "VersionInvalidDate": "'{version}' は有効な日付バージョンではありません。日付は YYYY-MM-DD の形式に従う必要があり、disambiguator は先頭にゼロを付けずにドット区切りの正の整数値にする必要があります。",
  "VersionInvalidRelaxed": "'{version}' は有効な緩やかなバージョンではありません (任意の数値要素数を持つ semver)。",
  "VersionInvalidSemver": "'{version}' は有効なセマンティック バージョンではありません。<https://semver.org> を参照してください。",
  "VersionMissing": "バージョン管理フィールドが必要です (version、version-date、version-semver、version-string のいずれか)",
  "VersionMissingRequiredFeature": "{version_spec} には、{constraint_origin} が必要とする機能 {feature} が必要ありません",
  "VersionNotFound": "{expected} は利用できません。使用できるのは {actual} のみです",
  "VersionNotFoundInVersionsFile": "{package_name} のバージョン ファイルにバージョン {version} が見つかりませんでした。\nvcpkg x-add-version {package_name}\nを実行して、\n新しいポート バージョンを追加します。",
  "VersionRejectedDueToBaselineMissing": "{path} は 「{json_field}」を使用し、「builtin-baseline」がないため拒否されました。これは、「{json_field}」の使用を削除するか、「builtin-baseline」を追加することで修正できます。\n詳細については、「vcpkg ヘルプのバージョン管理」を参照してください。",
  "VersionRejectedDueToFeatureFlagOff": "「{json_field}」を使用し、'versions' 機能フラグが無効になっているため、{path} は拒否されました。これは、「{json_field}」を削除するか、'versions' 機能フラグを有効にすることで修正できます。\n詳細については、「vcpkg ヘルプのバージョン管理」を参照してください。",
  "VersionSchemeMismatch": "バージョン データベースは {version} を {expected} として宣言していますが、{path} はそれを {actual} として宣言します。異なるスキームで宣言されている場合でも、バージョンは一意である必要があります。\nvcpkg x-add-version {package_name} --overwrite-version\nを実行して、\nバージョン データベースで宣言されているスキームをポートで宣言されたスキームで上書きします。",
  "VersionShaMismatch": "{version} は {expected} で宣言されていますが、ローカル ポートの SHA {actual}が異なります。\nポートのバージョン フィールドを更新してから、次を実行してください:\nvcpkg x-add-version {package_name}\nGit のバージョンの追加\ngit commit -m \"Update version database\"\nで新しいバージョンを追加します。",
  "VersionShaMissing": "{package_name} の検証中に Git SHA が見つかりません。\n以下を実行してください:\ngit add \"{path}\"\ngit commit -m \"wip\"\nvcpkg x-add-version {package_name}\ngit add versions\ngit commit --amend -m \"[{package_name}] Add new port\"\n新しいポートをコミットし、そのバージョン ファイルを作成します。",
  "VersionSharpMustBeFollowedByPortVersion": "バージョン テキスト内の '#' の後にはポート バージョンが必要です",
  "VersionSharpMustBeFollowedByPortVersionNonNegativeInteger": "バージョン テキスト内の '#' の後にはポート バージョン (負でない整数) を指定する必要があります",
  "VersionSpecMismatch": "バージョンに一貫性がないため、ポートを読み込めませんでした。ファイル「{path}」にはバージョン {actual_version} が含まれていますが、バージョン データベースは {expected_version} であることを示しています。",
  "VersionTableHeader": "バージョン",
  "VersionVerifiedOK": "OK: {version_spec} -> {commit_sha}",
  "WaitingForChildrenToExit": "子プロセスの終了を待機しています...",
  "WaitingToTakeFilesystemLock": "{path} でファイルシステムのロックを取得するのを待機しています...",
  "WarnOnParseConfig": "構成 {path} で次の警告が見つかりました:",
  "WarningMessage": "警告: ",
  "WarningMessageMustUsePrintWarning": "{value}という名前のメッセージは「warning:」で始まります。代わりに、コードの先頭に「WarningMessage」を追加するように変更する必要があります。",
  "WarningsTreatedAsErrors": "以前の警告がエラーとして解釈される",
  "WhileCheckingOutBaseline": "ベースライン {commit_sha} のチェックアウト中",
  "WhileCheckingOutPortTreeIsh": "Git ツリー {commit_sha} でポート {package_name} のチェックアウト中",
  "WhileGettingLocalTreeIshObjectsForPorts": "ポートのローカル ツリー設定オブジェクトの取得中",
  "WhileLoadingLocalPort": "ローカル ポート {package_name} の読み込み中に",
  "WhileLoadingPortFromGitTree": "ポートの読み込み中: {commit_sha}",
  "WhileLookingForSpec": "{spec} の検索中:",
  "WhileParsingVersionsForPort": "{path} からの {package_name} のバージョンの解析中",
  "WhileValidatingVersion": "バージョンの検証中に: {version}",
  "WindowsOnlyCommand": "このコマンドは Windows のみをサポートします。",
  "WroteNuGetPkgConfInfo": "NuGet パッケージ構成情報を {path} に書き込みました",
  "UnrecognizedCommand$": "認識できないコマンド '${p0}'",
  "Use$ToGetHelp": "${p0} を使用してヘルプを表示する",
  "FatalTheRootFolder$CannotBeCreated": "致命的エラー: ルート フォルダー '${p0}' を作成できません",
  "FatalTheGlobalConfigurationFile$CannotBeCreated": "致命的エラー: グローバル構成ファイル '${p0}' を作成できません",
  "VCPKGCOMMANDWasNotSet": "VCPKG_COMMAND が設定されていません",
  "RunningVcpkgInternallyReturnedANonzeroExitCode$": "vcpkg を内部的に実行すると、ゼロ以外の終了コードが返されました: ${p0}",
  "failedToDownloadFrom$": "${p0} からダウンロードできませんでした",
  "failedToDownload$FromAnySource": "ソースから ${p0} をダウンロードできませんでした",
  "ErrorParsingConditionalDemand$$": "条件付き要求 '${p0}'- ${p1} の解析中にエラーが発生しました",
  "MissingIdentity$": "ID '${p0}' がありません",
  "infoidShouldBeOfTypestringFound$": "info.id は 'string' 型である必要がありますが、'${p0}' が見つかりました",
  "MissingVersion$": "バージョン '${p0}' がありません",
  "infoversionShouldBeOfTypestringFound$": "info.version は 'string' 型である必要がありますが、'${p0}' が見つかりました",
  "infosummaryShouldBeOfTypestringFound$": "info.summary は 'string' 型である必要がありますが、'${p0}' が見つかりました",
  "infodescriptionShouldBeOfTypestringFound$": "info.description は 'string' 型である必要がありますが、'${p0}' が見つかりました",
  "infooptionsShouldBeASequenceFound$": "info.options はシーケンスである必要があります。'${p0}' が見つかりました",
  "TheInfoBlockIsDeprecatedForConsistencyWithVcpkgjsonMoveInfoMembersToTheOutside": "情報ブロックは vcpkg.json との一貫性のため非推奨です。情報メンバーを外部に移動します。",
  "idShouldBeOfTypestringFound$": "id は 'string' 型である必要がありますが、'${p0}' が見つかりました",
  "versionShouldBeOfTypestringFound$": "version は 'string' 型である必要がありますが、'${p0}' が見つかりました",
  "summaryShouldBeOfTypestringFound$": "summary は 'string' 型である必要がありますが、'${p0}' が見つかりました",
  "descriptionShouldBeOfTypestringFound$": "description は 'string' 型である必要がありますが、'${p0}' が見つかりました",
  "optionsShouldBeASequenceFound$": "options はシーケンスである必要があります。'${p0}' が見つかりました",
  "DuplicateKeysDetectedInManifest$": "マニフェストで検出された重複キー: '${p0}'",
  "in$Skipping$BecauseItIsA$": "${p2} であるため、${p0} で ${p1} をスキップします",
  "noPostscriptFileRerunWithTheVcpkgShellFunctionRatherThanExecutable": "postscript ファイルがありません: 実行可能ファイルではなく vcpkg シェル関数を使用して再度実行してください",
  "DuplicateDefine$DuringActivationNewValueWillReplaceOld": "アクティブ化中に ${p0} の定義が重複しています。古い値は新しい値に置き換わります。",
  "DuplicateToolDeclared$DuringActivationNewValueWillReplaceOld": "アクティブ化中に重複したツールが ${p0} を宣言しました。 古い値は新しい値に置き換わります。",
  "DuplicateAliasDeclared$DuringActivationNewValueWillReplaceOld": "アクティブ化中に重複したエイリアスが ${p0} を宣言しました。 古い値は新しい値に置き換わります。",
  "DuplicateLocationDeclared$DuringActivationNewValueWillReplaceOld": "アクティブ化中に重複した場所が ${p0} と宣言されました。古い値は新しい値に置き換わります。",
  "CircularVariableReferenceDetected$": "循環変数参照が検出されました: ${p0}",
  "CircularVariableReferenceDetected$$": "循環変数参照が検出されました: ${p0} - ${p1}",
  "VariableReferenceFound$$$ThatIsReferencingAnUnknownBaseObject": "不明なベース オブジェクトを参照している変数参照が '$${p0}.${p1}' を検出しました。",
  "UnresolvedVariableReferenceFound$$$DuringVariableSubstitution": "変数置換中に未解決の変数参照 ($${p0}.${p1}) が見つかりました。",
  "InvalidPathDoesNotExist$": "無効なパス - 存在しません: ${p0}",
  "Activating$": "アクティブ化中: ${p0}",
  "Deactivating$": "非アクティブ化中: ${p0}",
  "nothingIsActivatedNoChangesHaveBeenMade": "何もアクティブ化されておらず、変更されていません",
  "InvalidArtifactId$": "無効な成果物 ID '${p0}'",
  "UnknownInstallerType$": "不明なインストーラーの種類 ${p0}",
  "WhileResolvingDependenciesOf$$In$CouldNotBeResolvedToARegistry": "${p0} の依存関係の解決中に、${p2} の ${p1} をレジストリに解決できませんでした。",
  "WhileResolvingDependenciesOfTheProjectFile$$DidNotSpecifyARegistry": "プロジェクト ファイル ${p0} の依存関係の解決中に、${p1} はレジストリを指定しませんでした。",
  "UnableToResolveDependency$In$": "${p1} の依存関係 ${p0} を解決できません。",
  "Artifact": "成果物",
  "Version": "バージョン",
  "Status": "状態",
  "Dependency": "依存関係",
  "Summary": "概要",
  "progressUnknown": "(進行状況不明)",
  "verifying": "検証中",
  "downloading$$": "${p0} -> ${p1} をダウンロードしています",
  "unpacking": "パック解除",
  "unpacking$": "${p0} をパック解除する",
  "Installing$": "${p0} をインストールしています...",
  "$AlreadyInstalled": "${p0} は既にインストールされています。",
  "Downloading$": "${p0} をダウンロードしています...",
  "Unpacking$": "${p0} をパック解除しています...",
  "ErrorInstalling$$": "インストールでのエラー ${p0} - ${p1}",
  "ExpectedASingleValueFor$FoundMultiple": "${p0} には 1 つの値が必要です - 複数の値が見つかりました",
  "Synopsis": "概要",
  "Description": "説明",
  "Switches": "スイッチ",
  "SeeAlso": "関連項目",
  "error": "エラー:",
  "warning": "警告:",
  "ExpectedASingleValueFor$": "'--${p0}' には 1 つの値が必要です。",
  "Assuming$IsCorrectSupplyAHashInTheArtifactMetadataToSuppressThisMessage": "「${p0}」が正しいと仮定します。このメッセージを非表示にするには、成果物メタデータにハッシュを指定してください。",
  "DownloadedFile$DidNotHaveTheCorrectHash$$": "ダウンロードしたファイル '${p0}' には正しいハッシュがありませんでした (${p1}: ${p2})",
  "packageReference$IsNotAValidNugetPackageReferencenameversion": "パッケージ参照 '${p0}' は有効な nuget パッケージ参照ではありません ({name}/{version})",
  "statsMayNotBeUndefined": "統計を未定義にすることはできません",
  "CannotRenameFilesAcrossFilesystems": "ファイルシステム間でファイルの名前を変更できません",
  "CopyFailedSource$IsAFolderTarget$IsAFile": "コピーに失敗しました: ソース (${p0}) はフォルダー、ターゲット (${p1}) はファイルです",
  "UriMayNotBeEmpty": "URI を空にすることはできません",
  "scheme$AlreadyRegistered": "スキーム '${p0}' は既に登録されています",
  "uri$HasNoScheme": "URI ${p0} にはスキームがありません",
  "scheme$HasNoFilesystemAssociatedWithIt": "スキーム ${p0} には関連付けられたファイル システムがありません",
  "mayNotRenameAcrossFilesystems": "ファイルシステム全体で名前を変更できない場合があります",
  "CouldNotActivateEspidfPythonWasNotFound": "esp-idf をアクティブ化できませんでした: python が見つかりませんでした。",
  "GitIsNotInstalled": "Git がインストールされていません",
  "InitializingRepositoryFolder": "リポジトリ フォルダーを初期化しています",
  "FailedToInitializeGitRepositoryFolder$": "Git リポジトリ フォルダー (${p0}) を初期化できませんでした",
  "AddingRemote$ToGitRepositoryFolder": "リモート ${p0} を Git リポジトリ フォルダーに追加しています",
  "FailedToSetGitOrigin$InFolder$": "フォルダー (${p1}) に Git オリジン (${p0}) を設定できませんでした",
  "FetchingRemote$ForGitRepositoryFolder": "Git リポジトリ フォルダーのリモート ${p0} をフェッチしています",
  "UnableToFetchGitDataFor$InFolder$": "フォルダー (${p1}) 内の (${p0}) の git データを取得できません",
  "CheckingOutCommit$For$ToGitRepositoryFolder": "${p1} のコミット ${p0} を Git リポジトリ フォルダーにチェックアウトしています",
  "UnableToCheckoutDataFor$InFolder$": "フォルダー (${p1}) 内の (${p0}) のデータをチェックアウトできません",
  "UpdatingSubmodulesForRepository$InTheGitRepositoryFolder": "git リポジトリ フォルダー内のリポジトリ ${p0} のサブモジュールを更新しています",
  "UnableToSetSubmoduleShallowDataFor$InFolder$": "フォルダー (${p1}) 内の (${p0}) のサブモジュールの浅いデータを設定できません",
  "UnableUpdateSubmodulesFor$InFolder$": "フォルダー (${p1}) 内の (${p0}) のサブモジュールを更新できません",
  "ExpectedCommaFound$": "コンマが必要ですが、${p0} が見つかりました",
  "ExpectedOneOfNumberBooleanIdentifierStringFoundToken$": "{Number, Boolean, Identifier, String} のいずれかが必要ですが、トークン ${p0} が見つかりました",
  "ExpressionSpecifiedNOTTwice": "式が 2 回指定されていません",
  "ExpectedCloseParenthesisForExpressionFound$": "式の右括弧が必要ですが、${p0} が見つかりました",
  "ExpectedExpressionFound$": "式が必要ですが、${p0} が見つかりました",
  "ParseErrorDigitExpected": "ParseError: 数字が必要です (0-9)",
  "ParseErrorHexDigitExpectedFf": "ParseError: 16 進数が必要です (0-F,0-f)",
  "ParseErrorBinaryDigitExpected": "ParseError: 2 進数が必要です (0,1)",
  "UnexpectedEndOfFileWhileSearchingFor$": "'${p0}' の検索中に予期しないファイルの終わりが発生しました",
  "InvalidEscapeSequence": "無効なエスケープ シーケンス",
  "FailedToDeserializeIndex$": "インデックス ${p0} を逆シリアル化できませんでした",
  "$MatchedMoreThanOneResult$": "'${p0}' は複数の結果 (${p1}) と一致しました。",
  "UnsupportedRegistryScheme$": "サポートされていないレジストリ スキーム '${p0}'",
  "TriedToAdd$As$But$IsAlready$": "${p0} を ${p1} として追加しようとしましたが、${p2} は既に ${p3} です。",
  "UnknownRegistry$in$TheFollowingAreKnown$": "不明なレジストリ ${p0} (${p1} 内)。 以下が既知です: ${p2}",
  "UpdatingRegistryDataFrom$": "${p0} からレジストリ データを更新しています",
  "$MustBeAString": "${p0} は文字列である必要があります",
  "$MustBeABool": "${p0} はブール値である必要があります",
  "$MustBeAnArrayOfStringsOrUnset": "${p0} は文字列の配列であるか、設定されていない必要があります",
  "FoundAMismatched$In$ForALiteral$Use$$Instead": "'${p1}' に一致しない ${p0} が見つかりました。 リテラル ${p2} の場合は、代わりに ${p3}${p4} を使用してください。",
  "CouldNotFindAValueFor$In$ToWriteTheLiteralValueUse$Instead": "'${p1}' に {${p0}} の値が見つかりませんでした。 リテラル値を書き込むには、代わりに '{{${p2}}}' を使用します。",
  "MatchedMoreThanOneInstallBlock$": "複数のインストール ブロック [${p0}] が一致しました",
  "AcquiresEverythingReferencedByAProjectWithoutActivating": "アクティブ化せずに、プロジェクトによって参照されるすべてを取得する",
  "ThisAllowsTheConsumerToPredownloadToolsRequiredForAProject": "これにより、コンシューマーはプロジェクトに必要なツールを事前にダウンロードできます。",
  "UnableToFindProjectInFolderorParentFoldersFor$": "${p0} のフォルダー (または親フォルダー) にプロジェクトが見つかりません",
  "UnableToAcquireProject": "プロジェクトを取得できません",
  "AcquireArtifactsInTheRegistry": "レジストリ内の成果物を取得する",
  "ThisAllowsTheConsumerToAcquiredownloadAndUnpackArtifactsArtifactsMustBeActivatedToBeUsed": "これにより、コンシューマーは成果物を取得 (ダウンロードおよびパック解除) できます。成果物を使用するにはアクティブ化する必要があります",
  "NoArtifactsSpecified": "成果物が指定されていません",
  "MultiplePackagesSpecifiedButNotAnEqualNumberOf$Switches": "複数のパッケージが指定されましたが、${p0} スイッチの数が等しくありません",
  "NoArtifactsAreAcquired": "成果物は取得されません",
  "AllArtifactsAreAlreadyInstalled": "すべての成果物が既にインストールされています",
  "$ArtifactsInstalledSuccessfully": "${p0} 成果物が正常にインストールされました",
  "InstallationFailedStopping": "インストールに失敗しました -- 停止しています",
  "ActivatesTheToolsRequiredForAProject": "プロジェクトに必要なツールをアクティブ化する",
  "ThisAllowsTheConsumerToActivateTheToolsRequiredForAProjectIfTheToolsAreNotAlreadyInstalledThisWillForceThemToBeDownloadedAndInstalledBeforeActivation": "これにより、コンシューマーはプロジェクトに必要なツールをアクティブ化できます。ツールがまだインストールされていない場合は、アクティブ化する前にツールをダウンロードしてインストールする必要があります。",
  "AddsAnArtifactToTheProject": "プロジェクトに成果物を追加する",
  "ThisAllowsTheConsumerToAddAnArtifactToTheProjectThisWillActivateTheProjectAsWell": "これにより、コンシューマーはプロジェクトに成果物を追加できます。これにより、プロジェクトもアクティブになります。",
  "MultipleArtifactsSpecifiedButNotAnEqualNumberOf$Switches": "複数の成果物が指定されましたが、${p0} スイッチの数が等しくありません",
  "TriedToAddAnArtifact$$ButCouldNotDetermineTheRegistryToUse": "成果物 [${p0}]:${p1} を追加しようとしましたが、使用するレジストリを特定できませんでした。",
  "TriedToAddRegistry$As$ButItWasAlready$PleaseAdd$ToThisProjectManuallyAndReattempt": "レジストリ ${p0} を ${p1} として追加しようとしましたが、既に ${p2} でした。${p3} をこのプロジェクトに手動で追加して、再試行してください。",
  "RunvcpkgActivateToApplyToTheCurrentTerminal": "\\`vcpkg activate\\` を実行して現在のターミナルに適用する",
  "ManagesTheDownloadCache": "ダウンロードキャッシュを管理する",
  "DownloadsFolderCleared$": "ダウンロード フォルダーがクリアされました (${p0})",
  "cleansOutEverythingcacheInstalledArtifacts": "すべてを消去する (キャッシュ、インストールされた成果物)",
  "cleansOutTheDownloadsCache": "ダウンロード キャッシュを消去する",
  "removesAllTheArtifactsThatAreInstalled": "インストールされているすべての成果物を削除する",
  "cleansUp": "クリーンアップ",
  "AllowsTheUserToCleanOutTheCacheInstalledArtifactsEtc": "ユーザーがキャッシュ、インストールされた成果物などをクリアできるようにします。",
  "InstalledArtifactFolderCleared$": "インストールされた成果物フォルダーがクリアされました (${p0})",
  "CacheFolderCleared$": "キャッシュ フォルダーがクリアされました (${p0})",
  "DeactivatesTheCurrentSession": "現在のセッションを非アクティブ化する",
  "ThisAllowsTheConsumerToRemoveEnvironmentSettingsForTheCurrentlyActiveSession": "これにより、コンシューマーは現在アクティブなセッションの環境設定を削除できます。",
  "DeletesAnArtifactFromTheArtifactFolder": "成果物フォルダーから成果物を削除する",
  "ThisAllowsTheConsumerToRemoveAnArtifactFromDisk": "これにより、コンシューマーはディスクから成果物を削除できます。",
  "DeletingArtifact$From$": "${p1} から成果物 ${p0} を削除しています",
  "FindArtifactsInTheRegistry": "レジストリで成果物を見つける",
  "ThisAllowsTheUserToFindArtifactsBasedOnSomeCriteria": "これにより、ユーザーはいくつかの基準に基づいて成果物を見つけることができます。",
  "NoArtifactsFoundMatchingCriteria$": "基準に一致する成果物が見つかりませんでした: ${p0}",
  "GeneratesMSBuildPropertiesForAnActivationWithoutDownloadingAnythingForAProject": "プロジェクト用に何もダウンロードせずに、アクティブ化用の MSBuild プロパティを生成する",
  "generatemsbuildpropsRequiresmsbuildprops": "generate-msbuild-props requires --msbuild-props",
  "UnableToActivateProject": "プロジェクトをアクティブ化できません",
  "theNameOfTheCommandForWhichYouWantHelp": "ヘルプが必要なコマンドの名前",
  "getHelpOn$OrOneOfTheCommands": "${p0} またはコマンドの 1 つに関するヘルプを表示する",
  "GetsDetailedHelpOn$OrOneOfTheCommands": "${p0} またはコマンドの 1 つに関する詳細なヘルプを表示する",
  "Arguments": "引数:",
  "Use$ToGetTheListOfAvailableCommands": "${p0} を使用して、使用可能なコマンドのリストを取得します",
  "Usage": "使い方",
  "$COMMANDargumentsswitches": "${p0} コマンド <引数> [--switches]",
  "Available$Commands": "利用可能な ${p0} コマンド:",
  "ListsTheArtifacts": "成果物を一覧表示する",
  "ThisAllowsTheConsumerToListArtifacts": "これにより、コンシューマーは成果物トを一覧表示できます。",
  "regenerateTheIndexForARegistry": "レジストリのインデックスを再生成する",
  "ThisAllowsTheUserToRegenerateThe$FilesForA$Registry": "これにより、ユーザーは ${p1} レジストリ ${p0} ファイルを再生成できます。",
  "RegeneratingIndexFor$": "${p0} のインデックスを再生成しています",
  "RegenerationCompleteIndexContains$MetadataFiles": "再生成が完了しました。インデックスに ${p0} メタデータ ファイルが含まれています",
  "Registry$ContainsNoArtifacts": "レジストリ: '${p0}' には成果物が含まれていません。",
  "error$": "エラー ${p0}: ",
  "RemovesAnArtifactFromAProject": "プロジェクトから成果物を削除する",
  "ThisAllowsTheConsumerToRemoveAnArtifactFromTheProjectForcesReactivationInThisWindow": "これにより、コンシューマーはプロジェクトから成果物を削除できます。このウィンドウで強制的に再アクティブ化します。",
  "Removing$FromProjectManifest": "プロジェクト マニフェストから ${p0} を削除しています",
  "unableToFindArtifact$InTheProjectManifest": "プロジェクト マニフェストで成果物 ${p0} が見つかりません",
  "Updated$ItContains$MetadataFiles": "${p0} を更新しました。これには ${p1} メタデータ ファイルが含まれています。",
  "UnableToDownload$": "${p0} をダウンロードできません。",
  "$CouldNotBeUpdatedItCouldBeMalformed": "${p0} を更新できませんでした。形式が正しくない可能性があります。",
  "updateTheRegistryFromTheRemote": "リモートからレジストリを更新する",
  "ThisDownloadsTheLatestContentsOfTheRegistryFromTheRemoteService": "これにより、レジストリの最新の内容がリモート サービスからダウンロードされます。",
  "TheXupdateregistryCommandDownloadsNewRegistryInformationAndThusCannotBeUsedWithLocalRegistriesDidYouMeanXregenerate$": "x-update-registry コマンドは新しいレジストリ情報をダウンロードするため、ローカル レジストリでは使用できません。x-regenerate ${p0}$ のことですか?",
  "UnableToFindRegistry$": "レジストリ ${p0} が見つかりません。",
  "InstantlyActivatesAnArtifactOutsideOfTheProject": "プロジェクト外の成果物を即座にアクティブ化する",
  "ThisWillInstantlyActivateAnArtifact": "これにより、成果物が即座にアクティブになります。",
  "NoArtifactsAreBeingAcquired": "成果物は取得されていません",
  "UpdateAllKnownArtifactRegistries": "すべての既知の成果物レジストリを更新する",
  "removesAllFilesInTheLocalCache": "ローカル キャッシュ内のすべてのファイルを削除します",
  "enablesDebugModeDisplaysInternalMesssagesAboutHow$Works": "デバッグ モードを有効にし、${p0} のしくみに関する内部メッセージを表示します",
  "proceedsWithThepotentiallyDangerousActionWithoutConfirmation": "確認せずに (潜在的に危険な) アクションを続行する",
  "showsTheinstalledArtifacts": "_installed_ 成果物を表示する",
  "DumpEnvironmentVariablesAndOtherPropertiesToAJsonFileWithThePathProvidedByTheUser": "ユーザーが指定したパスを使用して、環境変数とその他のプロパティを json ファイルにダンプします。",
  "FullPathToTheFileInWhichMSBuildPropertiesWillBeWritten": "MSBuild プロパティが書き込まれるファイルへの完全なパス。",
  "ApplyAnyDeprecationFixups": "非推奨の修正プログラムを適用します。",
  "overrideThePathToTheProjectFolder": "プロジェクト フォルダーへのパスをオーバーライドする",
  "UnableToFindProjectEnvironment$": "プロジェクト環境 ${p0} が見つかりません",
  "enablesVerboseModeDisplaysVerboseMesssagesAboutTheProcess": "詳細モードを有効にし、プロセスに関する詳細メッセージを表示します",
  "aVersionOrVersionRangeToMatch": "一致するバージョンまたはバージョンの範囲"
}
