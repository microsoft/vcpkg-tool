{
  "AddArtifactOnlyOne": "'{command_line}' は一度に 1 つの成果物のみを追加できます。",
  "AddCommandFirstArg": "追加する最初のパラメーターは 'artifact' または 'port' である必要があります。",
  "AddFirstArgument": "「{command_line}」の最初の引数は「artifact」または「port」である必要があります。",
  "AddPortRequiresManifest": "'{command_line}' にはアクティブなマニフェスト ファイルが必要です。",
  "AddPortSucceeded": "vcpkg.json ファイルへのポートの追加に成功しました。",
  "AddRecurseOption": "削除する場合は、--recurse オプションを使用してコマンドを実行します。",
  "AddTripletExpressionNotAllowed": "ここではトリプレット式は使用できません。代わりに、「{package_name}:{triplet}」を「{package_name}」に変更することができます。",
  "AddVersionAddedVersionToFile": "バージョン {version} を {path} に追加しました",
  "AddVersionCommitChangesReminder": "変更をコミットしたことを覚えていますか?",
  "AddVersionCommitResultReminder": "結果をコミットすることを忘れないでください。",
  "AddVersionDetectLocalChangesError": "Git 状態出力で予期しない形式が存在するため、ローカルの変更の検出をスキップしています",
  "AddVersionFileNotFound": "必要なファイル {path} が見つかりませんでした",
  "AddVersionFormatPortSuggestion": "'{command_line}' を実行してファイルをフォーマットします",
  "AddVersionIgnoringOptionAll": "ポート名引数が指定されたため、--{option} を無視しています",
  "AddVersionLoadPortFailed": "ポート {package_name} を読み込めません",
  "AddVersionNewFile": "(新しいファイル)",
  "AddVersionNewShaIs": "新しい SHA: {value}",
  "AddVersionNoFilesUpdated": "更新されたファイルはありません",
  "AddVersionNoFilesUpdatedForPort": "{package_name} のファイルが更新されませんでした",
  "AddVersionNoGitSha": "ポート {package_name} の SHA を取得できません",
  "AddVersionOldShaIs": "古い SHA: {value}",
  "AddVersionOverwriteOptionSuggestion": "--{option} を使用してこのチェックをバイパスする",
  "AddVersionPortDoesNotExist": "{package_name} は存在しません",
  "AddVersionPortFilesShaChanged": "{package_name} のチェックイン ファイルが変更されましたが、バージョンは更新されませんでした",
  "AddVersionPortFilesShaUnchanged": "{package_name} のチェックイン ファイルはバージョン {version} から変更されていません",
  "AddVersionPortHasImproperFormat": "{package_name} が正しく書式設定されていません",
  "AddVersionSuggestNewVersionScheme": "ポート \"{new_scheme package_name}\" の \"{old_scheme}\" ではなく、バージョン スキーム \"{package_name}\" を使用します。\n--{option} を使用してこのチェックを無効にします。",
  "AddVersionUnableToParseVersionsFile": "バージョン ファイル {path} を解析できません",
  "AddVersionUncommittedChanges": "{package_name} にコミットされていない変更があります",
  "AddVersionUpdateVersionReminder": "バージョンまたはポートのバージョンを更新したことを覚えていますか?",
  "AddVersionUseOptionAll": "引数のない {command_name} では、すべてのポート バージョンを一度に更新するために --{option} を渡す必要があります",
  "AddVersionVersionAlreadyInFile": "バージョン {version} は既に {path} にあります",
  "AddVersionVersionIs": "バージョン: {version}",
  "AddingCompletionEntry": "vcpkg 補完エントリを {path} に追加しています。",
  "AdditionalPackagesToRemove": "この操作を完了するには、追加のパッケージ (*) を削除する必要があります。",
  "AllFormatArgsRawArgument": "書式指定文字列 \"{value}\" に未加工の書式引数が含まれています",
  "AllFormatArgsUnbalancedBraces": "書式指定文字列 \"{value}\" の大かっこが対応していません",
  "AllPackagesAreUpdated": "インストールされているすべてのパッケージは、ローカル ポート ファイルで最新の状態です。",
  "AlreadyInstalled": "{spec} は既にインストールされています",
  "AlreadyInstalledNotHead": "{spec} は既にインストールされています -- HEAD からビルドしていません",
  "AnotherInstallationInProgress": "コンピューターで別のインストールが進行中です。再試行する前に 6 をスリープ状態にします。",
  "AppliedUserIntegration": "この vcpkg ルートにユーザー全体の統合を適用しました。",
  "ArtifactsOptionIncompatibility": "--{option} は成果物の検索には影響しません。",
  "AssetSourcesArg": "資産キャッシュのソースを追加します。'vcpkg help assetcaching' を参照してください。",
  "AttemptingToFetchPackagesFromVendor": "{vendor} から {count} 個のパッケージをフェッチしようとしています",
  "AuthenticationMayRequireManualAction": "1 つ以上の {vendor} 資格情報プロバイダーが手動操作を要求しました。対話機能を許可するには、バイナリ ソース 'interactive' を追加します。",
  "AutoSettingEnvVar": "-- \"{env_var}\"環境変数を自動的に \"{url}\"に設定しています。",
  "AutomaticLinkingForMSBuildProjects": "すべての MSBuild C++ プロジェクトで、インストールされているすべてのライブラリの #include を実行できるようになりました。リンクは自動的に処理されます。新しいライブラリをインストールすると、すぐに利用できるようになります。",
  "AvailableArchitectureTriplets": "Available architecture triplets:",
  "AvailableHelpTopics": "Available help topics:",
  "BinarySourcesArg": "バイナリ キャッシュのソースを追加します。'vcpkg help binarycaching' を参照してください。",
  "BothYesAndNoOptionSpecifiedError": "--no-{option} と --{option} の両方を指定できません。",
  "BuildAlreadyInstalled": "{spec} は既にインストールされています。ビルドする前に {spec} を削除してください。",
  "BuildDependenciesMissing": "ビルド コマンドには、すべての依存関係が既にインストールされている必要があります。\n次の依存関係がありません:",
  "BuildResultBuildFailed": "BUILD_FAILED",
  "BuildResultCacheMissing": "CACHE_MISSING",
  "BuildResultCascadeDueToMissingDependencies": "CASCADED_DUE_TO_MISSING_DEPENDENCIES",
  "BuildResultDownloaded": "ダウンロード済み",
  "BuildResultExcluded": "除外",
  "BuildResultFileConflicts": "FILE_CONFLICTS",
  "BuildResultPostBuildChecksFailed": "POST_BUILD_CHECKS_FAILED",
  "BuildResultRemoved": "削除済み",
  "BuildResultSucceeded": "成功",
  "BuildResultSummaryHeader": "{triplet} の概要",
  "BuildResultSummaryLine": "{build_result}: {count}",
  "BuildTreesRootDir": "(試験段階) buildtrees ルート ディレクトリを指定します。",
  "BuildTroubleshootingMessage1": "'git pull' と 'vcpkg update' で最新のポート ファイルを使用していることを確認してください。\nその後、次の場所で既知の問題を確認します:",
  "BuildTroubleshootingMessage2": "次の場所で新しい問題を送信できます:",
  "BuildTroubleshootingMessage3": "バグ報告のタイトルに「[{package_name}] ビルド エラー」を含め、バグの説明に次のバージョン情報を含め、関連する失敗ログを上記から添付します。",
  "BuildTroubleshootingMessage4": "問題を報告するときは、{path} の事前に入力されたテンプレートを使用してください。",
  "BuildingFromHead": "HEAD から {spec} をビルドしています...",
  "BuildingPackage": "{spec} をビルドしています...",
  "BuildingPackageFailed": "{spec} のビルドに失敗しました: {build_result}",
  "BuildingPackageFailedDueToMissingDeps": "次の依存関係がないためです。",
  "BuiltInTriplets": "vcpkg built-in triplets:",
  "CMakeTargetsUsage": "{package_name} は CMake ターゲットを提供します:",
  "CMakeTargetsUsageHeuristicMessage": "# これはヒューリスティックに生成され、正しくない可能性があります",
  "CMakeToolChainFile": "CMake プロジェクトでは次を使用する必要があります: \"-DCMAKE_TOOLCHAIN_FILE={path}\"",
  "ChecksFailedCheck": "vcpkg がクラッシュしました。その他の詳細はありません。",
  "ChecksUnreachableCode": "到達できないコードに達しました",
  "ChecksUpdateVcpkg": "bootstrap-vcpkg を再実行して vcpkg を更新すると、このエラーが解決される可能性があります。",
  "CiBaselineAllowUnexpectedPassingRequiresBaseline": "--allow-unexpected-passing は、--ci-baseline を介してベースラインが指定されている場合にのみ使用できます。",
  "CiBaselineDisallowedCascade": "回帰: {spec} がカスケードされましたが、渡す必要があります。({path})。",
  "CiBaselineRegression": "回帰: {spec} は {build_result} で失敗しました。必要な場合は、{spec}=fail を {path} に追加します。",
  "CiBaselineRegressionHeader": "回帰:",
  "CiBaselineUnexpectedPass": "成功、失敗リストから削除: {spec} ({path})。",
  "ClearingContents": "{path} の内容をクリアしています",
  "CmakeTargetsExcluded": "注: 追加の {count} 件のターゲットは表示されません。",
  "CommandFailed": "コマンド: \n{command_line}\nに失敗しました。次の結果が返されました:",
  "CommunityTriplets": "VCPKG community triplets:",
  "ComparingUtf8Decoders": "Comparing Utf8Decoders with different provenance; this is always an error",
  "CompressFolderFailed": "フォルダー \"{path}\":を圧縮できませんでした:",
  "ComputingInstallPlan": "インストール プランを計算しています...",
  "ConflictingFiles": "次のファイルはすでに {path} にインストールされており、{spec} と競合しています",
  "ConflictingValuesForOption": "'--{option}' に指定された値が競合しています。",
  "ConstraintViolation": "以下の制約違反が見つかりました。",
  "ContinueCodeUnitInStart": "found continue code unit in start position",
  "ControlAndManifestFilesPresent": "マニフェスト ファイルとコントロール ファイルの両方がポート ディレクトリに存在します: {path}",
  "CopyrightIsDir": "`{path}` はディレクトリとして使用されなくなりました。",
  "CorruptedDatabase": "データベースが破損しています。",
  "CouldNotDeduceNugetIdAndVersion": "ファイル名 {path} から nuget ID とバージョンを推測できませんでした",
  "CreateFailureLogsDir": "エラー ログ出力ディレクトリ {path} を作成しています",
  "CreatedNuGetPackage": "作成された nupkg: \"{path}\"",
  "CurlReportedUnexpectedResults": "curl から vcpkg に対して予期しない結果が報告されました。vcpkg を続行できません。\n次のテキストに機密情報がないか確認して、Microsoft/vcpkg GitHub で問題を作成し解決に役立ててください。\ncmd: {command_line}\n=== curl の出力 ===\n{actual}\n=== curl の出力の終わり ===",
  "DateTableHeader": "日付",
  "DefaultBrowserLaunched": "既定のブラウザーで {url} が開かれました。",
  "DefaultFlag": "既定で --{option} をオンにしています。",
  "DefaultPathToBinaries": "システム設定に基づいて、バイナリを格納するための既定のパスは “{path}” です。これは、Windows では %LOCALAPPDATA%/%APPDATA% を参照し、他のプラットフォームでは $XDG_CACHE_HOME または $HOME を参照します。",
  "DetectCompilerHash": "トリプレット「{triplet}」のコンパイラ ハッシュを検出しています...",
  "DocumentedFieldsSuggestUpdate": "これらのフィールドを認識する必要がある場合は、vcpkg ツールの更新をお試しください。",
  "DownloadAvailable": "このツールのダウンロード可能なコピーを使用でき、{env_var} の設定を解除すると使用できます。",
  "DownloadRootsDir": "ダウンロード ルート ディレクトリを指定します。\n(既定値: {env_var})",
  "DownloadedSources": "{spec} 用にダウンロードされたソース",
  "DownloadingVcpkgCeBundle": "vcpkg-ce バンドル {version} をダウンロードしています...",
  "DownloadingVcpkgCeBundleLatest": "最新の vcpkg-ce バンドルをダウンロードしています...",
  "DownloadingVcpkgStandaloneBundle": "スタンドアロン バンドル {version} をダウンロードしています。",
  "DownloadingVcpkgStandaloneBundleLatest": "最新のスタンドアロン バンドルをダウンロードしています。",
  "DuplicateCommandOption": "オプション --{option} は 1 回のみ渡すことができます。",
  "DuplicateOptions": "'--{value}' が複数回指定されました。",
  "ElapsedForPackage": "{spec} の処理の経過時間: {elapsed}",
  "ElapsedInstallTime": "経過した総時間: {count}",
  "ElapsedTimeForChecks": "成功/失敗を判断する時間: {elapsed}",
  "EmailVcpkgTeam": "フィードバックは {url} にメールでお送りください。",
  "EmptyArg": "オプション --{option} には、空でない引数を渡す必要があります。",
  "EmptyLicenseExpression": "SPDX ライセンス式が空でした。",
  "EndOfStringInCodeUnit": "found end of string in middle of code point",
  "EnvStrFailedToExtract": "次の環境文字列を展開できませんでした:",
  "ErrorDetectingCompilerInfo": "コンパイラ情報の検出中:\n\"{path}\"のログ ファイルの内容は次のとおりです:",
  "ErrorIndividualPackagesUnsupported": "マニフェスト モードでは、「vcpkg install」は個々のパッケージ引数をサポートしていません。\n追加のパッケージをインストールするには、vcpkg.json を編集し、パッケージ引数を指定せずに「vcpkg install」を実行してください。",
  "ErrorInvalidClassicModeOption": "オプション --{option}はクラシック モードではサポートされていません。マニフェストが見つかりませんでした。",
  "ErrorInvalidManifestModeOption": "オプション --{option}はマニフェスト モードではサポートされていません。",
  "ErrorMessage": "エラー: ",
  "ErrorMessageMustUsePrintError": "{value}という名前のメッセージは「error:」で始まります。代わりに、コードの先頭に「ErrorMessage」を追加するように変更する必要があります。",
  "ErrorMissingVcpkgRoot": "vcpkg-root を検出できませんでした。作成した vcpkg のコピーを使用する場合は、VCPKG_ROOT 環境変数を定義して、https://github.com/Microsoft/vcpkg の複製されたコピーを指すようにする必要があります。",
  "ErrorNoVSInstance": "トリプレット内 {triplet}: 有効な Visual Studio インスタンスが見つかりません",
  "ErrorNoVSInstanceAt": "「{path}」で",
  "ErrorNoVSInstanceFullVersion": "ツールセットのバージョン プレフィックス {version} で",
  "ErrorNoVSInstanceVersion": "ツールセット バージョン {version} で",
  "ErrorParsingBinaryParagraph": "{spec} のバイナリ段落の解析中",
  "ErrorRequireBaseline": "この vcpkg インスタンスでは、ポートと対話するために指定されたベースラインを持つマニフェストが必要です。マニフェストに「builtin-baseline」を追加するか、既定のレジストリを再定義する「vcpkg-configuration.json」を追加してください。",
  "ErrorRequirePackagesList": "「vcpkg install」には、クラシック モードでインストールするパッケージのリストが必要です。",
  "ErrorUnableToDetectCompilerInfo": "vcpkg はアクティブなコンパイラの情報を検出できませんでした。CMake エラーの出力については、上記を参照してください。",
  "ErrorVcvarsUnsupported": "トリプレット内 {triplet}: Visual Studio の開発者プロンプトの使用は、Windows 以外のホストではサポートされていません。\nトリプレット ファイルに「VCPKG_CMAKE_SYSTEM_NAME」または「VCPKG_CHAINLOAD_TOOLCHAIN_FILE」を定義してください。",
  "ErrorVsCodeNotFound": "Visual Studio Code が見つかりませんでした。環境変数「{env_var}」が設定されていないか、設定された値が無効です。",
  "ErrorVsCodeNotFoundPathExamined": "次のパスが調査されました:",
  "ErrorWhileParsing": "{path} の解析中にエラーが発生しました。",
  "ErrorWhileWriting": "{path} の書き込み中にエラーが発生しました",
  "ErrorsFound": "次のエラーが見つかりました:",
  "ExceededRecursionDepth": "再帰深度を超過しました。",
  "ExcludedPackage": "{spec} を除外しました",
  "ExcludedPackages": "次のパッケージは除外されています。",
  "ExpectedAtMostOneSetOfTags": "Found {count} sets of {old_value}.*{new_value} but expected at most 1, in block:\n{value}",
  "ExpectedCascadeFailure": "{expected} カスケード エラーが予期されていましたが、{actual} カスケード エラーが発生しました。",
  "ExpectedCharacterHere": "ここには '{expected}' が必要です",
  "ExpectedFailOrSkip": "'fail'、'skip'、または 'pass' が必要です",
  "ExpectedOneSetOfTags": "Found {count} sets of {old_value}.*{new_value} but expected exactly 1, in block:\n{value}",
  "ExpectedPortName": "ここにはポート名が必要です",
  "ExpectedStatusField": "ステータス段落に 'status' フィールドが必要です",
  "ExpectedTripletName": "ここにはトリプレット名が必要です",
  "ExpectedValueForOption": "--{option} の後に値が必要です。",
  "ExportingPackage": "{package_name} のエクスポート...",
  "ExtendedDocumentationAtUrl": "'{url}' で利用できる拡張ドキュメント。",
  "FailedToExtract": "\"{path}\" を抽出できませんでした:",
  "FailedToFindPortFeature": "{spec} で {feature} が見つかりませんでした。",
  "FailedToFormatMissingFile": "書式設定するファイルがありません。\n--all または明示的なファイルを渡して、書式設定または変換してください。",
  "FailedToLoadInstalledManifest": "The control or manifest file for {spec} could not be loaded due to the following error. Please remove {spec} and try again.",
  "FailedToLoadPort": "{path} からポート {package_name} を読み込めませんでした",
  "FailedToLoadPortFrom": "{path} からポートを読み込めませんでした",
  "FailedToLocateSpec": "グラフで以下の仕様の検索に失敗しました: {spec}",
  "FailedToObtainDependencyVersion": "目的の依存関係のバージョンが見つかりません。",
  "FailedToObtainLocalPortGitSha": "ローカル ポートの Git SAS を取得できませんでした。",
  "FailedToObtainPackageVersion": "目的のパッケージ バージョンが見つかりません。",
  "FailedToParseCMakeConsoleOut": "CMake コンソール出力を解析してブロックの開始/終了マーカーを見つけることができませんでした。",
  "FailedToParseControl": "コントロール ファイルを解析できませんでした: {path}",
  "FailedToParseJson": "JSON ファイルを解析できませんでした: {path}",
  "FailedToParseManifest": "マニフェスト ファイルを解析できませんでした: {path}",
  "FailedToParseSerializedBinParagraph": "[サニティ チェック] シリアル化されたバイナリ段落を解析できませんでした。\nhttps://github.com/microsoft/vcpkg でイシューを開き、次の出力を含めてください。\n{error_msg}\nシリアル化されたバイナリ段落:",
  "FailedToProvisionCe": "vcpkg-ce をプロビジョニングできませんでした。",
  "FailedToRead": "{path} を読み取ることができませんでした: {error_msg}",
  "FailedToReadParagraph": "{path} から段落を読み取ることができませんでした",
  "FailedToRemoveControl": "コントロール ファイル {path} を削除できませんでした",
  "FailedToRunToolToDetermineVersion": "\"{path}\" を実行して {tool_name} バージョンを特定できませんでした。",
  "FailedToStoreBackToMirror": "ミラーに保存できませんでした:",
  "FailedToStoreBinaryCache": "バイナリ キャッシュ {path} を格納できませんでした",
  "FailedToWriteManifest": "マニフェスト ファイル {path} を書き込めませんでした",
  "FailedVendorAuthentication": "1 つ以上の {vendor} 資格情報プロバイダーを認証できませんでした。資格情報を提供する方法の詳細については、'{url}' を参照してください。",
  "FeedbackAppreciated": "フィードバックをお送りいただきありがとうございました。",
  "FileNotFound": "{path}: ファイルが見つかりません",
  "FileSystemOperationFailed": "ファイル システム操作に失敗しました:",
  "FishCompletion": "vcpkg fish 補完は既に \"{path}\" に追加されています。",
  "FollowingPackagesMissingControl": "次のパッケージには有効な CONTROL または vcpkg.json がありません:",
  "FollowingPackagesNotInstalled": "次のパッケージはインストールされていません:",
  "FollowingPackagesUpgraded": "次のパッケージは最新です:",
  "ForceSystemBinariesOnWeirdPlatforms": "環境変数 VCPKG_FORCE_SYSTEM_BINARIES を arm、s390x、および ppc64le プラットフォームで設定する必要があります。",
  "FormattedParseMessageExpression": "式: {value}",
  "GenerateMsgErrorParsingFormatArgs": "{value} の書式指定文字列を解析しています:",
  "GenerateMsgIncorrectComment": "メッセージ {value} のコメントが正しくありません:",
  "GenerateMsgNoArgumentValue": "コメントで指定されている{{{value}}}がメッセージ内にありません。",
  "GenerateMsgNoCommentValue": "{{{value}}} がメッセージ内で使用されていますが、コメントに含まれていません。",
  "GetParseFailureInfo": "'--debug' を使用して、解析エラーに関する詳細情報を取得します。",
  "GitCommandFailed": "{command_line} を実行できませんでした",
  "GitStatusOutputExpectedFileName": "ファイル名が必要です",
  "GitStatusOutputExpectedNewLine": "改行が必要です",
  "GitStatusOutputExpectedRenameOrNewline": "名前が変更されたファイルまたは改行が必要です",
  "GitStatusUnknownFileStatus": "不明なファイルの状態: {value}",
  "GitUnexpectedCommandOutput": "予期しない Git 出力",
  "GraphCycleDetected": "{package_name} のグラフ内で循環が検出されました:",
  "HashFileFailureToRead": "ハッシュのためにファイル \"{path}\" を読み取れませんでした: ",
  "HeaderOnlyUsage": "{package_name} はヘッダーのみであり、CMake から次の方法で使用できます:",
  "HelpBuiltinBase": "The baseline references a commit within the vcpkg repository that establishes a minimum version on every dependency in the graph. For example, if no other constraints are specified (directly or transitively), then the version will resolve to the baseline of the top level manifest. Baselines of transitive dependencies are ignored.",
  "HelpContactCommand": "フィードバックを送信するための連絡先情報を表示します。",
  "HelpCreateCommand": "新しいポートを作成します。",
  "HelpDependInfoCommand": "ポートの依存関係の一覧を表示します。",
  "HelpEditCommand": "編集用のポートを開きます (エディター プログラムを設定するには、環境変数 '{env_var}' を使用します。既定値は 'code' です)。",
  "HelpEnvCommand": "開発またはコンパイル用にクリーンなシェル環境を作成します。",
  "HelpExampleCommand": "ヘルプ (例を含む) については、付属の README.md とドキュメント フォルダーを参照してください。",
  "HelpExampleManifest": "Example manifest:",
  "HelpExportCommand": "パッケージをエクスポートします。",
  "HelpFormatManifestCommand": "すべての vcpkg.json ファイルをフォーマットします。vcpkg にコミットする前にこれを実行します。",
  "HelpHashCommand": "特定のアルゴリズム (既定の SHA512) でファイルをハッシュします。",
  "HelpInitializeRegistryCommand": "ディレクトリ <path> 内のレジストリを初期化します。",
  "HelpInstallCommand": "パッケージをインストールします。",
  "HelpListCommand": "インストールされているパッケージを一覧表示します。",
  "HelpManifestConstraints": "Manifests can place three kinds of constraints upon the versions used",
  "HelpMinVersion": "Vcpkg will select the minimum version found that matches all applicable constraints, including the version from the baseline specified at top-level as well as any \"version>=\" constraints in the graph.",
  "HelpOverrides": "When used as the top-level manifest (such as when running `vcpkg install` in the directory), overrides allow a manifest to short-circuit dependency resolution and specify exactly the version to use. These can be used to handle version conflicts, such as with `version-string` dependencies. They will not be considered when transitively depended upon.",
  "HelpOwnsCommand": "インストールされているパッケージ内のファイルを検索します。",
  "HelpPackagePublisher": "Additionally, package publishers can use \"version>=\" constraints to ensure that consumers are using at least a certain minimum version of a given dependency. For example, if a library needs an API added to boost-asio in 1.70, a \"version>=\" constraint will ensure transitive users use a sufficient version even in the face of individual version overrides or cross-registry references.",
  "HelpPortVersionScheme": "Each version additionally has a \"port-version\" which is a nonnegative integer. When rendered as text, the port version (if nonzero) is added as a suffix to the primary version text separated by a hash (#). Port-versions are sorted lexographically after the primary version text, for example:\n1.0.0 < 1.0.0#1 < 1.0.1 < 1.0.1#5 < 2.0.0",
  "HelpRemoveCommand": "パッケージをアンインストールします。",
  "HelpRemoveOutdatedCommand": "期限切れのパッケージをすべてアンインストールします。",
  "HelpResponseFileCommand": "応答ファイルを指定して、追加のパラメーターを指定します。",
  "HelpSearchCommand": "ビルド可能なパッケージを検索します。",
  "HelpTopicCommand": "特定のトピックのヘルプを表示します。",
  "HelpTopicsCommand": "ヘルプ トピックの一覧を表示します。",
  "HelpUpdateBaseline": "The best approach to keep your libraries up to date, the best approach is to update your baseline reference. This will ensure all packages, including transitive ones, are updated. However if you need to update a package independently, you can use a \"version>=\" constraint.",
  "HelpUpdateCommand": "更新できるパッケージを一覧表示します。",
  "HelpUpgradeCommand": "古いパッケージをすべてリビルドします。",
  "HelpVersionCommand": "バージョン情報を表示します。",
  "HelpVersionDateScheme": "A date (2021-01-01.5)",
  "HelpVersionGreater": "Within the \"dependencies\" field, each dependency can have a minimum constraint listed. These minimum constraints will be used when transitively depending upon this library. A minimum port-version can additionally be specified with a '#' suffix.",
  "HelpVersionScheme": "A dot-separated sequence of numbers (1.2.3.4)",
  "HelpVersionSchemes": "The following versioning schemes are accepted.",
  "HelpVersionSemverScheme": "A Semantic Version 2.0 (2.1.0-rc2)",
  "HelpVersionStringScheme": "An exact, incomparable version (Vista)",
  "HelpVersioning": "Versioning allows you to deterministically control the precise revisions of dependencies used by your project from within your manifest file.",
  "IllegalFeatures": "このコンテキストでは機能のリストは許可されていません",
  "IllegalPlatformSpec": "プラットフォーム修飾子はこのコンテキストでは許可されていません",
  "ImproperShaLength": "SHA512 は 128 文字の 16 進文字である必要があります: {value}",
  "IncorrectNumberOfArgs": "'{command_name}' には '{expected}' 引数が必要ですが、'{actual}' が指定されました。",
  "IncrementedUtf8Decoder": "Incremented Utf8Decoder at the end of the string",
  "InfoSetEnvVar": "環境変数「{env_var}」を選択したエディターに設定することもできます。",
  "InitRegistryFailedNoRepo": "これは Git リポジトリのルートではないため、{path} にレジストリを作成できませんでした。\n'git init {command_line}' を使用して、このフォルダーに Git リポジトリを作成します。",
  "InstallFailed": "失敗しました: {path}: {error_msg}",
  "InstallPackageInstruction": "プロジェクトを開いて、[ツール] -> [NuGet パッケージ マネージャー] -> [パッケージ マネージャー コンソール] に移動し、次を貼り付けます:\n Install-Package \"{value}\" -Source \"{path}\"",
  "InstallRootDir": "(試験段階) インストール ルート ディレクトリを指定します。",
  "InstallWithSystemManager": "このツールは、システム パッケージ マネージャーを使用してインストールできる場合があります。",
  "InstallWithSystemManagerMono": "Ubuntu 18.04 のユーザーは、{url} で入手可能な、新しいバージョンの mono が必要な場合があります。",
  "InstallWithSystemManagerPkg": "このツールは、システム パッケージ マネージャー ({command_line}) を使用してインストールできる場合があります。",
  "InstalledBy": "{path} でインストール済み",
  "InstalledPackages": "次のパッケージは既にインストールされています。",
  "InstalledRequestedPackages": "要求されたすべてのパッケージが現時点でインストール済みです。",
  "InstallingFromLocation": "-- 次の場所からポートをインストールしています: {path}",
  "InstallingPackage": "{action_index}/{count} {spec} をインストールしています...",
  "IntegrationFailed": "統合は適用されませんでした。",
  "InternalCICommand": "vcpkg CI は、非互換性に変更されるか、いつでも削除できる内部コマンドです。",
  "InternalErrorMessage": "内部エラー: ",
  "InternalErrorMessageContact": "https://github.com/microsoft/vcpkg/issues/new?template=other-type-of-bug-report.md&labels=category:vcpkg-bug で問題を開き、問題を再現するための詳細な手順を確認してください。",
  "InvalidArgMustBeAnInt": "--{option} は整数である必要があります。",
  "InvalidArgMustBePositive": "--{option} は負でない必要があります。",
  "InvalidArgument": "無効な引数です",
  "InvalidArgumentRequiresAbsolutePath": "無効な引数: バイナリ構成文字列のバイナリ構成 '{binary_source}' パス引数は絶対である必要があります",
  "InvalidArgumentRequiresBaseUrl": "無効な引数: バイナリ構成 '{binary_source}' には、最初の引数として {base_url} ベース URL が必要です",
  "InvalidArgumentRequiresBaseUrlAndToken": "無効な引数: バイナリ構成 '{binary_source}' には、少なくともベース URL と SAS トークンが必要です",
  "InvalidArgumentRequiresNoneArguments": "無効な引数: バイナリ構成 '{binary_source}' は引数を受け取りません",
  "InvalidArgumentRequiresOneOrTwoArguments": "無効な引数: バイナリ構成 '{binary_source}' には 1 つまたは 2 つの引数が必要です",
  "InvalidArgumentRequiresPathArgument": "無効な引数: バイナリ構成 '{binary_source}' には少なくとも 1 つのパス引数が必要です",
  "InvalidArgumentRequiresPrefix": "無効な引数: バイナリ構成 '{binary_source}' には少なくとも 1 つのプレフィックスが必要です",
  "InvalidArgumentRequiresSingleArgument": "無効な引数: バイナリ構成 '{binary_source}' は 1 個を超える引数を受け取りません",
  "InvalidArgumentRequiresSingleStringArgument": "無効な引数: バイナリ構成 '{binary_source}' には 1 つの文字列引数が必要です",
  "InvalidArgumentRequiresSourceArgument": "無効な引数: バイナリ構成 '{binary_source}' には少なくとも 1 つのソース引数が必要です",
  "InvalidArgumentRequiresTwoOrThreeArguments": "無効な引数: バイナリ構成 '{binary_source}' には 2 つまたは 3 つの引数が必要です",
  "InvalidArgumentRequiresValidToken": "無効な引数: バイナリ構成 '{binary_source}' には、2 番目の引数として先頭に '?' がない SAS トークンが必要です",
  "InvalidBuildInfo": "パッケージの BUILD_INFO ファイルが無効です: {error_msg}",
  "InvalidCodePoint": "Invalid code point passed to utf8_encoded_code_point_count",
  "InvalidCodeUnit": "invalid code unit",
  "InvalidCommandArgSort": "--sort の値は、'lexicographical'、'topological'、'reverse' のいずれかである必要があります。",
  "InvalidCommitId": "無効なコミット ID {value}",
  "InvalidFileType": "失敗しました: {path} はファイルの種類を処理できません",
  "InvalidFilename": "ファイル名に無効な文字 {value} を含めることはできませんが、{path} を含みます",
  "InvalidFormatString": "無効な形式の文字列: {actual}",
  "InvalidLinkage": "リンケージの種類 {system_name} が無効です: [{value}]",
  "InvalidOptionForRemove": "'remove' はライブラリまたは '--outdated' のいずれかを受け入れます",
  "InvalidTriplet": "無効なトリプレット: {triplet}",
  "IrregularFile": "パスが通常のファイルではありませんでした: {path}",
  "JsonErrorMustBeAnObject": "\"{path}\" はオブジェクトである必要があります。",
  "JsonSwitch": "(試験段階) JSON 出力を要求します。",
  "LaunchingProgramFailed": "{tool_name} を起動しています:",
  "LicenseExpressionContainsExtraPlus": "SPDX ライセンス式に追加の `+` が含まれています。これらは、ライセンス識別子の直後にのみ許可されます。",
  "LicenseExpressionContainsInvalidCharacter": "SPDX ライセンス式に無効な文字が含まれています (0x{value:02X} `{value}`)。",
  "LicenseExpressionContainsUnicode": "SPDX ライセンス式には Unicode 文字 (U+{value:04X} `{pretty_value}`) が含まれていますが、これらの式は ASCII のみです。",
  "LicenseExpressionDocumentRefUnsupported": "現在の実装では、DocumentRef- SPDX 参照はサポートされていません。",
  "LicenseExpressionExpectCompoundFoundParen": "複合または文字列の末尾が必要です。かっこが 1 つ見つかりました。",
  "LicenseExpressionExpectCompoundFoundWith": "AND または OR のいずれかが必要です。WITH が見つかりました (WITH は、かっこで囲まれた式ではなく、ライセンス名の後にのみ許可されます)。",
  "LicenseExpressionExpectCompoundFoundWord": "AND または OR が必要ですが、ライセンス名または例外名が見つかりました: `{value}`。",
  "LicenseExpressionExpectCompoundOrWithFoundWord": "AND、OR、または WITH のいずれかが必要です。ライセンス名または例外名が見つかりました: `{value}`。",
  "LicenseExpressionExpectExceptionFoundCompound": "例外名が必要です。複合 {value} が見つかりました。",
  "LicenseExpressionExpectExceptionFoundEof": "例外名が必要です。文字列の末尾が見つかりました。",
  "LicenseExpressionExpectExceptionFoundParen": "例外名が必要です。かっこが 1 つ見つかりました。",
  "LicenseExpressionExpectLicenseFoundCompound": "ライセンス名が必要です。複合 {value} が見つかりました。",
  "LicenseExpressionExpectLicenseFoundEof": "ライセンス名が必要です。文字列の末尾が見つかりました。",
  "LicenseExpressionExpectLicenseFoundParen": "ライセンス名が必要です。かっこが 1 つ見つかりました。",
  "LicenseExpressionImbalancedParens": "右かっこがあるのに左かっこがありません。",
  "LicenseExpressionUnknownException": "不明なライセンス例外識別子 `{value}` です。既知の値は https://spdx.org/licenses/exceptions-index.html に一覧表示されます",
  "LicenseExpressionUnknownLicense": "不明なライセンス識別子 `{value}`。既知の値は https://spdx.org/licenses/ に一覧表示されます",
  "ListOfValidFieldsForControlFiles": "これは、CONTROL ファイルの有効なフィールドの一覧です (大文字と小文字が区別されます):",
  "LoadingCommunityTriplet": "-- [COMMUNITY] 以下からトリプレット構成を読み込んでいます: {path}",
  "LoadingDependencyInformation": "{count} 個のパッケージの依存関係情報を読み込んでいます...",
  "LoadingOverlayTriplet": "-- [OVERLAY] 以下からトリプレット構成を読み込んでいます: {path}",
  "LocalizedMessageMustNotContainIndents": "{value}という名前のメッセージにインデントが含まれているようです。このインデントは、LocalizedString::append_indent に変更する必要があります。",
  "LocalizedMessageMustNotEndWithNewline": "{value}という名前のメッセージは改行で終わり、ローカライズではなく書式設定によって追加される必要があります。",
  "ManifestConflict": "ポート \"{path}\" にマニフェストと CONTROL ファイルの両方が見つかりました。いずれかの名前を変更してください",
  "ManifestFormatCompleted": "マニフェスト ファイルの書式設定に成功しました。",
  "MismatchedFiles": "格納するファイルがハッシュと一致しません",
  "MismatchedNames": "名前が一致しませんでした: '{package_name}' != '{actual}'",
  "Missing7zHeader": "7z ヘッダーが見つかりません。",
  "MissingArgFormatManifest": "format-manifest に '--all' を指定せずに --convert-control が渡されました。\nこれでは何も実行されません。明示的に渡されたコントロール ファイルは自動的に変換されます。",
  "MissingDependency": "パッケージ {spec} はインストールされていますが、依存関係 {package_name} はインストールされていません。",
  "MissingExtension": "'{extension}' 拡張子がありません。",
  "MissingOption": "このコマンドには --{option} が必須です",
  "MissingPortSuggestPullRequest": "ポートが一覧にない場合は、問題を開くか、pull request を作成することを検討してください。",
  "MissmatchedBinParagraphs": "シリアル化されたバイナリ段落が、元のバイナリ段落と異なっていました。https://github.com/microsoft/vcpkg でイシューを開き、次の出力を含めてください。",
  "MonoInstructions": "Mono のインストールが不完全であることが原因である可能性があります。'sudo apt install mono-complete' を使用して、一部のシステムで Mono をフルで使用できます。Ubuntu 18.04 ユーザーについては、https://www.mono-project.com/download/stable/ で利用可能な新しいバージョンの Mono が必要な場合があります",
  "MsiexecFailedToExtract": "起動または終了コード {exit_code} とメッセージで \"{path}\" を抽出中に msiexec が失敗しました:",
  "MultiArch": "Multi-Arch は 'same' である必要がありますが、{option} でした",
  "MutuallyExclusiveOption": "--{value} は --{option} と共に使用できません。",
  "NavigateToNPS": "任意のブラウザーで {url} に移動してください。",
  "NewConfigurationAlreadyExists": "マニフェストを作成すると、{path} で vcpkg-configuration.json が上書きされます。",
  "NewManifestAlreadyExists": "マニフェストは既に {path} に存在します。",
  "NewNameCannotBeEmpty": "--name を空にすることはできません。",
  "NewOnlyOneVersionKind": "--version-relaxed、--version-date、--version-string のうちの 1 つだけを指定できます。",
  "NewSpecifyNameVersionOrApplication": "C++ ライブラリ用のマニフェストを作成するために --name と --version を指定するか、マニフェストをポートとして使用しないことを示すために --application を指定します。",
  "NewVersionCannotBeEmpty": "--version を空にすることはできません。",
  "NoArgumentsForOption": "オプション --{option} は引数を取りません。",
  "NoCachedPackages": "パッケージがキャッシュされていません。",
  "NoError": "no error",
  "NoInstalledPackages": "パッケージがインストールされていません。'検索' ということですか?",
  "NoLocalizationForMessages": "次のローカライズされたメッセージはありません: ",
  "NoOutdatedPackages": "期限切れのパッケージはありません。",
  "NoRegistryForPort": "ポート {package_name} に対してレジストリが構成されていません",
  "NoteMessage": "メモ: ",
  "NugetPackageFileSucceededButCreationFailed": "NuGet パッケージの作成に成功しましたが、.nupkg が生成されませんでした。次が必要です: \"{path}\"",
  "OptionMustBeInteger": "--{option} 値は整数である必要があります。",
  "OptionRequired": "--{option} オプションが必要です。",
  "OptionRequiresOption": "--{value} には --{option} が必須です",
  "OriginalBinParagraphHeader": "\n元のバイナリ段落",
  "OverlayPatchDir": "オーバーレイ パス \"{path}\" が存在し、ディレクトリである必要があります。",
  "OverlayTriplets": "Overlay triplets from {path} :",
  "OverwritingFile": "ファイル {path} はすでに存在しているため、上書きされます",
  "PackageAlreadyRemoved": "パッケージ {spec} を削除できません: すでに削除されています",
  "PackageFailedtWhileExtracting": "{path} の抽出中に '{value}' が失敗しました。",
  "PackageRootDir": "(試験段階) パッケージ ルート ディレクトリを指定します。",
  "PackagesToInstall": "次のパッケージが作成され、インストールされます。",
  "PackagesToInstallDirectly": "次のパッケージが直接インストールされます。",
  "PackagesToModify": "この操作を完了するために、追加のパッケージ (*) が変更されます。",
  "PackagesToRebuild": "次のパッケージが再構築されます。",
  "PackagesToRebuildSuggestRecurse": "上記のパッケージを再構築する場合は、--recurse オプションを使用してコマンドを実行します。",
  "PackagesToRemove": "次のパッケージが移動されます。",
  "PackingVendorFailed": "{vendor} のパッキングに失敗しました。詳細については、--debug を使用してください。",
  "PairedSurrogatesAreInvalid": "trailing surrogate following leading surrogate (paired surrogates are invalid)",
  "ParseControlErrorInfoInvalidFields": "次のフィールドが想定外でした:",
  "ParseControlErrorInfoMissingFields": "次のフィールドが見つかりませんでした:",
  "ParseControlErrorInfoTypesEntry": "{value}は{expected}である必要があります",
  "ParseControlErrorInfoWhileLoading": "{path}の読み込み中:",
  "ParseControlErrorInfoWrongTypeFields": "次のフィールドの型が正しくありません:",
  "PortDependencyConflict": "ポート {package_name} には、次のサポートされていない依存関係があります。",
  "PortNotInBaseline": "ベースラインにポート {package_name} のエントリが含まれていません",
  "PortSupportsField": "(supports: \"{supports_expression}\")",
  "PortTypeConflict": "{spec} のポートの種類は、インストールされているポート ファイルと使用可能なポート ファイルで異なります。\n{spec} を手動で削除してから、このコマンドを再実行してください。",
  "PortsAdded": "次の {count} 個のポートが追加されました。",
  "PortsNoDiff": "2 つのコミットの間にポートの変更点はありませんでした。",
  "PortsRemoved": "次の {count} 個のポートが削除されました。",
  "PortsUpdated": "\n次の {count} 個のポートが更新されました。",
  "PreviousIntegrationFileRemains": "以前の統合ファイルは削除されませんでした。",
  "ProcessorArchitectureMalformed": "%PROCESSOR_ARCHITECTURE% ({arch}) を有効な CPU アーキテクチャとして解析できませんでした。",
  "ProcessorArchitectureMissing": "必要な環境変数 %PROCESSOR_ARCHITECTURE% がありません。",
  "ProcessorArchitectureW6432Malformed": "%PROCESSOR_ARCHITEW6432% ({arch}) を有効な CPU アーキテクチャとして解析できませんでした。%PROCESSOR_ARCHITECTURE% にフォールバックしています。",
  "ProgramReturnedNonzeroExitCode": "{tool_name} が終了コード: ({exit_code}) で失敗しました。",
  "PushingVendorFailed": "{vendor} を \"{path}\" にプッシュできませんでした。詳細については、--debug を使用してください。",
  "RegistryCreated": "{path} にレジストリが正常に作成されました",
  "RemoveDependencies": "マニフェスト モードで依存関係を削除するには、マニフェスト (vcpkg.json) を編集して 'インストール' を実行します。",
  "RemovePackageConflict": "インストールされている別のパッケージが、一致しない要求の名前と一致します。{spec} のことですか?",
  "RemovingPackage": "{action_index}/{count} {spec} を削除しています",
  "ReplaceSecretsError": "シークレットの置換で次のエラーが発生しました: '{error_msg}'",
  "RestoredPackage": "\"{path}\" からパッケージを復元しました",
  "RestoredPackagesFromVendor": "{elapsed} の {value} から {count} パッケージを復元しました。--debug を使用して詳細を表示します。",
  "ResultsHeader": "結果",
  "SeeURL": "詳細については、{url} を参照してください。",
  "SerializedBinParagraphHeader": "\nシリアル化されたバイナリ段落",
  "SettingEnvVar": "-- \"{env_var}\"環境変数を\"{url}\"に設定しています。",
  "ShaPassedAsArgAndOption": "SHA512 は引数とオプションの両方として渡されました。これらのいずれかを渡すだけです。",
  "ShaPassedWithConflict": "SHA512 は渡されましたが、--skip-sha512 も渡されました。どちらか一方のみを実行してください。",
  "SkipClearingInvalidDir": "ディレクトリでなかったため、{path} のコンテンツのクリアをスキップしています。",
  "SourceFieldPortNameMismatch": "CONTROL ファイル内の 'Source' フィールド、または vcpkg.json ファイル内の \"name\" フィールドに名前 {package_name} があり、ポート ディレクトリ \"{path}\" と一致しません。",
  "SpecifiedFeatureTurnedOff": "'{command_name}'機能は明確に無効になっていますが、--{option} が指定されました。",
  "SpecifyDirectoriesContaining": "トリプレット ファイルを含むディレクトリを指定します。\n(または: '{env_var}')",
  "SpecifyDirectoriesWhenSearching": "ポートを検索するときに使用するディレクトリを指定します。\n(または: '{env_var}')",
  "SpecifyHostArch": "ホスト アーキテクチャのトリプレットを指定します。'vcpkg help triplet' を参照してください。\n(既定値: '{env_var}')",
  "SpecifyTargetArch": "ターゲット アーキテクチャのトリプレットを指定します。'vcpkg help triplet' を参照してください。\n(既定値: '{env_var}')",
  "StartCodeUnitInContinue": "found start code unit in continue position",
  "StoreOptionMissingSha": "--store オプションは sha512 なしでは無効です",
  "StoredBinaryCache": "格納されたバイナリ キャッシュ: \"{path}\"",
  "SuggestGitPull": "結果は古い可能性があります。'git pull' を実行して最新の結果を取得してください。",
  "SuggestResolution": "すべてのエラーを一度に解決するには、次を実行します: \nvcpkg {command_name} --{option}",
  "SuggestStartingBashShell": "変更を有効にするには、新しい bash シェルを開始したことをご確認ください。",
  "SuggestUpdateVcpkg": "vcpkg バイナリの更新が必要である可能性があります。{command_line} を実行して更新してみてください。",
  "SupportedPort": "ポート {package_name} がサポートされています。",
  "SystemApiErrorMessage": "呼び出し {system_api} が {exit_code} ({error_msg}) で失敗しました",
  "ToolFetchFailed": "{tool_name} をフェッチできませんでした。",
  "ToolInWin10": "このユーティリティは、Windows 10 以降にバンドルされています。",
  "TotalTime": "経過した総時間: {elapsed}",
  "TwoFeatureFlagsSpecified": "'{value}' と -'{value}' の両方が機能フラグとして指定されました。",
  "UndeterminedToolChainForTriplet": "CMAKE_SYSTEM_NAME {system_name} との {triplet} に対するツールチェーンの使用を特定できません。VCPKG_CHAINLOAD_TOOLCHAIN_FILE を使用するということですか?",
  "UnexpectedErrorDuringBulkDownload": "一括ダウンロード中に予期しないエラーが発生しました。",
  "UnexpectedExtension": "予期しないアーカイブ拡張子: '{extension}'。",
  "UnexpectedFormat": "必要な形式は [{expected}] ですが、[{actual}] でした。",
  "UnexpectedToolOutput": "{tool_name} ({path}) は、バージョンを特定しようとしたときに予期しない出力を生成しました:",
  "UnknownBaselineFileContent": "認識できないベースライン エントリ;'port:triplet=(fail|skip|pass)' が必要です",
  "UnknownBinaryProviderType": "不明なバイナリ プロバイダー タイプ: 有効なプロバイダーは 'clear'、'default'、'nuget'、'nugetconfig'、'nugettimeout'、'interactive'、'x-azblob'、'x-gcs'、'x-aws'、'x-aws-config'、'http'、'files' です",
  "UnknownOptions": "コマンド '{command_name}' の不明なオプション:",
  "UnknownParameterForIntegrate": "統合のためのパラメーター '{value}' が不明です。",
  "UnknownPolicySetting": "ポリシー '{value}' の不明な設定: {option}",
  "UnknownSettingForBuildType": "VCPKG_BUILD_TYPE {option} の設定が不明です。有効な設定は、'debug'、および 'release' です。",
  "UnknownTool": "vcpkg に、このプラットフォーム用のこのツールの定義がありません。",
  "UnknownTopic": "unknown topic {value}",
  "UnknownVariablesInTemplate": "無効な引数: URL テンプレー `'{value}` に不明な変数が含まれています: {list}",
  "UnrecognizedConfigField": "構成に次の認識できないフィールドが含まれています。",
  "UnrecognizedIdentifier": "識別子名 {value} が認識されません。トリプレット ファイル内のオーバーライド リストに追加します。",
  "UnsupportedFeature": "機能 {feature} が渡されましたが、それは {package_name} サポートにサポートされている機能ではありません。",
  "UnsupportedPort": "ポート {package_name} はサポートされていません。",
  "UnsupportedPortDependency": "- 依存関係 {value} はサポートされていません。",
  "UnsupportedPortFeature": "{spec} は '{supports_expression}' でのみサポートされています",
  "UnsupportedShortOptions": "短いオプションはサポートされていません: '{value}'",
  "UnsupportedSyntaxInCDATA": "]]> is not supported in CDATA block",
  "UnsupportedSystemName": "VCPKG_CMAKE_SYSTEM_NAME「{system_name}」を vcvarsall プラットフォームにマップできませんでした。サポートされているシステム名は、「」、「Windows」、および「WindowsStore」です。",
  "UnsupportedToolchain": "トリプレット内 {triplet}: 要求されたターゲットアーキテクチャ {arch} に対して有効なツールチェーンが見つかりません。\n選択された Visual Studio インスタンスは {path} にあり、\n利用可能なツールチェインの組み合わせは以下の通りです: {list}",
  "UpdateBaselineAddBaselineNoManifest": "--{option} スイッチが渡されましたが、'組み込みベースライン' フィールドを追加するマニフェスト ファイルがありません。",
  "UpdateBaselineLocalGitError": "git は \"{path}\" のローカル vcpkg レジストリの HEAD を解析できませんでした",
  "UpdateBaselineNoConfiguration": "更新する 'vcpkg.json' も 'vcpkg-configuration.json' も存在しません。",
  "UpdateBaselineNoExistingBuiltinBaseline": "マニフェスト ファイルには現在、'組み込みベースライン' フィールドが含まれていません。追加するには、--{option} スイッチを渡してください。",
  "UpdateBaselineNoUpdate": "レジストリ '{url}' は更新されませんでした: '{value}'",
  "UpdateBaselineRemoteGitError": "git はリモートリポジトリ '{url}' の取り込みに失敗しました",
  "UpdateBaselineUpdatedBaseline": "レジストリ '{url}' を更新しました。ベースライン '{old_value}' -> '{new_value}'",
  "UpgradeInManifest": "アップグレード コマンドは現在マニフェスト モードをサポートしていません。代わりに、vcpkg.json を変更してインストールを実行してください。",
  "UpgradeRunWithNoDryRun": "上記のパッケージを再構築する場合は、--no-dry-run オプションを使用してこのコマンドを実行します。",
  "UploadedBinaries": "{count} {vendor} にバイナリをアップロードしました。",
  "UploadedPackagesToVendor": "{count} 個のパッケージを {elapsed} の {vendor} にアップロードしました",
  "UploadingBinariesToVendor": "'{spec}' のバイナリを '{vendor}' ソース \"{path}\" にアップロードしています。",
  "UploadingBinariesUsingVendor": "'{vendor}' \"{path}\" を使用して '{spec}' のバイナリをアップロードしています。",
  "UseEnvVar": "-- 環境変数で {env_var} を使用しています。",
  "UserWideIntegrationDeleted": "ユーザー全体の統合がインストールされていません。",
  "UserWideIntegrationRemoved": "ユーザー全体の統合が削除されました。",
  "UsingCommunityTriplet": "-- コミュニティ トリプレット {triplet} を使用しています。このトリプレット構成の成功は保証されていません。",
  "UsingManifestAt": "{path} でマニフェスト ファイルを使用しています。",
  "Utf8ConversionFailed": "Failed to convert to UTF-8",
  "VSExaminedInstances": "次の Visual Studio インスタンスが考慮されました。",
  "VSExaminedPaths": "Visual Studio インスタンスについて、次のパスが調べられました。",
  "VSNoInstances": "完全な Visual Studio インスタンスが見つかりませんでした",
  "VcpkgCeIsExperimental": "vcpkg-ce ('環境の構成') は試験段階であり、いつでも変更される可能性があります。",
  "VcpkgCommitTableHeader": "VCPKG コミット",
  "VcpkgCompletion": "vcpkg {value} 補完は既に \"{path}\" ファイルにインポートされています。\n次のエントリが見つかりました:",
  "VcpkgDisallowedClassicMode": "現在の作業ディレクトリの上にマニフェスト (vcpkg.json) が見つかりませんでした。\nこの vcpkg ディストリビューションにはクラシック モード インスタンスがありません。",
  "VcpkgHasCrashed": "vcpkg がクラッシュしました。https://github.com/microsoft/vcpkg で問題を作成してください。問題には、実行しようとした作業の簡単な概要と次の情報を記載してください。",
  "VcpkgInVsPrompt": "vcpkg は、Visual Studio プロンプトで {value} をターゲットにしているように見えますが、{triplet} 用にインストールしているように見えます。triplet {value}-windows または --triplet {value}-uwp の使用を検討してください。",
  "VcpkgInvalidCommand": "無効なコマンド: {command_name}",
  "VcpkgRootRequired": "スタンドアロン ブートストラップには VCPKG_ROOT の設定が必要です。",
  "VcpkgRootsDir": "vcpkg ルート ディレクトリを指定します。\n(既定値: {env_var})",
  "VcpkgSendMetricsButDisabled": "sendmetrics が渡されましたが、メトリクスは無効になっています。",
  "VersionCommandHeader": "vcpkg パッケージ管理プログラムのバージョン {version}\n\nライセンス情報については、LICENSE.txt を参照してください。",
  "VersionConstraintViolated": "依存関係 {spec} が少なくともバージョン {expected_version} であることが必要でしたが、現在は {actual_version} です。",
  "VersionInvalidDate": "'{version}' は有効な日付バージョンではありません。日付は YYYY-MM-DD の形式に従う必要があり、disambiguator は先頭にゼロを付けずにドット区切りの正の整数値にする必要があります。",
  "VersionInvalidRelaxed": "'{version}' は有効な緩やかなバージョンではありません (任意の数値要素数を持つ semver)。",
  "VersionInvalidSemver": "'{version}' は有効なセマンティック バージョンではありません。<https://semver.org> を参照してください。",
  "VersionSpecMismatch": "バージョンに一貫性がないため、ポートを読み込めませんでした。ファイル「{path}」にはバージョン {actual_version} が含まれていますが、バージョン データベースは {expected_version} であることを示しています。",
  "VersionTableHeader": "バージョン",
  "WaitingForChildrenToExit": "子プロセスの終了を待機しています...",
  "WaitingToTakeFilesystemLock": "{path} でファイルシステムのロックを取得するのを待機しています...",
  "WarningMessage": "警告: ",
  "WarningMessageMustUsePrintWarning": "{value}という名前のメッセージは「warning:」で始まります。代わりに、コードの先頭に「WarningMessage」を追加するように変更する必要があります。",
  "WarningsTreatedAsErrors": "以前の警告がエラーとして解釈される",
  "WhileLookingForSpec": "{spec} の検索中:",
  "WindowsOnlyCommand": "このコマンドは Windows のみをサポートします。",
  "WroteNuGetPkgConfInfo": "NuGet パッケージ構成情報を {path} に書き込んでいます。"
}
