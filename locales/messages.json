{
  "AddArtifactOnlyOne": "'{command_line}' can only add one artifact at a time.",
  "_AddArtifactOnlyOne.comment": "An example of {command_line} is vcpkg install zlib.",
  "AddCommandFirstArg": "The first parameter to add must be 'artifact' or 'port'.",
  "AddFirstArgument": "The first argument to '{command_line}' must be 'artifact' or 'port'.",
  "_AddFirstArgument.comment": "An example of {command_line} is vcpkg install zlib.",
  "AddPortRequiresManifest": "'{command_line}' requires an active manifest file.",
  "_AddPortRequiresManifest.comment": "An example of {command_line} is vcpkg install zlib.",
  "AddPortSucceeded": "Succeeded in adding ports to vcpkg.json file.",
  "AddRecurseOption": "If you are sure you want to remove them, run the command with the --recurse option.",
  "AddTripletExpressionNotAllowed": "triplet expressions are not allowed here. You may want to change `{package_name}:{triplet}` to `{package_name}` instead.",
  "_AddTripletExpressionNotAllowed.comment": "An example of {package_name} is zlib. An example of {triplet} is x64-windows.",
  "AddVersionAddedVersionToFile": "added version {version} to {path}",
  "_AddVersionAddedVersionToFile.comment": "An example of {version} is 1.3.8. An example of {path} is /foo/bar.",
  "AddVersionCommitChangesReminder": "Did you remember to commit your changes?",
  "AddVersionCommitResultReminder": "Don't forget to commit the result!",
  "AddVersionDetectLocalChangesError": "skipping detection of local changes due to unexpected format in git status output",
  "AddVersionFileNotFound": "couldn't find required file {path}",
  "_AddVersionFileNotFound.comment": "An example of {path} is /foo/bar.",
  "AddVersionFormatPortSuggestion": "Run `{command_line}` to format the file",
  "_AddVersionFormatPortSuggestion.comment": "An example of {command_line} is vcpkg install zlib.",
  "AddVersionIgnoringOptionAll": "ignoring --{option} since a port name argument was provided",
  "_AddVersionIgnoringOptionAll.comment": "The -- before {option} must be preserved as they're part of the help message for the user. An example of {option} is editable.",
  "AddVersionLoadPortFailed": "can't load port {package_name}",
  "_AddVersionLoadPortFailed.comment": "An example of {package_name} is zlib.",
  "AddVersionNewFile": "(new file)",
  "AddVersionNewShaIs": "new SHA: {value}",
  "_AddVersionNewShaIs.comment": "{value} is a 40-digit hexadecimal SHA",
  "AddVersionNoFilesUpdated": "No files were updated",
  "AddVersionNoFilesUpdatedForPort": "No files were updated for {package_name}",
  "_AddVersionNoFilesUpdatedForPort.comment": "An example of {package_name} is zlib.",
  "AddVersionNoGitSha": "can't obtain SHA for port {package_name}",
  "_AddVersionNoGitSha.comment": "An example of {package_name} is zlib.",
  "AddVersionOldShaIs": "old SHA: {value}",
  "_AddVersionOldShaIs.comment": "{value} is a 40-digit hexadecimal SHA",
  "AddVersionOverwriteOptionSuggestion": "Use --{option} to bypass this check",
  "_AddVersionOverwriteOptionSuggestion.comment": "The -- before {option} must be preserved as they're part of the help message for the user. An example of {option} is editable.",
  "AddVersionPortDoesNotExist": "{package_name} does not exist",
  "_AddVersionPortDoesNotExist.comment": "An example of {package_name} is zlib.",
  "AddVersionPortFilesShaChanged": "checked-in files for {package_name} have changed but the version was not updated",
  "_AddVersionPortFilesShaChanged.comment": "An example of {package_name} is zlib.",
  "AddVersionPortFilesShaUnchanged": "checked-in files for {package_name} are unchanged from version {version}",
  "_AddVersionPortFilesShaUnchanged.comment": "An example of {package_name} is zlib. An example of {version} is 1.3.8.",
  "AddVersionPortHasImproperFormat": "{package_name} is not properly formatted",
  "_AddVersionPortHasImproperFormat.comment": "An example of {package_name} is zlib.",
  "AddVersionSuggestNewVersionScheme": "Use the version scheme \"{new_scheme}\" instead of \"{old_scheme}\" in port \"{package_name}\".\nUse --{option} to disable this check.",
  "_AddVersionSuggestNewVersionScheme.comment": "The -- before {option} must be preserved as they're part of the help message for the user. An example of {new_scheme} is version. An example of {old_scheme} is version-string. An example of {package_name} is zlib. An example of {option} is editable.",
  "AddVersionUnableToParseVersionsFile": "unable to parse versions file {path}",
  "_AddVersionUnableToParseVersionsFile.comment": "An example of {path} is /foo/bar.",
  "AddVersionUncommittedChanges": "there are uncommitted changes for {package_name}",
  "_AddVersionUncommittedChanges.comment": "An example of {package_name} is zlib.",
  "AddVersionUpdateVersionReminder": "Did you remember to update the version or port version?",
  "AddVersionUseOptionAll": "{command_name} with no arguments requires passing --{option} to update all port versions at once",
  "_AddVersionUseOptionAll.comment": "The -- before {option} must be preserved as they're part of the help message for the user. An example of {command_name} is install. An example of {option} is editable.",
  "AddVersionVersionAlreadyInFile": "version {version} is already in {path}",
  "_AddVersionVersionAlreadyInFile.comment": "An example of {version} is 1.3.8. An example of {path} is /foo/bar.",
  "AddVersionVersionIs": "version: {version}",
  "_AddVersionVersionIs.comment": "An example of {version} is 1.3.8.",
  "AddingCompletionEntry": "Adding vcpkg completion entry to {path}.",
  "_AddingCompletionEntry.comment": "An example of {path} is /foo/bar.",
  "AdditionalPackagesToExport": "Additional packages (*) need to be exported to complete this operation.",
  "AdditionalPackagesToRemove": "Additional packages (*) need to be removed to complete this operation.",
  "AllFormatArgsRawArgument": "format string \"{value}\" contains a raw format argument",
  "_AllFormatArgsRawArgument.comment": "example of {value} is 'foo {} bar'",
  "AllFormatArgsUnbalancedBraces": "unbalanced brace in format string \"{value}\"",
  "_AllFormatArgsUnbalancedBraces.comment": "example of {value} is 'foo bar {'",
  "AllPackagesAreUpdated": "All installed packages are up-to-date with the local portfile.",
  "AlreadyInstalled": "{spec} is already installed",
  "_AlreadyInstalled.comment": "An example of {spec} is zlib:x64-windows.",
  "AlreadyInstalledNotHead": "{spec} is already installed -- not building from HEAD",
  "_AlreadyInstalledNotHead.comment": "'HEAD' means the most recent version of source code An example of {spec} is zlib:x64-windows.",
  "AmbiguousConfigDeleteConfigFile": "Ambiguous vcpkg configuration provided by both manifest and configuration file.\n-- Delete configuration file {path}",
  "_AmbiguousConfigDeleteConfigFile.comment": "An example of {path} is /foo/bar.",
  "AndroidHomeDirMissingProps": "source.properties missing in {env_var} directory: {path}",
  "_AndroidHomeDirMissingProps.comment": "Note: 'source.properties' is code and should not be translated. An example of {env_var} is VCPKG_DEFAULT_TRIPLET. An example of {path} is /foo/bar.",
  "AnotherInstallationInProgress": "Another installation is in progress on the machine, sleeping 6s before retrying.",
  "AppliedUserIntegration": "Applied user-wide integration for this vcpkg root.",
  "ArtifactsOptionIncompatibility": "--{option} has no effect on find artifact.",
  "_ArtifactsOptionIncompatibility.comment": "An example of {option} is editable.",
  "AssetSourcesArg": "Add sources for asset caching. See 'vcpkg help assetcaching'.",
  "AttemptingToFetchPackagesFromVendor": "Attempting to fetch {count} package(s) from {vendor}",
  "_AttemptingToFetchPackagesFromVendor.comment": "An example of {count} is 42. An example of {vendor} is Azure.",
  "AttemptingToSetBuiltInBaseline": "attempting to set builtin-baseline in vcpkg.json while overriding the default-registry in vcpkg-configuration.json.\nthe default-registry from vcpkg-configuration.json will be used.",
  "AuthenticationMayRequireManualAction": "One or more {vendor} credential providers requested manual action. Add the binary source 'interactive' to allow interactivity.",
  "_AuthenticationMayRequireManualAction.comment": "An example of {vendor} is Azure.",
  "AutoSettingEnvVar": "-- Automatically setting {env_var} environment variables to \"{url}\".",
  "_AutoSettingEnvVar.comment": "An example of env_var is \"HTTP(S)_PROXY\"'--' at the beginning must be preserved An example of {env_var} is VCPKG_DEFAULT_TRIPLET. An example of {url} is https://github.com/microsoft/vcpkg.",
  "AutomaticLinkingForMSBuildProjects": "All MSBuild C++ projects can now #include any installed libraries. Linking will be handled automatically. Installing new libraries will make them instantly available.",
  "AvailableArchitectureTriplets": "Available architecture triplets:",
  "AvailableHelpTopics": "Available help topics:",
  "BaselineConflict": "Specifying vcpkg-configuration.default-registry in a manifest file conflicts with built-in baseline.\nPlease remove one of these conflicting settings.",
  "BaselineFileNoDefaultField": "The baseline file at commit {commit_sha} was invalid (no \"default\" field).",
  "_BaselineFileNoDefaultField.comment": "An example of {commit_sha} is a18442042722dd48e20714ec034a12fcc0576c9af7be5188586970e2edf47529825bdc99af366b1d5891630c8dbf6f63bfa9f012e77ab3d3ed80d1a118e3b2be.",
  "BaselineMissingDefault": "The baseline.json from commit `\"{commit_sha}\"` in the repo {url} was invalid (did not contain a \"default\" field).",
  "_BaselineMissingDefault.comment": "An example of {commit_sha} is a18442042722dd48e20714ec034a12fcc0576c9af7be5188586970e2edf47529825bdc99af366b1d5891630c8dbf6f63bfa9f012e77ab3d3ed80d1a118e3b2be. An example of {url} is https://github.com/microsoft/vcpkg.",
  "BinarySourcesArg": "Add sources for binary caching. See 'vcpkg help binarycaching'.",
  "BinaryWithInvalidArchitecture": "{path}\n Expected: {expected}, but was {actual}",
  "_BinaryWithInvalidArchitecture.comment": "{expected} and {actual} are architectures An example of {path} is /foo/bar.",
  "BothYesAndNoOptionSpecifiedError": "cannot specify both --no-{option} and --{option}.",
  "_BothYesAndNoOptionSpecifiedError.comment": "An example of {option} is editable.",
  "BuildAlreadyInstalled": "{spec} is already installed; please remove {spec} before attempting to build it.",
  "_BuildAlreadyInstalled.comment": "An example of {spec} is zlib:x64-windows.",
  "BuildDependenciesMissing": "The build command requires all dependencies to be already installed.\nThe following dependencies are missing:",
  "BuildResultBuildFailed": "BUILD_FAILED",
  "_BuildResultBuildFailed.comment": "Printed after the name of an installed entity to indicate that it failed to build.",
  "BuildResultCacheMissing": "CACHE_MISSING",
  "_BuildResultCacheMissing.comment": "Printed after the name of an installed entity to indicate that it was not present in the binary cache when the user has requested that things may only be installed from the cache rather than built.",
  "BuildResultCascadeDueToMissingDependencies": "CASCADED_DUE_TO_MISSING_DEPENDENCIES",
  "_BuildResultCascadeDueToMissingDependencies.comment": "Printed after the name of an installed entity to indicate that it could not attempt to be installed because one of its transitive dependencies failed to install.",
  "BuildResultDownloaded": "DOWNLOADED",
  "_BuildResultDownloaded.comment": "Printed after the name of an installed entity to indicate that it was successfully downloaded but no build or install was requested.",
  "BuildResultExcluded": "EXCLUDED",
  "_BuildResultExcluded.comment": "Printed after the name of an installed entity to indicate that the user explicitly requested it not be installed.",
  "BuildResultFileConflicts": "FILE_CONFLICTS",
  "_BuildResultFileConflicts.comment": "Printed after the name of an installed entity to indicate that it conflicts with something already installed",
  "BuildResultPostBuildChecksFailed": "POST_BUILD_CHECKS_FAILED",
  "_BuildResultPostBuildChecksFailed.comment": "Printed after the name of an installed entity to indicate that it built successfully, but that it failed post build checks.",
  "BuildResultRemoved": "REMOVED",
  "_BuildResultRemoved.comment": "Printed after the name of an uninstalled entity to indicate that it was successfully uninstalled.",
  "BuildResultSucceeded": "SUCCEEDED",
  "_BuildResultSucceeded.comment": "Printed after the name of an installed entity to indicate that it was built and installed successfully.",
  "BuildResultSummaryHeader": "SUMMARY FOR {triplet}",
  "_BuildResultSummaryHeader.comment": "Displayed before a list of a summary installation results. An example of {triplet} is x64-windows.",
  "BuildResultSummaryLine": "{build_result}: {count}",
  "_BuildResultSummaryLine.comment": "Displayed to show a count of results of a build_result in a summary. An example of {build_result} is One of the BuildResultXxx messages (such as BuildResultSucceeded/SUCCEEDED). An example of {count} is 42.",
  "BuildTreesRootDir": "(Experimental) Specify the buildtrees root directory.",
  "BuildTroubleshootingMessage1": "Please ensure you're using the latest port files with `git pull` and `vcpkg update`.\nThen check for known issues at:",
  "_BuildTroubleshootingMessage1.comment": "First part of build troubleshooting message, printed before the URI to look for existing bugs.",
  "BuildTroubleshootingMessage2": "You can submit a new issue at:",
  "_BuildTroubleshootingMessage2.comment": "Second part of build troubleshooting message, printed after the URI to look for existing bugs but before the URI to file one.",
  "BuildTroubleshootingMessage3": "Include '[{package_name}] Build error' in your bug report title, the following version information in your bug description, and attach any relevant failure logs from above.",
  "_BuildTroubleshootingMessage3.comment": "Third part of build troubleshooting message, printed after the URI to file a bug but before version information about vcpkg itself. An example of {package_name} is zlib.",
  "BuildTroubleshootingMessage4": "Please use the prefilled template from {path} when reporting your issue.",
  "_BuildTroubleshootingMessage4.comment": "Fourth optional part of build troubleshooting message, printed after the versioninformation about vcpkg itself. An example of {path} is /foo/bar.",
  "BuildingFromHead": "Building {spec} from HEAD...",
  "_BuildingFromHead.comment": "'HEAD' means the most recent version of source code An example of {spec} is zlib:x64-windows.",
  "BuildingPackage": "Building {spec}...",
  "_BuildingPackage.comment": "An example of {spec} is zlib:x64-windows.",
  "BuildingPackageFailed": "building {spec} failed with: {build_result}",
  "_BuildingPackageFailed.comment": "An example of {spec} is zlib:x64-windows. An example of {build_result} is One of the BuildResultXxx messages (such as BuildResultSucceeded/SUCCEEDED).",
  "BuildingPackageFailedDueToMissingDeps": "due to the following missing dependencies:",
  "_BuildingPackageFailedDueToMissingDeps.comment": "Printed after BuildingPackageFailed, and followed by a list of dependencies that were missing.",
  "BuiltInTriplets": "vcpkg built-in triplets:",
  "BuiltWithIncorrectArchitecture": "The following files were built for an incorrect architecture:",
  "CISettingsExclude": "Comma-separated list of ports to skip",
  "CISettingsOptCIBase": "Path to the ci.baseline.txt file. Used to skip ports and detect regressions.",
  "CISettingsOptExclude": "Comma separated list of ports to skip",
  "CISettingsOptFailureLogs": "Directory to which failure logs will be copied",
  "CISettingsOptHostExclude": "Comma separated list of ports to skip for the host triplet",
  "CISettingsOptOutputHashes": "File to output all determined package hashes",
  "CISettingsOptParentHashes": "File to read package hashes for a parent CI state, to reduce the set of changed packages",
  "CISettingsOptSkippedCascadeCount": "Asserts that the number of --exclude and supports skips exactly equal this number",
  "CISettingsOptXUnit": "File to output results in XUnit format (internal)",
  "CISettingsVerifyGitTree": "Verify that each git tree object matches its declared version (this is very slow)",
  "CISettingsVerifyVersion": "Print result for each port instead of just errors.",
  "CISwitchOptAllowUnexpectedPassing": "Indicates that 'Passing, remove from fail list' results should not be emitted.",
  "CISwitchOptDryRun": "Print out plan without execution",
  "CISwitchOptRandomize": "Randomize the install order",
  "CISwitchOptSkipFailures": "Indicates that ports marked `=fail` in ci.baseline.txt should be skipped.",
  "CISwitchOptXUnitAll": "Report also unchanged ports to the XUnit output (internal)",
  "CMakeTargetsUsage": "{package_name} provides CMake targets:",
  "_CMakeTargetsUsage.comment": "'targets' are a CMake and Makefile concept An example of {package_name} is zlib.",
  "CMakeTargetsUsageHeuristicMessage": "# this is heuristically generated, and may not be correct",
  "_CMakeTargetsUsageHeuristicMessage.comment": "Displayed after CMakeTargetsUsage; the # must be kept at the beginning so that the message remains a comment.",
  "CMakeToolChainFile": "CMake projects should use: \"-DCMAKE_TOOLCHAIN_FILE={path}\"",
  "_CMakeToolChainFile.comment": "An example of {path} is /foo/bar.",
  "CMakeUsingExportedLibs": "To use exported libraries in CMake projects, add {value} to your CMake command line.",
  "_CMakeUsingExportedLibs.comment": "{value} is a CMake command line switch of the form -DFOO=BAR",
  "ChecksFailedCheck": "vcpkg has crashed; no additional details are available.",
  "ChecksUnreachableCode": "unreachable code was reached",
  "ChecksUpdateVcpkg": "updating vcpkg by rerunning bootstrap-vcpkg may resolve this failure.",
  "CiBaselineAllowUnexpectedPassingRequiresBaseline": "--allow-unexpected-passing can only be used if a baseline is provided via --ci-baseline.",
  "CiBaselineDisallowedCascade": "REGRESSION: {spec} cascaded, but it is required to pass. ({path}).",
  "_CiBaselineDisallowedCascade.comment": "An example of {spec} is zlib:x64-windows. An example of {path} is /foo/bar.",
  "CiBaselineRegression": "REGRESSION: {spec} failed with {build_result}. If expected, add {spec}=fail to {path}.",
  "_CiBaselineRegression.comment": "An example of {spec} is zlib:x64-windows. An example of {build_result} is One of the BuildResultXxx messages (such as BuildResultSucceeded/SUCCEEDED). An example of {path} is /foo/bar.",
  "CiBaselineRegressionHeader": "REGRESSIONS:",
  "_CiBaselineRegressionHeader.comment": "Printed before a series of CiBaselineRegression and/or CiBaselineUnexpectedPass messages.",
  "CiBaselineUnexpectedPass": "PASSING, REMOVE FROM FAIL LIST: {spec} ({path}).",
  "_CiBaselineUnexpectedPass.comment": "An example of {spec} is zlib:x64-windows. An example of {path} is /foo/bar.",
  "ClearingContents": "Clearing contents of {path}",
  "_ClearingContents.comment": "An example of {path} is /foo/bar.",
  "CmakeTargetsExcluded": "note: {count} additional targets are not displayed.",
  "_CmakeTargetsExcluded.comment": "An example of {count} is 42.",
  "CmdAddVersionOptAll": "Process versions for all ports.",
  "CmdAddVersionOptOverwriteVersion": "Overwrite `git-tree` of an existing version.",
  "CmdAddVersionOptSkipFormatChk": "Skips the formatting check of vcpkg.json files.",
  "CmdAddVersionOptSkipVersionFormatChk": "Skips the version format check.",
  "CmdAddVersionOptVerbose": "Print success messages instead of just errors.",
  "CmdContactOptSurvey": "Launch default browser to the current vcpkg survey",
  "CmdDependInfoOptDGML": "Creates graph on basis of dgml",
  "CmdDependInfoOptDepth": "Show recursion depth in output",
  "CmdDependInfoOptDot": "Creates graph on basis of dot",
  "CmdDependInfoOptMaxRecurse": "Set max recursion depth, a value of -1 indicates no limit",
  "CmdDependInfoOptSort": "Set sort order for the list of dependencies, accepted values are: lexicographical, topological (default), x-tree, reverse",
  "CmdEditOptAll": "Open editor into the port as well as the port-specific buildtree subfolder",
  "CmdEditOptBuildTrees": "Open editor into the port-specific buildtree subfolder",
  "CmdEnvOptions": "Add installed {path} to {env_var}",
  "_CmdEnvOptions.comment": "An example of {path} is /foo/bar. An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "CmdExportOpt7Zip": "Export to a 7zip (.7z) file",
  "CmdExportOptChocolatey": "Export a Chocolatey package (experimental feature)",
  "CmdExportOptDebug": "Enable prefab debug",
  "CmdExportOptDryRun": "Do not actually export.",
  "CmdExportOptIFW": "Export to an IFW-based installer",
  "CmdExportOptInstalled": "Export all installed packages",
  "CmdExportOptMaven": "Enable Maven",
  "CmdExportOptNuget": "Export a NuGet package",
  "CmdExportOptPrefab": "Export to Prefab format",
  "CmdExportOptRaw": "Export to an uncompressed directory",
  "CmdExportOptZip": "Export to a zip file",
  "CmdExportSettingChocolateyMaint": "Specify the maintainer for the exported Chocolatey package (experimental feature)",
  "CmdExportSettingChocolateyVersion": "Specify the version suffix to add for the exported Chocolatey package (experimental feature)",
  "CmdExportSettingConfigFile": "Specify the temporary file path for the installer configuration",
  "CmdExportSettingInstallerPath": "Specify the file path for the exported installer",
  "CmdExportSettingNugetDesc": "Specify a description for the exported NuGet package",
  "CmdExportSettingNugetID": "Specify the id for the exported NuGet package (overrides --output)",
  "CmdExportSettingNugetVersion": "Specify the version for the exported NuGet package",
  "CmdExportSettingOutput": "Specify the output name (used to construct filename)",
  "CmdExportSettingOutputDir": "Specify the output directory for produced artifacts",
  "CmdExportSettingPkgDir": "Specify the temporary directory path for the repacked packages",
  "CmdExportSettingPrefabArtifactID": "Artifact Id is the name of the project according Maven specifications",
  "CmdExportSettingPrefabGroupID": "GroupId uniquely identifies your project according Maven specifications",
  "CmdExportSettingPrefabVersion": "Version is the name of the project according Maven specifications",
  "CmdExportSettingRepoDir": "Specify the directory path for the exported repository",
  "CmdExportSettingRepoURL": "Specify the remote repository URL for the online installer",
  "CmdExportSettingSDKMinVersion": "Android minimum supported SDK version",
  "CmdExportSettingSDKTargetVersion": "Android target sdk version",
  "CmdFetchOptXStderrStatus": "Direct status/downloading messages to stderr rather than stdout. (Errors/failures still go to stdout)",
  "CmdFormatManifestOptAll": "Format all ports' manifest files.",
  "CmdFormatManifestOptConvertControl": "Convert CONTROL files to manifest files.",
  "CmdGenerateMessageMapOptNoOutputComments": "When generating the message map, exclude comments (useful for generating the English localization file)",
  "CmdGenerateMessageMapOptOutputComments": "When generating the message map, include comments (the default)",
  "CmdInfoOptInstalled": "(experimental) Report on installed packages instead of available",
  "CmdInfoOptTransitive": "(experimental) Also report on dependencies of installed packages",
  "CmdNewOptApplication": "Create an application manifest (don't require name or version).",
  "CmdNewOptSingleFile": "Embed vcpkg-configuration.json into vcpkg.json.",
  "CmdNewOptVersionDate": "Interpret --version as an ISO 8601 date. (YYYY-MM-DD)",
  "CmdNewOptVersionRelaxed": "Interpret --version as a relaxed-numeric version. (Nonnegative numbers separated by dots)",
  "CmdNewOptVersionString": "Interpret --version as a string with no ordering behavior.",
  "CmdNewSettingName": "Name for the new manifest.",
  "CmdNewSettingVersion": "Version for the new manifest.",
  "CmdRegenerateOptDryRun": "does not actually perform the action, shows only what would be done",
  "CmdRegenerateOptForce": "proceeds with the (potentially dangerous) action without confirmation",
  "CmdRegenerateOptNormalize": "apply any deprecation fixups",
  "CmdRemoveOptDryRun": "Print the packages to be removed, but do not remove them",
  "CmdRemoveOptOutdated": "Select all packages with versions that do not match the portfiles",
  "CmdRemoveOptRecurse": "Allow removal of packages not explicitly specified on the command line",
  "CmdSetInstalledOptDryRun": "Do not actually build or install",
  "CmdSetInstalledOptNoUsage": "Don't print CMake usage information after install.",
  "CmdSetInstalledOptWritePkgConfig": "Writes out a NuGet packages.config-formatted file for use with external binary caching.\nSee `vcpkg help binarycaching` for more information.",
  "CmdUpdateBaselineOptDryRun": "Print out plan without execution",
  "CmdUpdateBaselineOptInitial": "add a `builtin-baseline` to a vcpkg.json that doesn't already have it",
  "CmdUpgradeOptAllowUnsupported": "Instead of erroring on an unsupported port, continue with a warning.",
  "CmdUpgradeOptNoDryRun": "Actually upgrade",
  "CmdUpgradeOptNoKeepGoing": "Stop installing packages on failure",
  "CmdXDownloadOptHeader": "Additional header to use when fetching from URLs",
  "CmdXDownloadOptSha": "The hash of the file to be downloaded",
  "CmdXDownloadOptSkipSha": "Do not check the SHA512 of the downloaded file",
  "CmdXDownloadOptStore": "Indicates the file should be stored instead of fetched",
  "CmdXDownloadOptUrl": "URL to download and store if missing from cache",
  "CommandFailed": "command:\n{command_line}\nfailed with the following results:",
  "_CommandFailed.comment": "An example of {command_line} is vcpkg install zlib.",
  "CommunityTriplets": "VCPKG community triplets:",
  "ComparingUtf8Decoders": "Comparing Utf8Decoders with different provenance; this is always an error",
  "CompressFolderFailed": "Failed to compress folder \"{path}\":",
  "_CompressFolderFailed.comment": "An example of {path} is /foo/bar.",
  "ComputingInstallPlan": "Computing installation plan...",
  "ConflictingFiles": "The following files are already installed in {path} and are in conflict with {spec}",
  "_ConflictingFiles.comment": "An example of {path} is /foo/bar. An example of {spec} is zlib:x64-windows.",
  "ConflictingValuesForOption": "conflicting values specified for '--{option}'.",
  "_ConflictingValuesForOption.comment": "An example of {option} is editable.",
  "ConstraintViolation": "Found a constraint violation:",
  "ContinueCodeUnitInStart": "found continue code unit in start position",
  "ControlAndManifestFilesPresent": "Both a manifest file and a CONTROL file exist in port directory: {path}",
  "_ControlAndManifestFilesPresent.comment": "An example of {path} is /foo/bar.",
  "ControlCharacterInString": "Control character in string",
  "CopyrightIsDir": "`{path}` being a directory is deprecated.",
  "_CopyrightIsDir.comment": "An example of {path} is /foo/bar.",
  "CorruptedDatabase": "Database corrupted.",
  "CorruptedInstallTree": "Your vcpkg 'installed' tree is corrupted.",
  "CouldNotDeduceNugetIdAndVersion": "Could not deduce nuget id and version from filename: {path}",
  "_CouldNotDeduceNugetIdAndVersion.comment": "An example of {path} is /foo/bar.",
  "CouldNotFindBaseline": "Could not find explicitly specified baseline `\"{commit_sha}\"` in baseline file {path}",
  "_CouldNotFindBaseline.comment": "An example of {commit_sha} is a18442042722dd48e20714ec034a12fcc0576c9af7be5188586970e2edf47529825bdc99af366b1d5891630c8dbf6f63bfa9f012e77ab3d3ed80d1a118e3b2be. An example of {path} is /foo/bar.",
  "CouldNotFindBaselineForRepo": "Couldn't find baseline `\"{commit_sha}\"` for repo {package_name}",
  "_CouldNotFindBaselineForRepo.comment": "An example of {commit_sha} is a18442042722dd48e20714ec034a12fcc0576c9af7be5188586970e2edf47529825bdc99af366b1d5891630c8dbf6f63bfa9f012e77ab3d3ed80d1a118e3b2be. An example of {package_name} is zlib.",
  "CouldNotFindBaselineInCommit": "Couldn't find baseline in commit `\"{commit_sha}\"` from repo {package_name}:",
  "_CouldNotFindBaselineInCommit.comment": "An example of {commit_sha} is a18442042722dd48e20714ec034a12fcc0576c9af7be5188586970e2edf47529825bdc99af366b1d5891630c8dbf6f63bfa9f012e77ab3d3ed80d1a118e3b2be. An example of {package_name} is zlib.",
  "CouldNotFindGitTreeAtCommit": "could not find the git tree for `versions` in repo {package_name} at commit {commit_sha}",
  "_CouldNotFindGitTreeAtCommit.comment": "An example of {package_name} is zlib. An example of {commit_sha} is a18442042722dd48e20714ec034a12fcc0576c9af7be5188586970e2edf47529825bdc99af366b1d5891630c8dbf6f63bfa9f012e77ab3d3ed80d1a118e3b2be.",
  "CouldNotFindToolVersion": "Could not find <tools version=\"{version}\"> in {path}",
  "_CouldNotFindToolVersion.comment": "An example of {version} is 1.3.8. An example of {path} is /foo/bar.",
  "CreateFailureLogsDir": "Creating failure logs output directory {path}.",
  "_CreateFailureLogsDir.comment": "An example of {path} is /foo/bar.",
  "CreatedNuGetPackage": "Created nupkg: {path}",
  "_CreatedNuGetPackage.comment": "An example of {path} is /foo/bar.",
  "Creating7ZipArchive": "Creating 7zip archive...",
  "CreatingNugetPackage": "Creating NuGet package...",
  "CreatingZipArchive": "Creating zip archive...",
  "CreationFailed": "Creating {path} failed.",
  "_CreationFailed.comment": "An example of {path} is /foo/bar.",
  "CurlFailedToExecute": "curl failed to execute with exit code {exit_code}.",
  "_CurlFailedToExecute.comment": "An example of {exit_code} is 127.",
  "CurlReportedUnexpectedResults": "curl has reported unexpected results to vcpkg and vcpkg cannot continue.\nPlease review the following text for sensitive information and open an issue on the Microsoft/vcpkg GitHub to help fix this problem!\ncmd: {command_line}\n=== curl output ===\n{actual}\n=== end curl output ===",
  "_CurlReportedUnexpectedResults.comment": "{command_line} is the command line to call curl.exe, {actual} is the console output of curl.exe locale-invariant download results. An example of {command_line} is vcpkg install zlib.",
  "CurlReturnedUnexpectedResponseCodes": "curl returned a different number of response codes than were expected for the request ({actual} vs expected {expected}).",
  "_CurlReturnedUnexpectedResponseCodes.comment": "{actual} and {expected} are integers",
  "CurrentCommitBaseline": "You can use the current commit as a baseline, which is:\n\t\"builtin-baseline\": \"{value}\"",
  "_CurrentCommitBaseline.comment": "{value} is a 40 hexadecimal character commit sha",
  "DateTableHeader": "Date",
  "DefaultBrowserLaunched": "Default browser launched to {url}.",
  "_DefaultBrowserLaunched.comment": "An example of {url} is https://github.com/microsoft/vcpkg.",
  "DefaultFlag": "Defaulting to --{option} being on.",
  "_DefaultFlag.comment": "An example of {option} is editable.",
  "DefaultPathToBinaries": "Based on your system settings, the default path to store binaries is \"{path}\". This consults %LOCALAPPDATA%/%APPDATA% on Windows and $XDG_CACHE_HOME or $HOME on other platforms.",
  "_DefaultPathToBinaries.comment": "An example of {path} is /foo/bar.",
  "DeleteVcpkgConfigFromManifest": "-- Or remove \"vcpkg-configuration\" from the manifest file {path}.",
  "_DeleteVcpkgConfigFromManifest.comment": "An example of {path} is /foo/bar.",
  "DeprecatedPrefabDebugOption": "--prefab-debug is now deprecated.",
  "DetectCompilerHash": "Detecting compiler hash for triplet {triplet}...",
  "_DetectCompilerHash.comment": "An example of {triplet} is x64-windows.",
  "DocumentedFieldsSuggestUpdate": "If these are documented fields that should be recognized try updating the vcpkg tool.",
  "DownloadAvailable": "A downloadable copy of this tool is available and can be used by unsetting {env_var}.",
  "_DownloadAvailable.comment": "An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "DownloadRootsDir": "Specify the downloads root directory.\n(default: {env_var})",
  "_DownloadRootsDir.comment": "An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "DownloadedSources": "Downloaded sources for {spec}",
  "_DownloadedSources.comment": "An example of {spec} is zlib:x64-windows.",
  "DownloadingPortableToolVersionX": "A suitable version of {tool_name} was not found (required v{version}) Downloading portable {tool_name} {version}...",
  "_DownloadingPortableToolVersionX.comment": "An example of {tool_name} is aria2. An example of {version} is 1.3.8.",
  "DownloadingTool": "Downloading {tool_name}...\n{url}->{path}",
  "_DownloadingTool.comment": "An example of {tool_name} is aria2. An example of {url} is https://github.com/microsoft/vcpkg. An example of {path} is /foo/bar.",
  "DownloadingVcpkgCeBundle": "Downloading vcpkg-ce bundle {version}...",
  "_DownloadingVcpkgCeBundle.comment": "An example of {version} is 1.3.8.",
  "DownloadingVcpkgCeBundleLatest": "Downloading latest vcpkg-ce bundle...",
  "_DownloadingVcpkgCeBundleLatest.comment": "This message is normally displayed only in development.",
  "DownloadingVcpkgStandaloneBundle": "Downloading standalone bundle {version}.",
  "_DownloadingVcpkgStandaloneBundle.comment": "An example of {version} is 1.3.8.",
  "DownloadingVcpkgStandaloneBundleLatest": "Downloading latest standalone bundle.",
  "DuplicateCommandOption": "The option --{option} can only be passed once.",
  "_DuplicateCommandOption.comment": "An example of {option} is editable.",
  "DuplicateOptions": "'--{value}' specified multiple times.",
  "_DuplicateOptions.comment": "'{value}' is a command line option.",
  "DuplicatedKeyInObj": "Duplicated key \"{value}\" in an object",
  "_DuplicatedKeyInObj.comment": "{value} is a json property/object",
  "ElapsedForPackage": "Elapsed time to handle {spec}: {elapsed}",
  "_ElapsedForPackage.comment": "An example of {spec} is zlib:x64-windows. An example of {elapsed} is 3.532 min.",
  "ElapsedInstallTime": "Total elapsed time: {count}",
  "_ElapsedInstallTime.comment": "An example of {count} is 42.",
  "ElapsedTimeForChecks": "Time to determine pass/fail: {elapsed}",
  "_ElapsedTimeForChecks.comment": "An example of {elapsed} is 3.532 min.",
  "EmailVcpkgTeam": "Send an email to {url} with any feedback.",
  "_EmailVcpkgTeam.comment": "An example of {url} is https://github.com/microsoft/vcpkg.",
  "EmbeddingVcpkgConfigInManifest": "Embedding `vcpkg-configuration` in a manifest file is an EXPERIMENTAL feature.",
  "EmptyArg": "The option --{option} must be passed a non-empty argument.",
  "_EmptyArg.comment": "An example of {option} is editable.",
  "EmptyLicenseExpression": "SPDX license expression was empty.",
  "EndOfStringInCodeUnit": "found end of string in middle of code point",
  "EnvInvalidMaxConcurrency": "{env_var} is {value}, must be > 0",
  "_EnvInvalidMaxConcurrency.comment": "{value} is the invalid value of an environment variable An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "EnvStrFailedToExtract": "could not expand the environment string:",
  "ErrorDetectingCompilerInfo": "while detecting compiler information:\nThe log file content at \"{path}\" is:",
  "_ErrorDetectingCompilerInfo.comment": "An example of {path} is /foo/bar.",
  "ErrorIndividualPackagesUnsupported": "In manifest mode, `vcpkg install` does not support individual package arguments.\nTo install additional packages, edit vcpkg.json and then run `vcpkg install` without any package arguments.",
  "ErrorInvalidClassicModeOption": "The option --{option} is not supported in classic mode and no manifest was found.",
  "_ErrorInvalidClassicModeOption.comment": "An example of {option} is editable.",
  "ErrorInvalidManifestModeOption": "The option --{option} is not supported in manifest mode.",
  "_ErrorInvalidManifestModeOption.comment": "An example of {option} is editable.",
  "ErrorMessage": "error: ",
  "ErrorMessageMustUsePrintError": "The message named {value} starts with error:, it must be changed to prepend ErrorMessage in code instead.",
  "_ErrorMessageMustUsePrintError.comment": "{value} is is a localized message name like ErrorMessageMustUsePrintError",
  "ErrorMissingVcpkgRoot": "Could not detect vcpkg-root. If you are trying to use a copy of vcpkg that you've built, you must define the VCPKG_ROOT environment variable to point to a cloned copy of https://github.com/Microsoft/vcpkg.",
  "ErrorNoVSInstance": "in triplet {triplet}: Unable to find a valid Visual Studio instance",
  "_ErrorNoVSInstance.comment": "An example of {triplet} is x64-windows.",
  "ErrorNoVSInstanceAt": "at \"{path}\"",
  "_ErrorNoVSInstanceAt.comment": "An example of {path} is /foo/bar.",
  "ErrorNoVSInstanceFullVersion": "with toolset version prefix {version}",
  "_ErrorNoVSInstanceFullVersion.comment": "An example of {version} is 1.3.8.",
  "ErrorNoVSInstanceVersion": "with toolset version {version}",
  "_ErrorNoVSInstanceVersion.comment": "An example of {version} is 1.3.8.",
  "ErrorParsingBinaryParagraph": "while parsing the Binary Paragraph for {spec}",
  "_ErrorParsingBinaryParagraph.comment": "An example of {spec} is zlib:x64-windows.",
  "ErrorRequireBaseline": "this vcpkg instance requires a manifest with a specified baseline in order to interact with ports. Please add 'builtin-baseline' to the manifest or add a 'vcpkg-configuration.json' that redefines the default registry.",
  "ErrorRequirePackagesList": "`vcpkg install` requires a list of packages to install in classic mode.",
  "ErrorUnableToDetectCompilerInfo": "vcpkg was unable to detect the active compiler's information. See above for the CMake failure output.",
  "_ErrorUnableToDetectCompilerInfo.comment": "failure output will be displayed at the top of this",
  "ErrorVcvarsUnsupported": "in triplet {triplet}: Use of Visual Studio's Developer Prompt is unsupported on non-Windows hosts.\nDefine 'VCPKG_CMAKE_SYSTEM_NAME' or 'VCPKG_CHAINLOAD_TOOLCHAIN_FILE' in the triplet file.",
  "_ErrorVcvarsUnsupported.comment": "An example of {triplet} is x64-windows.",
  "ErrorVsCodeNotFound": "Visual Studio Code was not found and the environment variable {env_var} is not set or invalid.",
  "_ErrorVsCodeNotFound.comment": "An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "ErrorVsCodeNotFoundPathExamined": "The following paths were examined:",
  "ErrorWhileFetchingBaseline": "while fetching baseline `\"{value}\"` from repo {package_name}:",
  "_ErrorWhileFetchingBaseline.comment": "{value} is a commit sha. An example of {package_name} is zlib.",
  "ErrorWhileParsing": "Errors occurred while parsing {path}.",
  "_ErrorWhileParsing.comment": "An example of {path} is /foo/bar.",
  "ErrorWhileWriting": "Error occured while writing {path}",
  "_ErrorWhileWriting.comment": "An example of {path} is /foo/bar.",
  "ErrorsFound": "Found the following errors:",
  "ExceededRecursionDepth": "Recursion depth exceeded.",
  "ExcludedPackage": "Excluded {spec}",
  "_ExcludedPackage.comment": "An example of {spec} is zlib:x64-windows.",
  "ExcludedPackages": "The following packages are excluded:",
  "ExpectedAtMostOneSetOfTags": "Found {count} sets of {old_value}.*{new_value} but expected at most 1, in block:\n{value}",
  "_ExpectedAtMostOneSetOfTags.comment": "{old_value} is a left tag and {new_value} is the right tag. {value} is the input. An example of {count} is 42.",
  "ExpectedCascadeFailure": "Expected {expected} cascade failure, but there were {actual} cascade failures.",
  "_ExpectedCascadeFailure.comment": "{expected} is the expected number of cascade failures and {actual} is the actual number of cascade failures.",
  "ExpectedCharacterHere": "expected '{expected}' here",
  "_ExpectedCharacterHere.comment": "{expected} is a locale-invariant delimiter; for example, the ':' or '=' in 'zlib:x64-windows=skip'",
  "ExpectedDigitsAfterDecimal": "Expected digits after the decimal point",
  "ExpectedExtension": "The file extension was not {extension}: {path}",
  "_ExpectedExtension.comment": "An example of {extension} is .exe. An example of {path} is /foo/bar.",
  "ExpectedFailOrSkip": "expected 'fail', 'skip', or 'pass' here",
  "ExpectedOneSetOfTags": "Found {count} sets of {old_value}.*{new_value} but expected exactly 1, in block:\n{value}",
  "_ExpectedOneSetOfTags.comment": "{old_value} is a left tag and {new_value} is the right tag. {value} is the input. An example of {count} is 42.",
  "ExpectedPathToExist": "Expected {path} to exist after fetching",
  "_ExpectedPathToExist.comment": "An example of {path} is /foo/bar.",
  "ExpectedPortName": "expected a port name here",
  "ExpectedStatusField": "Expected 'status' field in status paragraph",
  "ExpectedTripletName": "expected a triplet name here",
  "ExpectedValueForOption": "expected value after --{option}.",
  "_ExpectedValueForOption.comment": "An example of {option} is editable.",
  "ExportArchitectureReq": "Export prefab requires targeting at least one of the following architectures arm64-v8a, armeabi-v7a, x86_64, x86 to be present.",
  "ExportPrefabRequiresAndroidTriplet": "export prefab requires an Android triplet.",
  "ExportUnsupportedInManifest": "vcpkg export does not support manifest mode, in order to allow for future design considerations. You may use export in classic mode by running vcpkg outside of a manifest-based project.",
  "Exported7zipArchive": "7zip archive exported at: {path}",
  "_Exported7zipArchive.comment": "An example of {path} is /foo/bar.",
  "ExportedZipArchive": "Zip archive exported at: {path}",
  "_ExportedZipArchive.comment": "An example of {path} is /foo/bar.",
  "ExportingAlreadyBuiltPackages": "The following packages are already built and will be exported:",
  "ExportingMaintenanceTool": "Exporting maintenance tool...",
  "ExportingPackage": "Exporting {package_name}...",
  "_ExportingPackage.comment": "An example of {package_name} is zlib.",
  "ExtendedDocumentationAtUrl": "Extended documentation available at '{url}'.",
  "_ExtendedDocumentationAtUrl.comment": "An example of {url} is https://github.com/microsoft/vcpkg.",
  "ExtractingTool": "Extracting {tool_name}...",
  "_ExtractingTool.comment": "An example of {tool_name} is aria2.",
  "FailedPostBuildChecks": "Found {count} post-build check problem(s). To submit these ports to curated catalogs, please first correct the portfile: {path}",
  "_FailedPostBuildChecks.comment": "An example of {count} is 42. An example of {path} is /foo/bar.",
  "FailedToCheckoutRepo": "failed to check out `versions` from repo {package_name}",
  "_FailedToCheckoutRepo.comment": "An example of {package_name} is zlib.",
  "FailedToDetermineArchitecture": "unable to determine the architecture of {path}.\n{command_line}",
  "_FailedToDetermineArchitecture.comment": "An example of {path} is /foo/bar. An example of {command_line} is vcpkg install zlib.",
  "FailedToDetermineCurrentCommit": "Failed to determine the current commit:",
  "FailedToDownloadFromMirrorSet": "Failed to download from mirror set",
  "FailedToExtract": "Failed to extract \"{path}\":",
  "_FailedToExtract.comment": "An example of {path} is /foo/bar.",
  "FailedToFetchError": "{error_msg}\nFailed to fetch {package_name}:",
  "_FailedToFetchError.comment": "An example of {error_msg} is File Not Found. An example of {package_name} is zlib.",
  "FailedToFindBaseline": "Failed to find baseline.json",
  "FailedToFindPortFeature": "Could not find {feature} in {spec}.",
  "_FailedToFindPortFeature.comment": "An example of {feature} is avisynthplus. An example of {spec} is zlib:x64-windows.",
  "FailedToFormatMissingFile": "No files to format.\nPlease pass either --all, or the explicit files to format or convert.",
  "FailedToLoadInstalledManifest": "The control or manifest file for {spec} could not be loaded due to the following error. Please remove {spec} and try again.",
  "_FailedToLoadInstalledManifest.comment": "An example of {spec} is zlib:x64-windows.",
  "FailedToLoadManifest": "Failed to load manifest from directory {path}",
  "_FailedToLoadManifest.comment": "An example of {path} is /foo/bar.",
  "FailedToLoadPort": "Failed to load port {package_name} from {path}",
  "_FailedToLoadPort.comment": "An example of {package_name} is zlib. An example of {path} is /foo/bar.",
  "FailedToLoadPortFrom": "Failed to load port from {path}",
  "_FailedToLoadPortFrom.comment": "An example of {path} is /foo/bar.",
  "FailedToLoadUnnamedPortFromPath": "Failed to load port from {path}",
  "_FailedToLoadUnnamedPortFromPath.comment": "An example of {path} is /foo/bar.",
  "FailedToLocateSpec": "Failed to locate spec in graph: {spec}",
  "_FailedToLocateSpec.comment": "An example of {spec} is zlib:x64-windows.",
  "FailedToObtainDependencyVersion": "Cannot find desired dependency version.",
  "FailedToObtainLocalPortGitSha": "Failed to obtain git SHAs for local ports.",
  "FailedToObtainPackageVersion": "Cannot find desired package version.",
  "FailedToParseCMakeConsoleOut": "Failed to parse CMake console output to locate block start/end markers.",
  "FailedToParseConfig": "Failed to parse configuration {path}",
  "_FailedToParseConfig.comment": "An example of {path} is /foo/bar.",
  "FailedToParseControl": "Failed to parse control file: {path}",
  "_FailedToParseControl.comment": "An example of {path} is /foo/bar.",
  "FailedToParseJson": "Failed to parse JSON file: {path}",
  "_FailedToParseJson.comment": "An example of {path} is /foo/bar.",
  "FailedToParseManifest": "Failed to parse manifest file: {path}",
  "_FailedToParseManifest.comment": "An example of {path} is /foo/bar.",
  "FailedToParseNoTopLevelObj": "Failed to parse {path}, expected a top-level object.",
  "_FailedToParseNoTopLevelObj.comment": "An example of {path} is /foo/bar.",
  "FailedToParseSerializedBinParagraph": "[sanity check] Failed to parse a serialized binary paragraph.\nPlease open an issue at https://github.com/microsoft/vcpkg, with the following output:\n{error_msg}\nSerialized Binary Paragraph:",
  "_FailedToParseSerializedBinParagraph.comment": "'{error_msg}' is the error message for failing to parse the Binary Paragraph. An example of {error_msg} is File Not Found.",
  "FailedToParseVersionXML": "Could not parse version for tool {tool_name}. Version string was: {version}",
  "_FailedToParseVersionXML.comment": "An example of {tool_name} is aria2. An example of {version} is 1.3.8.",
  "FailedToProvisionCe": "Failed to provision vcpkg-ce.",
  "FailedToRead": "Failed to read {path}: {error_msg}",
  "_FailedToRead.comment": "An example of {path} is /foo/bar. An example of {error_msg} is File Not Found.",
  "FailedToReadParagraph": "Failed to read paragraphs from {path}",
  "_FailedToReadParagraph.comment": "An example of {path} is /foo/bar.",
  "FailedToRemoveControl": "Failed to remove control file {path}",
  "_FailedToRemoveControl.comment": "An example of {path} is /foo/bar.",
  "FailedToRunToolToDetermineVersion": "Failed to run \"{path}\" to determine the {tool_name} version.",
  "_FailedToRunToolToDetermineVersion.comment": "Additional information, such as the command line output, if any, will be appended on the line after this message An example of {tool_name} is aria2. An example of {path} is /foo/bar.",
  "FailedToStoreBackToMirror": "failed to store back to mirror:",
  "FailedToStoreBinaryCache": "Failed to store binary cache {path}",
  "_FailedToStoreBinaryCache.comment": "An example of {path} is /foo/bar.",
  "FailedToTakeFileSystemLock": "Failed to take the filesystem lock on {path}",
  "_FailedToTakeFileSystemLock.comment": "An example of {path} is /foo/bar.",
  "FailedToWriteManifest": "Failed to write manifest file {path}",
  "_FailedToWriteManifest.comment": "An example of {path} is /foo/bar.",
  "FailedVendorAuthentication": "One or more {vendor} credential providers failed to authenticate. See '{url}' for more details on how to provide credentials.",
  "_FailedVendorAuthentication.comment": "An example of {vendor} is Azure. An example of {url} is https://github.com/microsoft/vcpkg.",
  "FeedbackAppreciated": "Thank you for your feedback!",
  "FetchingBaselineInfo": "Fetching baseline information from {package_name}...",
  "_FetchingBaselineInfo.comment": "An example of {package_name} is zlib.",
  "FetchingRegistryInfo": "Fetching registry information from {url} ({value})...",
  "_FetchingRegistryInfo.comment": "{value} is a reference An example of {url} is https://github.com/microsoft/vcpkg.",
  "FileNotFound": "{path}: file not found",
  "_FileNotFound.comment": "An example of {path} is /foo/bar.",
  "FileReadFailed": "Failed to read {count} bytes from {path} at offset {byte_offset}.",
  "_FileReadFailed.comment": "An example of {path} is /foo/bar. An example of {byte_offset} is 42. An example of {count} is 42.",
  "FileSeekFailed": "Failed to seek to position {byte_offset} in {path}.",
  "_FileSeekFailed.comment": "An example of {path} is /foo/bar. An example of {byte_offset} is 42.",
  "FileSystemOperationFailed": "Filesystem operation failed:",
  "FilesExported": "Files exported at: {path}",
  "_FilesExported.comment": "An example of {path} is /foo/bar.",
  "FishCompletion": "vcpkg fish completion is already added at \"{path}\".",
  "_FishCompletion.comment": "An example of {path} is /foo/bar.",
  "FloatingPointConstTooBig": "Floating point constant too big: {count}",
  "_FloatingPointConstTooBig.comment": "An example of {count} is 42.",
  "FollowingPackagesMissingControl": "The following packages do not have a valid CONTROL or vcpkg.json:",
  "FollowingPackagesNotInstalled": "The following packages are not installed:",
  "FollowingPackagesUpgraded": "The following packages are up-to-date:",
  "ForceSystemBinariesOnWeirdPlatforms": "Environment variable VCPKG_FORCE_SYSTEM_BINARIES must be set on arm, s390x, and ppc64le platforms.",
  "FormattedParseMessageExpression": "on expression: {value}",
  "_FormattedParseMessageExpression.comment": "Example of {value} is 'x64 & windows'",
  "GenerateMsgErrorParsingFormatArgs": "parsing format string for {value}:",
  "_GenerateMsgErrorParsingFormatArgs.comment": "example of {value} 'GenerateMsgNoComment'",
  "GenerateMsgIncorrectComment": "message {value} has an incorrect comment:",
  "_GenerateMsgIncorrectComment.comment": "example of {value} is 'GenerateMsgNoComment'",
  "GenerateMsgNoArgumentValue": "{{{value}}} was specified in a comment, but was not used in the message.",
  "_GenerateMsgNoArgumentValue.comment": "example of {value} is 'arch'",
  "GenerateMsgNoCommentValue": "{{{value}}} was used in the message, but not commented.",
  "_GenerateMsgNoCommentValue.comment": "example of {value} is 'arch'",
  "GeneratedConfiguration": "Generated configuration {path}.",
  "_GeneratedConfiguration.comment": "An example of {path} is /foo/bar.",
  "GeneratedInstaller": "{path} installer generated.",
  "_GeneratedInstaller.comment": "An example of {path} is /foo/bar.",
  "GeneratingConfiguration": "Generating configuration {path}...",
  "_GeneratingConfiguration.comment": "An example of {path} is /foo/bar.",
  "GeneratingInstaller": "Generating installer {path}...",
  "_GeneratingInstaller.comment": "An example of {path} is /foo/bar.",
  "GeneratingRepo": "Generating repository {path}...",
  "_GeneratingRepo.comment": "An example of {path} is /foo/bar.",
  "GetParseFailureInfo": "Use '--debug' to get more information about the parse failures.",
  "GitCommandFailed": "failed to execute: {command_line}",
  "_GitCommandFailed.comment": "An example of {command_line} is vcpkg install zlib.",
  "GitRegistryMustHaveBaseline": "The git registry entry for \"{package_name}\" must have a \"baseline\" field that is a valid git commit SHA (40 hexadecimal characters).\nThe current HEAD of that repo is \"{value}\".",
  "_GitRegistryMustHaveBaseline.comment": "{value} is a commit sha An example of {package_name} is zlib.",
  "GitStatusOutputExpectedFileName": "expected a file name",
  "GitStatusOutputExpectedNewLine": "expected new line",
  "GitStatusOutputExpectedRenameOrNewline": "expected renamed file or new lines",
  "GitStatusUnknownFileStatus": "unknown file status: {value}",
  "_GitStatusUnknownFileStatus.comment": "{value} is a single character indicating file status, for example: A, U, M, D",
  "GitUnexpectedCommandOutput": "unexpected git output",
  "GraphCycleDetected": "Cycle detected within graph at {package_name}:",
  "_GraphCycleDetected.comment": "A list of package names comprising the cycle will be printed after this message. An example of {package_name} is zlib.",
  "HashFileFailureToRead": "failed to read file \"{path}\" for hashing: ",
  "_HashFileFailureToRead.comment": "Printed after ErrorMessage and before the specific failing filesystem operation (like file not found) An example of {path} is /foo/bar.",
  "HeaderOnlyUsage": "{package_name} is header-only and can be used from CMake via:",
  "_HeaderOnlyUsage.comment": "'header' refers to C/C++ .h files An example of {package_name} is zlib.",
  "HelpBuiltinBase": "The baseline references a commit within the vcpkg repository that establishes a minimum version on every dependency in the graph. For example, if no other constraints are specified (directly or transitively), then the version will resolve to the baseline of the top level manifest. Baselines of transitive dependencies are ignored.",
  "HelpContactCommand": "Display contact information to send feedback.",
  "HelpCreateCommand": "Create a new port.",
  "HelpDependInfoCommand": "Display a list of dependencies for ports.",
  "HelpEditCommand": "Open a port for editing (use the environment variable '{env_var}' to set an editor program, defaults to 'code').",
  "_HelpEditCommand.comment": "An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "HelpEnvCommand": "Creates a clean shell environment for development or compiling.",
  "HelpExampleCommand": "For more help (including examples) see the accompanying README.md and docs folder.",
  "HelpExampleManifest": "Example manifest:",
  "HelpExportCommand": "Exports a package.",
  "HelpFormatManifestCommand": "Formats all vcpkg.json files. Run this before committing to vcpkg.",
  "HelpHashCommand": "Hash a file by specific algorithm, default SHA512.",
  "HelpInitializeRegistryCommand": "Initializes a registry in the directory <path>.",
  "HelpInstallCommand": "Install a package.",
  "HelpListCommand": "List installed packages.",
  "HelpManifestConstraints": "Manifests can place three kinds of constraints upon the versions used",
  "HelpMinVersion": "Vcpkg will select the minimum version found that matches all applicable constraints, including the version from the baseline specified at top-level as well as any \"version>=\" constraints in the graph.",
  "HelpOverrides": "When used as the top-level manifest (such as when running `vcpkg install` in the directory), overrides allow a manifest to short-circuit dependency resolution and specify exactly the version to use. These can be used to handle version conflicts, such as with `version-string` dependencies. They will not be considered when transitively depended upon.",
  "HelpOwnsCommand": "Search for files in installed packages.",
  "HelpPackagePublisher": "Additionally, package publishers can use \"version>=\" constraints to ensure that consumers are using at least a certain minimum version of a given dependency. For example, if a library needs an API added to boost-asio in 1.70, a \"version>=\" constraint will ensure transitive users use a sufficient version even in the face of individual version overrides or cross-registry references.",
  "HelpPortVersionScheme": "Each version additionally has a \"port-version\" which is a nonnegative integer. When rendered as text, the port version (if nonzero) is added as a suffix to the primary version text separated by a hash (#). Port-versions are sorted lexographically after the primary version text, for example:\n1.0.0 < 1.0.0#1 < 1.0.1 < 1.0.1#5 < 2.0.0",
  "HelpRemoveCommand": "Uninstall a package.",
  "HelpRemoveOutdatedCommand": "Uninstall all out-of-date packages.",
  "HelpResponseFileCommand": "Specify a response file to provide additional parameters.",
  "HelpSearchCommand": "Search for packages available to be built.",
  "HelpTextOptFullDesc": "Do not truncate long text",
  "HelpTopicCommand": "Display help for a specific topic.",
  "HelpTopicsCommand": "Display the list of help topics.",
  "HelpTxtOptAllowUnsupportedPort": "Instead of erroring on an unsupported port, continue with a warning.",
  "HelpTxtOptCleanAfterBuild": "Clean buildtrees, packages and downloads after building each package",
  "HelpTxtOptCleanBuildTreesAfterBuild": "Clean buildtrees after building each package",
  "HelpTxtOptCleanDownloadsAfterBuild": "Clean downloads after building each package",
  "HelpTxtOptCleanPkgAfterBuild": "Clean packages after building each package",
  "HelpTxtOptDryRun": "Do not actually build or install.",
  "HelpTxtOptEditable": "Disable source re-extraction and binary caching for libraries on the command line (classic mode)",
  "HelpTxtOptEnforcePortChecks": "Fail install if a port has detected problems or attempts to use a deprecated feature",
  "HelpTxtOptKeepGoing": "Continue installing packages on failure",
  "HelpTxtOptManifestFeature": "Additional feature from the top-level manifest to install (manifest mode).",
  "HelpTxtOptManifestNoDefault": "Don't install the default features from the top-level manifest (manifest mode).",
  "HelpTxtOptNoDownloads": "Do not download new sources",
  "HelpTxtOptNoUsage": "Don't print CMake usage information after install.",
  "HelpTxtOptOnlyBinCache": "Fail if cached binaries are not available",
  "HelpTxtOptOnlyDownloads": "Download sources but don't build packages",
  "HelpTxtOptRecurse": "Allow removal of packages as part of installation",
  "HelpTxtOptUseAria2": "Use aria2 to perform download tasks",
  "HelpTxtOptUseHeadVersion": "Install the libraries on the command line using the latest upstream sources (classic mode)",
  "HelpTxtOptWritePkgConfig": "Writes out a NuGet packages.config-formatted file for use with external binary caching.\nSee `vcpkg help binarycaching` for more information.",
  "HelpUpdateBaseline": "The best approach to keep your libraries up to date, the best approach is to update your baseline reference. This will ensure all packages, including transitive ones, are updated. However if you need to update a package independently, you can use a \"version>=\" constraint.",
  "HelpUpdateCommand": "List packages that can be updated.",
  "HelpUpgradeCommand": "Rebuild all outdated packages.",
  "HelpVersionCommand": "Display version information.",
  "HelpVersionDateScheme": "A date (2021-01-01.5)",
  "HelpVersionGreater": "Within the \"dependencies\" field, each dependency can have a minimum constraint listed. These minimum constraints will be used when transitively depending upon this library. A minimum port-version can additionally be specified with a '#' suffix.",
  "HelpVersionScheme": "A dot-separated sequence of numbers (1.2.3.4)",
  "HelpVersionSchemes": "The following versioning schemes are accepted.",
  "HelpVersionSemverScheme": "A Semantic Version 2.0 (2.1.0-rc2)",
  "HelpVersionStringScheme": "An exact, incomparable version (Vista)",
  "HelpVersioning": "Versioning allows you to deterministically control the precise revisions of dependencies used by your project from within your manifest file.",
  "IgnoringVcpkgRootEnvironment": "The vcpkg {value} is using detected vcpkg root {actual} and ignoring mismatched VCPKG_ROOT environment value {path}. To suppress this message, unset the environment variable or use the --vcpkg-root command line switch.",
  "_IgnoringVcpkgRootEnvironment.comment": "{actual} is the path we actually used, {value} is the path to vcpkg's binary An example of {path} is /foo/bar.",
  "IllegalFeatures": "List of features is not allowed in this context",
  "IllegalPlatformSpec": "Platform qualifier is not allowed in this context",
  "ImproperShaLength": "SHA512's must be 128 hex characters: {value}",
  "_ImproperShaLength.comment": "{value} is a sha.",
  "IncorrectArchiveFileSignature": "Incorrect archive file signature",
  "IncorrectLibHeaderEnd": "Incorrect lib header end",
  "IncorrectNumberOfArgs": "'{command_name}' requires '{expected}' arguments, but '{actual}' were provided.",
  "_IncorrectNumberOfArgs.comment": "'{expected}' is the required number of arguments. '{actual}' is the number of arguments provided. An example of {command_name} is install.",
  "IncorrectPESignature": "Incorrect PE signature",
  "IncrementedUtf8Decoder": "Incremented Utf8Decoder at the end of the string",
  "InfoSetEnvVar": "You can also set the environment variable '{env_var}' to your editor of choice.",
  "_InfoSetEnvVar.comment": "In this context 'editor' means IDE An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "InitRegistryFailedNoRepo": "Could not create a registry at {path} because this is not a git repository root.\nUse `git init {command_line}` to create a git repository in this folder.",
  "_InitRegistryFailedNoRepo.comment": "An example of {path} is /foo/bar. An example of {command_line} is vcpkg install zlib.",
  "InstallFailed": "failed: {path}: {error_msg}",
  "_InstallFailed.comment": "An example of {path} is /foo/bar. An example of {error_msg} is File Not Found.",
  "InstallPackageInstruction": "With a project open, go to Tools->NuGet Package Manager->Package Manager Console and paste:\n Install-Package \"{value}\" -Source \"{path}\"",
  "_InstallPackageInstruction.comment": "'{value}' is the nuget id. An example of {path} is /foo/bar.",
  "InstallRootDir": "(Experimental) Specify the install root directory.",
  "InstallWithSystemManager": "You may be able to install this tool via your system package manager.",
  "InstallWithSystemManagerMono": "Ubuntu 18.04 users may need a newer version of mono, available at {url}.",
  "_InstallWithSystemManagerMono.comment": "An example of {url} is https://github.com/microsoft/vcpkg.",
  "InstallWithSystemManagerPkg": "You may be able to install this tool via your system package manager ({command_line}).",
  "_InstallWithSystemManagerPkg.comment": "An example of {command_line} is vcpkg install zlib.",
  "InstalledBy": "Installed by {path}",
  "_InstalledBy.comment": "An example of {path} is /foo/bar.",
  "InstalledPackages": "The following packages are already installed:",
  "InstalledRequestedPackages": "All requested packages are currently installed.",
  "InstallingFromLocation": "-- Installing port from location: {path}",
  "_InstallingFromLocation.comment": "'--' at the beginning must be preserved An example of {path} is /foo/bar.",
  "InstallingMavenFile": "{path} installing Maven file",
  "_InstallingMavenFile.comment": "Printed after a filesystem operation error An example of {path} is /foo/bar.",
  "InstallingPackage": "Installing {action_index}/{count} {spec}...",
  "_InstallingPackage.comment": "An example of {action_index} is 340. An example of {count} is 42. An example of {spec} is zlib:x64-windows.",
  "IntegrationFailed": "Integration was not applied.",
  "InternalCICommand": "vcpkg ci is an internal command which will change incompatibly or be removed at any time.",
  "InternalErrorMessage": "internal error: ",
  "InternalErrorMessageContact": "Please open an issue at https://github.com/microsoft/vcpkg/issues/new?template=other-type-of-bug-report.md&labels=category:vcpkg-bug with detailed steps to reproduce the problem.",
  "InvalidArgMustBeAnInt": "--{option} must be an integer.",
  "_InvalidArgMustBeAnInt.comment": "An example of {option} is editable.",
  "InvalidArgMustBePositive": "--{option} must be non-negative.",
  "_InvalidArgMustBePositive.comment": "An example of {option} is editable.",
  "InvalidArgument": "invalid argument",
  "InvalidArgumentRequiresAbsolutePath": "invalid argument: binary config '{binary_source}' path arguments for binary config strings must be absolute",
  "_InvalidArgumentRequiresAbsolutePath.comment": "An example of {binary_source} is azblob.",
  "InvalidArgumentRequiresBaseUrl": "invalid argument: binary config '{binary_source}' requires a {base_url} base url as the first argument",
  "_InvalidArgumentRequiresBaseUrl.comment": "An example of {base_url} is azblob://. An example of {binary_source} is azblob.",
  "InvalidArgumentRequiresBaseUrlAndToken": "invalid argument: binary config '{binary_source}' requires at least a base-url and a SAS token",
  "_InvalidArgumentRequiresBaseUrlAndToken.comment": "An example of {binary_source} is azblob.",
  "InvalidArgumentRequiresNoneArguments": "invalid argument: binary config '{binary_source}' does not take arguments",
  "_InvalidArgumentRequiresNoneArguments.comment": "An example of {binary_source} is azblob.",
  "InvalidArgumentRequiresOneOrTwoArguments": "invalid argument: binary config '{binary_source}' requires 1 or 2 arguments",
  "_InvalidArgumentRequiresOneOrTwoArguments.comment": "An example of {binary_source} is azblob.",
  "InvalidArgumentRequiresPathArgument": "invalid argument: binary config '{binary_source}' requires at least one path argument",
  "_InvalidArgumentRequiresPathArgument.comment": "An example of {binary_source} is azblob.",
  "InvalidArgumentRequiresPrefix": "invalid argument: binary config '{binary_source}' requires at least one prefix",
  "_InvalidArgumentRequiresPrefix.comment": "An example of {binary_source} is azblob.",
  "InvalidArgumentRequiresSingleArgument": "invalid argument: binary config '{binary_source}' does not take more than 1 argument",
  "_InvalidArgumentRequiresSingleArgument.comment": "An example of {binary_source} is azblob.",
  "InvalidArgumentRequiresSingleStringArgument": "invalid argument: binary config '{binary_source}' expects a single string argument",
  "_InvalidArgumentRequiresSingleStringArgument.comment": "An example of {binary_source} is azblob.",
  "InvalidArgumentRequiresSourceArgument": "invalid argument: binary config '{binary_source}' requires at least one source argument",
  "_InvalidArgumentRequiresSourceArgument.comment": "An example of {binary_source} is azblob.",
  "InvalidArgumentRequiresTwoOrThreeArguments": "invalid argument: binary config '{binary_source}' requires 2 or 3 arguments",
  "_InvalidArgumentRequiresTwoOrThreeArguments.comment": "An example of {binary_source} is azblob.",
  "InvalidArgumentRequiresValidToken": "invalid argument: binary config '{binary_source}' requires a SAS token without a preceeding '?' as the second argument",
  "_InvalidArgumentRequiresValidToken.comment": "An example of {binary_source} is azblob.",
  "InvalidBuildInfo": "Invalid BUILD_INFO file for package: {error_msg}",
  "_InvalidBuildInfo.comment": "An example of {error_msg} is File Not Found.",
  "InvalidBuiltInBaseline": "the top-level builtin-baseline ({value}) was not a valid commit sha: expected 40 hexadecimal characters.",
  "_InvalidBuiltInBaseline.comment": "{value} is a git commit sha",
  "InvalidBundleDefinition": "Invalid bundle definition.",
  "InvalidCodePoint": "Invalid code point passed to utf8_encoded_code_point_count",
  "InvalidCodeUnit": "invalid code unit",
  "InvalidCommandArgSort": "Value of --sort must be one of 'lexicographical', 'topological', 'reverse'.",
  "InvalidCommentStyle": "vcpkg does not support c-style comments, however most objects allow $-prefixed fields to be used as comments.",
  "InvalidCommitId": "Invalid commit id: {commit_sha}",
  "_InvalidCommitId.comment": "An example of {commit_sha} is a18442042722dd48e20714ec034a12fcc0576c9af7be5188586970e2edf47529825bdc99af366b1d5891630c8dbf6f63bfa9f012e77ab3d3ed80d1a118e3b2be.",
  "InvalidFileType": "failed: {path} cannot handle file type",
  "_InvalidFileType.comment": "An example of {path} is /foo/bar.",
  "InvalidFilename": "Filename cannot contain invalid chars {value}, but was {path}",
  "_InvalidFilename.comment": "'{value}' is a list of invalid characters. I.e. \\/:*?<>| An example of {path} is /foo/bar.",
  "InvalidFloatingPointConst": "Invalid floating point constant: {count}",
  "_InvalidFloatingPointConst.comment": "An example of {count} is 42.",
  "InvalidFormatString": "invalid format string: {actual}",
  "_InvalidFormatString.comment": "{actual} is the provided format string",
  "InvalidHexDigit": "Invalid hex digit in unicode escape",
  "InvalidIntegerConst": "Invalid integer constant: {count}",
  "_InvalidIntegerConst.comment": "An example of {count} is 42.",
  "InvalidLinkage": "Invalid {system_name} linkage type: [{value}]",
  "_InvalidLinkage.comment": "'{value}' is the linkage type vcpkg would did not understand. (Correct values would be static ofr dynamic) An example of {system_name} is Darwin.",
  "InvalidOptionForRemove": "'remove' accepts either libraries or '--outdated'",
  "_InvalidOptionForRemove.comment": "'remove' is a command that should not be changed.",
  "InvalidPortVersonName": "Found invalid port version file name: `{path}`.",
  "_InvalidPortVersonName.comment": "An example of {path} is /foo/bar.",
  "InvalidString": "Invalid utf8 passed to Value::string(std::string)",
  "InvalidTriplet": "Invalid triplet: {triplet}",
  "_InvalidTriplet.comment": "An example of {triplet} is x64-windows.",
  "IrregularFile": "path was not a regular file: {path}",
  "_IrregularFile.comment": "An example of {path} is /foo/bar.",
  "JsonErrorMustBeAnObject": "Expected \"{path}\" to be an object.",
  "_JsonErrorMustBeAnObject.comment": "An example of {path} is /foo/bar.",
  "JsonFileMissingExtension": "the JSON file {path} must have a .json (all lowercase) extension",
  "_JsonFileMissingExtension.comment": "An example of {path} is /foo/bar.",
  "JsonSwitch": "(Experimental) Request JSON output.",
  "JsonValueNotArray": "json value is not an array",
  "JsonValueNotObject": "json value is not an object",
  "JsonValueNotString": "json value is not a string",
  "LaunchingProgramFailed": "Launching {tool_name}:",
  "_LaunchingProgramFailed.comment": "A platform API call failure message is appended after this An example of {tool_name} is aria2.",
  "LicenseExpressionContainsExtraPlus": "SPDX license expression contains an extra '+'. These are only allowed directly after a license identifier.",
  "LicenseExpressionContainsInvalidCharacter": "SPDX license expression contains an invalid character (0x{value:02X} '{value}').",
  "_LicenseExpressionContainsInvalidCharacter.comment": "example of {value:02X} is '7B'\nexample of {value} is '{'",
  "LicenseExpressionContainsUnicode": "SPDX license expression contains a unicode character (U+{value:04X} '{pretty_value}'), but these expressions are ASCII-only.",
  "_LicenseExpressionContainsUnicode.comment": "example of {value:04X} is '22BB'\nexample of {pretty_value} is '⊻'",
  "LicenseExpressionDocumentRefUnsupported": "The current implementation does not support DocumentRef- SPDX references.",
  "LicenseExpressionExpectCompoundFoundParen": "Expected a compound or the end of the string, found a parenthesis.",
  "LicenseExpressionExpectCompoundFoundWith": "Expected either AND or OR, found WITH (WITH is only allowed after license names, not parenthesized expressions).",
  "_LicenseExpressionExpectCompoundFoundWith.comment": "AND, OR, and WITH are all keywords and should not be translated.",
  "LicenseExpressionExpectCompoundFoundWord": "Expected either AND or OR, found a license or exception name: '{value}'.",
  "_LicenseExpressionExpectCompoundFoundWord.comment": "Example of {value} is 'MIT'.\nAND and OR are both keywords and should not be translated.",
  "LicenseExpressionExpectCompoundOrWithFoundWord": "Expected either AND, OR, or WITH, found a license or exception name: '{value}'.",
  "_LicenseExpressionExpectCompoundOrWithFoundWord.comment": "example of {value} is 'MIT'.\nAND, OR, and WITH are all keywords and should not be translated.",
  "LicenseExpressionExpectExceptionFoundCompound": "Expected an exception name, found the compound {value}.",
  "_LicenseExpressionExpectExceptionFoundCompound.comment": "Example of {value} is 'AND'",
  "LicenseExpressionExpectExceptionFoundEof": "Expected an exception name, found the end of the string.",
  "LicenseExpressionExpectExceptionFoundParen": "Expected an exception name, found a parenthesis.",
  "LicenseExpressionExpectLicenseFoundCompound": "Expected a license name, found the compound {value}.",
  "_LicenseExpressionExpectLicenseFoundCompound.comment": "Example of {value} is 'AND'",
  "LicenseExpressionExpectLicenseFoundEof": "Expected a license name, found the end of the string.",
  "LicenseExpressionExpectLicenseFoundParen": "Expected a license name, found a parenthesis.",
  "LicenseExpressionImbalancedParens": "There was a close parenthesis without an opening parenthesis.",
  "LicenseExpressionUnknownException": "Unknown license exception identifier '{value}'. Known values are listed at https://spdx.org/licenses/exceptions-index.html",
  "_LicenseExpressionUnknownException.comment": "Example of {value} is 'unknownexception'",
  "LicenseExpressionUnknownLicense": "Unknown license identifier '{value}'. Known values are listed at https://spdx.org/licenses/",
  "_LicenseExpressionUnknownLicense.comment": "Example of {value} is 'unknownlicense'",
  "ListOfValidFieldsForControlFiles": "This is the list of valid fields for CONTROL files (case-sensitive):",
  "LoadingCommunityTriplet": "-- [COMMUNITY] Loading triplet configuration from: {path}",
  "_LoadingCommunityTriplet.comment": "'-- [COMMUNITY]' at the beginning must be preserved An example of {path} is /foo/bar.",
  "LoadingDependencyInformation": "Loading dependency information for {count} packages...",
  "_LoadingDependencyInformation.comment": "An example of {count} is 42.",
  "LoadingOverlayTriplet": "-- [OVERLAY] Loading triplet configuration from: {path}",
  "_LoadingOverlayTriplet.comment": "'-- [OVERLAY]' at the beginning must be preserved An example of {path} is /foo/bar.",
  "LocalPortfileVersion": "Using local portfile versions. To update the local portfiles, use `git pull`.",
  "LocalizedMessageMustNotContainIndents": "The message named {value} contains what appears to be indenting which must be changed to use LocalizedString::append_indent instead.",
  "_LocalizedMessageMustNotContainIndents.comment": "{value} is is a localized message name like LocalizedMessageMustNotContainIndents. The 'LocalizedString::append_indent' part is locale-invariant.",
  "LocalizedMessageMustNotEndWithNewline": "The message named {value} ends with a newline which should be added by formatting rather than by localization.",
  "_LocalizedMessageMustNotEndWithNewline.comment": "{value} is a localized message name like LocalizedMessageMustNotEndWithNewline",
  "ManifestConflict": "Found both a manifest and CONTROL files in port \"{path}\"; please rename one or the other",
  "_ManifestConflict.comment": "An example of {path} is /foo/bar.",
  "ManifestFormatCompleted": "Succeeded in formatting the manifest files.",
  "MismatchedFiles": "file to store does not match hash",
  "MismatchedManifestAfterReserialize": "The serialized manifest was different from the original manifest. Please open an issue at https://github.com/microsoft/vcpkg, with the following output:",
  "_MismatchedManifestAfterReserialize.comment": "The original file output and generated output are printed after this line, in English as it's intended to be used in the issue submission and read by devs. This message indicates an internal error in vcpkg.",
  "MismatchedNames": "names did not match: '{package_name}' != '{actual}'",
  "_MismatchedNames.comment": "{actual} is the port name found An example of {package_name} is zlib.",
  "Missing7zHeader": "Unable to find 7z header.",
  "MissingAndroidEnv": "ANDROID_NDK_HOME environment variable missing",
  "MissingAndroidHomeDir": "ANDROID_NDK_HOME directory does not exist: {path}",
  "_MissingAndroidHomeDir.comment": "An example of {path} is /foo/bar.",
  "MissingArgFormatManifest": "format-manifest was passed --convert-control without '--all'.\nThis doesn't do anything: control files passed explicitly are converted automatically.",
  "MissingDependency": "Package {spec} is installed, but dependency {package_name} is not.",
  "_MissingDependency.comment": "An example of {spec} is zlib:x64-windows. An example of {package_name} is zlib.",
  "MissingExtension": "Missing '{extension}' extension.",
  "_MissingExtension.comment": "An example of {extension} is .exe.",
  "MissingOption": "This command requires --{option}",
  "_MissingOption.comment": "An example of {option} is editable.",
  "MissingPortSuggestPullRequest": "If your port is not listed, please open an issue at and/or consider making a pull request.",
  "MissmatchedBinParagraphs": "The serialized binary paragraph was different from the original binary paragraph. Please open an issue at https://github.com/microsoft/vcpkg with the following output:",
  "MonoInstructions": "This may be caused by an incomplete mono installation. Full mono is available on some systems via `sudo apt install mono-complete`. Ubuntu 18.04 users may need a newer version of mono, available at https://www.mono-project.com/download/stable/",
  "MsiexecFailedToExtract": "msiexec failed while extracting \"{path}\" with launch or exit code {exit_code} and message:",
  "_MsiexecFailedToExtract.comment": "An example of {path} is /foo/bar. An example of {exit_code} is 127.",
  "MultiArch": "Multi-Arch must be 'same' but was {option}",
  "_MultiArch.comment": "An example of {option} is editable.",
  "MutuallyExclusiveOption": "--{value} can not be used with --{option}.",
  "_MutuallyExclusiveOption.comment": "{value} is a second {option} switch An example of {option} is editable.",
  "NavigateToNPS": "Please navigate to {url} in your preferred browser.",
  "_NavigateToNPS.comment": "An example of {url} is https://github.com/microsoft/vcpkg.",
  "NewConfigurationAlreadyExists": "Creating a manifest would overwrite a vcpkg-configuration.json at {path}.",
  "_NewConfigurationAlreadyExists.comment": "An example of {path} is /foo/bar.",
  "NewManifestAlreadyExists": "A manifest is already present at {path}.",
  "_NewManifestAlreadyExists.comment": "An example of {path} is /foo/bar.",
  "NewNameCannotBeEmpty": "--name cannot be empty.",
  "NewOnlyOneVersionKind": "Only one of --version-relaxed, --version-date, or --version-string may be specified.",
  "NewSpecifyNameVersionOrApplication": "Either specify --name and --version to produce a manifest intended for C++ libraries, or specify --application to indicate that the manifest is not intended to be used as a port.",
  "NewVersionCannotBeEmpty": "--version cannot be empty.",
  "NoArgumentsForOption": "The option --{option} does not accept an argument.",
  "_NoArgumentsForOption.comment": "An example of {option} is editable.",
  "NoCachedPackages": "No packages are cached.",
  "NoError": "no error",
  "NoInstalledPackages": "No packages are installed. Did you mean `search`?",
  "_NoInstalledPackages.comment": "The name 'search' is the name of a command that is not localized.",
  "NoLocalizationForMessages": "No localized messages for the following: ",
  "NoOutdatedPackages": "There are no outdated packages.",
  "NoRegistryForPort": "no registry configured for port {package_name}",
  "_NoRegistryForPort.comment": "An example of {package_name} is zlib.",
  "NoteMessage": "note: ",
  "NugetPackageFileSucceededButCreationFailed": "NuGet package creation succeeded, but no .nupkg was produced. Expected: \"{path}\"",
  "_NugetPackageFileSucceededButCreationFailed.comment": "An example of {path} is /foo/bar.",
  "OptionMustBeInteger": "Value of --{option} must be an integer.",
  "_OptionMustBeInteger.comment": "An example of {option} is editable.",
  "OptionRequired": "--{option} option is required.",
  "_OptionRequired.comment": "An example of {option} is editable.",
  "OptionRequiresOption": "--{value} requires --{option}",
  "_OptionRequiresOption.comment": "{value} is a command line option. An example of {option} is editable.",
  "OriginalBinParagraphHeader": "\nOriginal Binary Paragraph",
  "OverlayPatchDir": "Overlay path \"{path}\" must exist and must be a directory.",
  "_OverlayPatchDir.comment": "An example of {path} is /foo/bar.",
  "OverlayTriplets": "Overlay triplets from {path} :",
  "_OverlayTriplets.comment": "An example of {path} is /foo/bar.",
  "OverwritingFile": "File {path} was already present and will be overwritten",
  "_OverwritingFile.comment": "An example of {path} is /foo/bar.",
  "PECoffHeaderTooShort": "While parsing Portable Executable {path}, size of COFF header too small to contain a valid PE header.",
  "_PECoffHeaderTooShort.comment": "Portable executable is a term-of-art, see https://learn.microsoft.com/en-us/windows/win32/debug/pe-format An example of {path} is /foo/bar.",
  "PEConfigCrossesSectionBoundary": "While parsing Portable Executable {path}, image config directory crosses a secion boundary.",
  "_PEConfigCrossesSectionBoundary.comment": "Portable executable is a term-of-art, see https://learn.microsoft.com/en-us/windows/win32/debug/pe-format An example of {path} is /foo/bar.",
  "PEImportCrossesSectionBoundary": "While parsing Portable Executable {path}, import table crosses a secion boundary.",
  "_PEImportCrossesSectionBoundary.comment": "Portable executable is a term-of-art, see https://learn.microsoft.com/en-us/windows/win32/debug/pe-format An example of {path} is /foo/bar.",
  "PEPlusTagInvalid": "While parsing Portable Executable {path}, optional header was neither PE32 nor PE32+.",
  "_PEPlusTagInvalid.comment": "Portable executable is a term-of-art, see https://learn.microsoft.com/en-us/windows/win32/debug/pe-format An example of {path} is /foo/bar.",
  "PERvaNotFound": "While parsing Portable Executable {path}, could not find RVA {value:#X}.",
  "_PERvaNotFound.comment": "{value:#X} is the Relative Virtual Address sought. Portable executable is a term-of-art, see https://learn.microsoft.com/en-us/windows/win32/debug/pe-format An example of {path} is /foo/bar.",
  "PESignatureMismatch": "While parsing Portable Executable {path}, signature mismatch.",
  "_PESignatureMismatch.comment": "Portable Executable is a term-of-art, see https://learn.microsoft.com/en-us/windows/win32/debug/pe-format An example of {path} is /foo/bar.",
  "PackageAlreadyRemoved": "unable to remove package {spec}: already removed",
  "_PackageAlreadyRemoved.comment": "An example of {spec} is zlib:x64-windows.",
  "PackageFailedtWhileExtracting": "'{value}' failed while extracting {path}.",
  "_PackageFailedtWhileExtracting.comment": "'{value}' is either a tool name or a package name. An example of {path} is /foo/bar.",
  "PackageRootDir": "(Experimental) Specify the packages root directory.",
  "PackagesToInstall": "The following packages will be built and installed:",
  "PackagesToInstallDirectly": "The following packages will be directly installed:",
  "PackagesToModify": "Additional packages (*) will be modified to complete this operation.",
  "PackagesToRebuild": "The following packages will be rebuilt:",
  "PackagesToRebuildSuggestRecurse": "If you are sure you want to rebuild the above packages, run the command with the --recurse option.",
  "PackagesToRemove": "The following packages will be removed:",
  "PackagesUpToDate": "No packages need updating.",
  "PackingVendorFailed": "Packing {vendor} failed. Use --debug for more information.",
  "_PackingVendorFailed.comment": "An example of {vendor} is Azure.",
  "PairedSurrogatesAreInvalid": "trailing surrogate following leading surrogate (paired surrogates are invalid)",
  "ParseControlErrorInfoInvalidFields": "The following fields were not expected:",
  "ParseControlErrorInfoMissingFields": "The following fields were missing:",
  "ParseControlErrorInfoTypesEntry": "{value} was expected to be {expected}",
  "_ParseControlErrorInfoTypesEntry.comment": "{value} is the name of a field in an on-disk file, {expected} is a short description of what it should be like 'a non-negative integer' (which isn't localized yet)",
  "ParseControlErrorInfoWhileLoading": "while loading {path}:",
  "_ParseControlErrorInfoWhileLoading.comment": "Error messages are is printed after this. An example of {path} is /foo/bar.",
  "ParseControlErrorInfoWrongTypeFields": "The following fields had the wrong types:",
  "PathMustBeAbsolute": "Value of environment variable X_VCPKG_REGISTRIES_CACHE is not absolute: {path}",
  "_PathMustBeAbsolute.comment": "An example of {path} is /foo/bar.",
  "PerformingPostBuildValidation": "-- Performing post-build validation",
  "PortBugAllowRestrictedHeaders": "In exceptional circumstances, this policy can be disabled via {env_var}",
  "_PortBugAllowRestrictedHeaders.comment": "An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "PortBugBinDirExists": "There should be no bin\\ directory in a static build, but {path} is present.",
  "_PortBugBinDirExists.comment": "An example of {path} is /foo/bar.",
  "PortBugDebugBinDirExists": "There should be no debug\\bin\\ directory in a static build, but {path} is present.",
  "_PortBugDebugBinDirExists.comment": "An example of {path} is /foo/bar.",
  "PortBugDebugShareDir": "/debug/share should not exist. Please reorganize any important files, then use\nfile(REMOVE_RECURSE \"${{CURRENT_PACKAGES_DIR}}/debug/share\")",
  "PortBugDllAppContainerBitNotSet": "The App Container bit must be set for Windows Store apps. The following DLLs do not have the App Container bit set:",
  "PortBugDllInLibDir": "The following dlls were found in /lib or /debug/lib. Please move them to /bin or /debug/bin, respectively.",
  "PortBugDuplicateIncludeFiles": "Include files should not be duplicated into the /debug/include directory. If this cannot be disabled in the project cmake, use\nfile(REMOVE_RECURSE \"${{CURRENT_PACKAGES_DIR}}/debug/include\")",
  "PortBugFoundCopyrightFiles": "The following files are potential copyright files:",
  "PortBugFoundDebugBinaries": "Found {count} debug binaries:",
  "_PortBugFoundDebugBinaries.comment": "An example of {count} is 42.",
  "PortBugFoundDllInStaticBuild": "DLLs should not be present in a static build, but the following DLLs were found:",
  "PortBugFoundEmptyDirectories": "There should be no empty directories in {path}. The following empty directories were found:",
  "_PortBugFoundEmptyDirectories.comment": "An example of {path} is /foo/bar.",
  "PortBugFoundExeInBinDir": "The following EXEs were found in /bin or /debug/bin. EXEs are not valid distribution targets.",
  "PortBugFoundReleaseBinaries": "Found {count} release binaries:",
  "_PortBugFoundReleaseBinaries.comment": "An example of {count} is 42.",
  "PortBugIncludeDirInCMakeHelperPort": "The folder /include exists in a cmake helper port; this is incorrect, since only cmake files should be installed",
  "PortBugInspectFiles": "To inspect the {extension} files, use:",
  "_PortBugInspectFiles.comment": "An example of {extension} is .exe.",
  "PortBugInvalidCrtLinkage": "Invalid crt linkage. Expected {expected}, but the following libs had:",
  "_PortBugInvalidCrtLinkage.comment": "{expected} is the expected build type",
  "PortBugMergeLibCMakeDir": "The /lib/cmake folder should be merged with /debug/lib/cmake and moved to /share/{spec}/cmake. Please use the helper function `vcpkg_cmake_config_fixup()` from the port vcpkg-cmake-config.`",
  "_PortBugMergeLibCMakeDir.comment": "An example of {spec} is zlib:x64-windows.",
  "PortBugMismatchedNumberOfBinaries": "Mismatching number of debug and release binaries.",
  "PortBugMisplacedCMakeFiles": "The following cmake files were found outside /share/{spec}. Please place cmake files in /share/{spec}.",
  "_PortBugMisplacedCMakeFiles.comment": "An example of {spec} is zlib:x64-windows.",
  "PortBugMisplacedFiles": "The following files are placed in {path}:",
  "_PortBugMisplacedFiles.comment": "An example of {path} is /foo/bar.",
  "PortBugMisplacedFilesCont": "Files cannot be present in those directories.",
  "PortBugMisplacedPkgConfigFiles": "pkgconfig directories should be one of share/pkgconfig (for header only libraries only), lib/pkgconfig, or lib/debug/pkgconfig. The following misplaced pkgconfig files were found:",
  "PortBugMissingDebugBinaries": "Debug binaries were not found.",
  "PortBugMissingFile": "The /{path} file does not exist. This file must exist for CMake helper ports.",
  "_PortBugMissingFile.comment": "An example of {path} is /foo/bar.",
  "PortBugMissingImportedLibs": "Import libraries were not present in {path}.\nIf this is intended, add the following line in the portfile:\nset(VCPKG_POLICY_DLLS_WITHOUT_LIBS enabled)",
  "_PortBugMissingImportedLibs.comment": "An example of {path} is /foo/bar.",
  "PortBugMissingIncludeDir": "The folder /include is empty or not present. This indicates the library was not correctly installed.",
  "PortBugMissingLicense": "The software license must be available at ${CURRENT_PACKAGES_DIR}/share/{spec}/copyright",
  "_PortBugMissingLicense.comment": "'{CURRENT_PACKAGES_DIR}' should not be translated. An example of {spec} is zlib:x64-windows.",
  "PortBugMissingReleaseBinaries": "Release binaries were not found.",
  "PortBugMovePkgConfigFiles": "You can move the pkgconfig files with commands similar to:",
  "PortBugOutdatedCRT": "Detected outdated dynamic CRT in the following files:",
  "PortBugRemoveBinDir": "If the creation of bin\\ and/or debug\\bin\\ cannot be disabled, use this in the portfile to remove them",
  "PortBugRemoveEmptyDirectories": "If a directory should be populated but is not, this might indicate an error in the portfile.\nIf the directories are not needed and their creation cannot be disabled, use something like this in the portfile to remove them:",
  "PortBugRemoveEmptyDirs": "vcpkg_fixup_pkgconfig()\nfile(REMOVE_RECURSE empty directories left by the above renames)",
  "_PortBugRemoveEmptyDirs.comment": "Only the 'empty directories left by the above renames' part should be translated",
  "PortBugRestrictedHeaderPaths": "The following restricted headers can prevent the core C++ runtime and other packages from compiling correctly. In exceptional circumstances, this policy can be disabled via {env_var}.",
  "_PortBugRestrictedHeaderPaths.comment": "A list of restricted headers is printed after this message, one per line. An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "PortBugSetDllsWithoutExports": "DLLs without any exports are likely a bug in the build script. If this is intended, add the following line in the portfile:\nset(VCPKG_POLICY_DLLS_WITHOUT_EXPORTS enabled)\nThe following DLLs have no exports:",
  "_PortBugSetDllsWithoutExports.comment": "'exports' means an entry in a DLL's export table. After this message, one file path per line is printed listing each DLL with an empty export table.",
  "PortDependencyConflict": "Port {package_name} has the following unsupported dependencies:",
  "_PortDependencyConflict.comment": "An example of {package_name} is zlib.",
  "PortNotInBaseline": "the baseline does not contain an entry for port {package_name}",
  "_PortNotInBaseline.comment": "An example of {package_name} is zlib.",
  "PortSupportsField": "(supports: \"{supports_expression}\")",
  "_PortSupportsField.comment": "An example of {supports_expression} is windows & !static.",
  "PortTypeConflict": "The port type of {spec} differs between the installed and available portfile.\nPlease manually remove {spec} and re-run this command.",
  "_PortTypeConflict.comment": "An example of {spec} is zlib:x64-windows.",
  "PortVersionConflict": "The following packages differ from their port versions:",
  "PortsAdded": "The following {count} ports were added:",
  "_PortsAdded.comment": "An example of {count} is 42.",
  "PortsNoDiff": "There were no changes in the ports between the two commits.",
  "PortsRemoved": "The following {count} ports were removed:",
  "_PortsRemoved.comment": "An example of {count} is 42.",
  "PortsUpdated": "\nThe following {count} ports were updated:",
  "_PortsUpdated.comment": "An example of {count} is 42.",
  "PrebuiltPackages": "There are packages that have not been built. To build them run:",
  "PreviousIntegrationFileRemains": "Previous integration file was not removed.",
  "ProgramReturnedNonzeroExitCode": "{tool_name} failed with exit code: ({exit_code}).",
  "_ProgramReturnedNonzeroExitCode.comment": "The program's console output is appended after this. An example of {tool_name} is aria2. An example of {exit_code} is 127.",
  "ProvideExportType": "At least one of the following options are required: --raw --nuget --ifw --zip --7zip --chocolatey --prefab.",
  "PushingVendorFailed": "Pushing {vendor} to \"{path}\" failed. Use --debug for more information.",
  "_PushingVendorFailed.comment": "An example of {vendor} is Azure. An example of {path} is /foo/bar.",
  "RegistryCreated": "Successfully created registry at {path}",
  "_RegistryCreated.comment": "An example of {path} is /foo/bar.",
  "RemoveDependencies": "To remove dependencies in manifest mode, edit your manifest (vcpkg.json) and run 'install'.",
  "RemovePackageConflict": "Another installed package matches the name of an unmatched request. Did you mean {spec}?",
  "_RemovePackageConflict.comment": "An example of {spec} is zlib:x64-windows.",
  "RemovingPackage": "Removing {action_index}/{count} {spec}",
  "_RemovingPackage.comment": "An example of {action_index} is 340. An example of {count} is 42. An example of {spec} is zlib:x64-windows.",
  "RestoredPackage": "Restored package from \"{path}\"",
  "_RestoredPackage.comment": "An example of {path} is /foo/bar.",
  "RestoredPackagesFromVendor": "Restored {count} package(s) from {value} in {elapsed}. Use --debug to see more details.",
  "_RestoredPackagesFromVendor.comment": "{value} may be either a 'vendor' like 'Azure' or 'NuGet', or a file path like C:\\example or /usr/example An example of {count} is 42. An example of {elapsed} is 3.532 min.",
  "ResultsHeader": "RESULTS",
  "_ResultsHeader.comment": "Displayed before a list of installation results.",
  "SeeURL": "See {url} for more information.",
  "_SeeURL.comment": "An example of {url} is https://github.com/microsoft/vcpkg.",
  "SerializedBinParagraphHeader": "\nSerialized Binary Paragraph",
  "SettingEnvVar": "-- Setting \"{env_var}\" environment variables to \"{url}\".",
  "_SettingEnvVar.comment": "An example of env_var is \"HTTP(S)_PROXY\"'--' at the beginning must be preserved An example of {env_var} is VCPKG_DEFAULT_TRIPLET. An example of {url} is https://github.com/microsoft/vcpkg.",
  "ShaPassedAsArgAndOption": "SHA512 passed as both an argument and as an option. Only pass one of these.",
  "ShaPassedWithConflict": "SHA512 passed, but --skip-sha512 was also passed; only do one or the other.",
  "ShallowRepositoryDetected": "vcpkg was cloned as a shallow repository in: {path}\nTry again with a full vcpkg clone.",
  "_ShallowRepositoryDetected.comment": "An example of {path} is /foo/bar.",
  "SkipClearingInvalidDir": "Skipping clearing contents of {path} because it was not a directory.",
  "_SkipClearingInvalidDir.comment": "An example of {path} is /foo/bar.",
  "SourceFieldPortNameMismatch": "The 'Source' field inside the CONTROL file, or \"name\" field inside the vcpkg.json file has the name {package_name} and does not match the port directory \"{path}\".",
  "_SourceFieldPortNameMismatch.comment": "{package_name} and \"{path}\" are both names of installable ports/packages. 'Source', 'CONTROL', 'vcpkg.json', and 'name' references are locale-invariant. An example of {package_name} is zlib. An example of {path} is /foo/bar.",
  "SpecifiedFeatureTurnedOff": "'{command_name}' feature specifically turned off, but --{option} was specified.",
  "_SpecifiedFeatureTurnedOff.comment": "An example of {command_name} is install. An example of {option} is editable.",
  "SpecifyDirectoriesContaining": "Specifiy directories containing triplets files.\n(also: '{env_var}')",
  "_SpecifyDirectoriesContaining.comment": "An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "SpecifyDirectoriesWhenSearching": "Specify directories to be used when searching for ports.\n(also: '{env_var}')",
  "_SpecifyDirectoriesWhenSearching.comment": "An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "SpecifyHostArch": "Specify the host architecture triplet. See 'vcpkg help triplet'.\n(default: '{env_var}')",
  "_SpecifyHostArch.comment": "An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "SpecifyTargetArch": "Specify the target architecture triplet. See 'vcpkg help triplet'.\n(default: '{env_var}')",
  "_SpecifyTargetArch.comment": "An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "StartCodeUnitInContinue": "found start code unit in continue position",
  "StoreOptionMissingSha": "--store option is invalid without a sha512",
  "StoredBinaryCache": "Stored binary cache: \"{path}\"",
  "_StoredBinaryCache.comment": "An example of {path} is /foo/bar.",
  "SuccessfulyExported": "Exported {package_name} to {path}",
  "_SuccessfulyExported.comment": "An example of {package_name} is zlib. An example of {path} is /foo/bar.",
  "SuggestGitPull": "The result may be outdated. Run `git pull` to get the latest results.",
  "SuggestResolution": "To attempt to resolve all errors at once, run:\nvcpkg {command_name} --{option}",
  "_SuggestResolution.comment": "An example of {command_name} is install. An example of {option} is editable.",
  "SuggestStartingBashShell": "Please make sure you have started a new bash shell for the change to take effect.",
  "SuggestUpdateVcpkg": "You may need to update the vcpkg binary; try running {command_line} to update.",
  "_SuggestUpdateVcpkg.comment": "An example of {command_line} is vcpkg install zlib.",
  "SupportedPort": "Port {package_name} is supported.",
  "_SupportedPort.comment": "An example of {package_name} is zlib.",
  "SystemApiErrorMessage": "calling {system_api} failed with {exit_code} ({error_msg})",
  "_SystemApiErrorMessage.comment": "An example of {system_api} is CreateProcessW. An example of {exit_code} is 127. An example of {error_msg} is File Not Found.",
  "ToRemovePackages": "To only remove outdated packages, run\n{command_name} remove --outdated",
  "_ToRemovePackages.comment": "An example of {command_name} is install.",
  "ToUpdatePackages": "To update these packages and all dependencies, run\n{command_name} upgrade'",
  "_ToUpdatePackages.comment": "An example of {command_name} is install.",
  "ToolFetchFailed": "Could not fetch {tool_name}.",
  "_ToolFetchFailed.comment": "An example of {tool_name} is aria2.",
  "ToolInWin10": "This utility is bundled with Windows 10 or later.",
  "ToolOfVersionXNotFound": "A suitable version of {tool_name} was not found (required v{version}) and unable to automatically download a portable one. Please install a newer version of {tool_name}",
  "_ToolOfVersionXNotFound.comment": "An example of {tool_name} is aria2. An example of {version} is 1.3.8.",
  "TotalInstallTime": "Total install time: {elapsed}",
  "_TotalInstallTime.comment": "An example of {elapsed} is 3.532 min.",
  "TrailingCommaInArray": "Trailing comma in array",
  "TrailingCommaInObj": "Trailing comma in an object",
  "TripletFileNotFound": "Triplet file {triplet}.cmake not found",
  "_TripletFileNotFound.comment": "An example of {triplet} is x64-windows.",
  "TwoFeatureFlagsSpecified": "Both '{value}' and -'{value}' were specified as feature flags.",
  "_TwoFeatureFlagsSpecified.comment": "'{value}' is a feature flag.",
  "UndeterminedToolChainForTriplet": "Unable to determine toolchain use for {triplet} with with CMAKE_SYSTEM_NAME {system_name}. Did you mean to use VCPKG_CHAINLOAD_TOOLCHAIN_FILE?",
  "_UndeterminedToolChainForTriplet.comment": "An example of {triplet} is x64-windows. An example of {system_name} is Darwin.",
  "UnexpectedByteSize": "Expected {expected} bytes to be written, but {actual} were written.",
  "_UnexpectedByteSize.comment": "{expected} is the expected byte size and {actual} is the actual byte size.",
  "UnexpectedCharExpectedCloseBrace": "Unexpected character; expected property or close brace",
  "UnexpectedCharExpectedColon": "Unexpected character; expected colon",
  "UnexpectedCharExpectedComma": "Unexpected character; expected comma or close brace",
  "UnexpectedCharExpectedName": "Unexpected character; expected property name",
  "UnexpectedCharExpectedValue": "Unexpected character; expected value",
  "UnexpectedCharMidArray": "Unexpected character in middle of array",
  "UnexpectedCharMidKeyword": "Unexpected character in middle of keyword",
  "UnexpectedDigitsAfterLeadingZero": "Unexpected digits after a leading zero",
  "UnexpectedEOFAfterEscape": "Unexpected EOF after escape character",
  "UnexpectedEOFAfterMinus": "Unexpected EOF after minus sign",
  "UnexpectedEOFExpectedChar": "Unexpected character; expected EOF",
  "UnexpectedEOFExpectedCloseBrace": "Unexpected EOF; expected property or close brace",
  "UnexpectedEOFExpectedColon": "Unexpected EOF; expected colon",
  "UnexpectedEOFExpectedName": "Unexpected EOF; expected property name",
  "UnexpectedEOFExpectedProp": "Unexpected EOF; expected property",
  "UnexpectedEOFExpectedValue": "Unexpected EOF; expected value",
  "UnexpectedEOFMidArray": "Unexpected EOF in middle of array",
  "UnexpectedEOFMidKeyword": "Unexpected EOF in middle of keyword",
  "UnexpectedEOFMidString": "Unexpected EOF in middle of string",
  "UnexpectedEOFMidUnicodeEscape": "Unexpected end of file in middle of unicode escape",
  "UnexpectedErrorDuringBulkDownload": "an unexpected error occurred during bulk download.",
  "UnexpectedEscapeSequence": "Unexpected escape sequence continuation",
  "UnexpectedExtension": "Unexpected archive extension: '{extension}'.",
  "_UnexpectedExtension.comment": "An example of {extension} is .exe.",
  "UnexpectedFormat": "Expected format is [{expected}], but was [{actual}].",
  "_UnexpectedFormat.comment": "{expected} is the expected format, {actual} is the actual format.",
  "UnexpectedPortName": "the port {expected} is declared as {actual} in {path}",
  "_UnexpectedPortName.comment": "{expected} is the expected port and {actual} is the port declared by the user. An example of {path} is /foo/bar.",
  "UnexpectedToolOutput": "{tool_name} ({path}) produced unexpected output when attempting to determine the version:",
  "_UnexpectedToolOutput.comment": "The actual command line output will be appended after this message. An example of {tool_name} is aria2. An example of {path} is /foo/bar.",
  "UnknownBaselineFileContent": "unrecognizable baseline entry; expected 'port:triplet=(fail|skip|pass)'",
  "UnknownBinaryProviderType": "unknown binary provider type: valid providers are 'clear', 'default', 'nuget', 'nugetconfig','nugettimeout', 'interactive', 'x-azblob', 'x-gcs', 'x-aws', 'x-aws-config', 'http', and 'files'",
  "UnknownMachineCode": "Unknown machine type code {value}",
  "_UnknownMachineCode.comment": "{value} is machine type code, see https://learn.microsoft.com/en-us/windows/win32/debug/pe-format#machine-types",
  "UnknownOptions": "Unknown option(s) for command '{command_name}':",
  "_UnknownOptions.comment": "An example of {command_name} is install.",
  "UnknownParameterForIntegrate": "Unknown parameter '{value}' for integrate.",
  "_UnknownParameterForIntegrate.comment": "'{value}' is a user-supplied command line option. For example, given vcpkg integrate frobinate, {value} would be frobinate.",
  "UnknownPolicySetting": "Unknown setting for policy '{value}': {option}",
  "_UnknownPolicySetting.comment": "'{value}' is the policy in question. These are unlocalized names that ports use to control post build checks. Some examples are VCPKG_POLICY_DLLS_WITHOUT_EXPORTS, VCPKG_POLICY_MISMATCHED_NUMBER_OF_BINARIES, or VCPKG_POLICY_ALLOW_OBSOLETE_MSVCRT An example of {option} is editable.",
  "UnknownSettingForBuildType": "Unknown setting for VCPKG_BUILD_TYPE {option}. Valid settings are '', 'debug', and 'release'.",
  "_UnknownSettingForBuildType.comment": "An example of {option} is editable.",
  "UnknownTool": "vcpkg does not have a definition of this tool for this platform.",
  "UnknownTopic": "unknown topic {value}",
  "_UnknownTopic.comment": "{value} the value a user passed to `vcpkg help` that we don't understand",
  "UnknownVariablesInTemplate": "invalid argument: url template '{value}' contains unknown variables: {list}",
  "_UnknownVariablesInTemplate.comment": "{value} is the value provided by the user and {list} a list of unknown variables seperated by comma",
  "UnrecognizedConfigField": "configuration contains the following unrecognized fields:",
  "UnrecognizedIdentifier": "Unrecognized identifer name {value}. Add to override list in triplet file.",
  "_UnrecognizedIdentifier.comment": "'{value}' is an expression identifier. For example, given an expression 'windows & x86', 'windows' and 'x86' are identifiers.",
  "UnsupportedFeature": "feature {feature} was passed, but that is not a feature supported by {package_name} supports.",
  "_UnsupportedFeature.comment": "An example of {feature} is avisynthplus. An example of {package_name} is zlib.",
  "UnsupportedPort": "Port {package_name} is not supported.",
  "_UnsupportedPort.comment": "An example of {package_name} is zlib.",
  "UnsupportedPortDependency": "- dependency {value} is not supported.",
  "_UnsupportedPortDependency.comment": "'{value}' is the name of a port dependency.",
  "UnsupportedPortFeature": "{spec} is only supported on '{supports_expression}'",
  "_UnsupportedPortFeature.comment": "An example of {spec} is zlib:x64-windows. An example of {supports_expression} is windows & !static.",
  "UnsupportedShortOptions": "short options are not supported: '{value}'",
  "_UnsupportedShortOptions.comment": "'{value}' is the short option given",
  "UnsupportedSyntaxInCDATA": "]]> is not supported in CDATA block",
  "UnsupportedSystemName": "Could not map VCPKG_CMAKE_SYSTEM_NAME '{system_name}' to a vcvarsall platform. Supported system names are '', 'Windows' and 'WindowsStore'.",
  "_UnsupportedSystemName.comment": "An example of {system_name} is Darwin.",
  "UnsupportedToolchain": "in triplet {triplet}: Unable to find a valid toolchain for requested target architecture {arch}.\nThe selected Visual Studio instance is at: {path}\nThe available toolchain combinations are: {list}",
  "_UnsupportedToolchain.comment": "example for {list} is 'x86, arm64' An example of {triplet} is x64-windows. An example of {arch} is x64. An example of {path} is /foo/bar.",
  "UnsupportedUpdateCMD": "the update command does not currently support manifest mode. Instead, modify your vcpkg.json and run install.",
  "UpdateBaselineAddBaselineNoManifest": "the --{option} switch was passed, but there is no manifest file to add a `builtin-baseline` field to.",
  "_UpdateBaselineAddBaselineNoManifest.comment": "An example of {option} is editable.",
  "UpdateBaselineLocalGitError": "git failed to parse HEAD for the local vcpkg registry at \"{path}\"",
  "_UpdateBaselineLocalGitError.comment": "An example of {path} is /foo/bar.",
  "UpdateBaselineNoConfiguration": "neither `vcpkg.json` nor `vcpkg-configuration.json` exist to update.",
  "UpdateBaselineNoExistingBuiltinBaseline": "the manifest file currently does not contain a `builtin-baseline` field; in order to add one, pass the --{option} switch.",
  "_UpdateBaselineNoExistingBuiltinBaseline.comment": "An example of {option} is editable.",
  "UpdateBaselineNoUpdate": "registry '{url}' not updated: '{value}'",
  "_UpdateBaselineNoUpdate.comment": "example of {value} is '5507daa796359fe8d45418e694328e878ac2b82f' An example of {url} is https://github.com/microsoft/vcpkg.",
  "UpdateBaselineRemoteGitError": "git failed to fetch remote repository '{url}'",
  "_UpdateBaselineRemoteGitError.comment": "An example of {url} is https://github.com/microsoft/vcpkg.",
  "UpdateBaselineUpdatedBaseline": "updated registry '{url}': baseline '{old_value}' -> '{new_value}'",
  "_UpdateBaselineUpdatedBaseline.comment": "example of {old_value}, {new_value} is '5507daa796359fe8d45418e694328e878ac2b82f' An example of {url} is https://github.com/microsoft/vcpkg.",
  "UpgradeInManifest": "The upgrade command does not currently support manifest mode. Instead, modify your vcpkg.json and run install.",
  "UpgradeRunWithNoDryRun": "If you are sure you want to rebuild the above packages, run this command with the --no-dry-run option.",
  "UploadedBinaries": "Uploaded binaries to {count} {vendor}.",
  "_UploadedBinaries.comment": "An example of {count} is 42. An example of {vendor} is Azure.",
  "UploadedPackagesToVendor": "Uploaded {count} package(s) to {vendor} in {elapsed}",
  "_UploadedPackagesToVendor.comment": "An example of {count} is 42. An example of {elapsed} is 3.532 min. An example of {vendor} is Azure.",
  "UploadingBinariesToVendor": "Uploading binaries for '{spec}' to '{vendor}' source \"{path}\".",
  "_UploadingBinariesToVendor.comment": "An example of {spec} is zlib:x64-windows. An example of {vendor} is Azure. An example of {path} is /foo/bar.",
  "UploadingBinariesUsingVendor": "Uploading binaries for '{spec}' using '{vendor}' \"{path}\".",
  "_UploadingBinariesUsingVendor.comment": "An example of {spec} is zlib:x64-windows. An example of {vendor} is Azure. An example of {path} is /foo/bar.",
  "UseEnvVar": "-- Using {env_var} in environment variables.",
  "_UseEnvVar.comment": "An example of env_var is \"HTTP(S)_PROXY\"'--' at the beginning must be preserved An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "UserWideIntegrationDeleted": "User-wide integration is not installed.",
  "UserWideIntegrationRemoved": "User-wide integration was removed.",
  "UsingCommunityTriplet": "-- Using community triplet {triplet}. This triplet configuration is not guaranteed to succeed.",
  "_UsingCommunityTriplet.comment": "'--' at the beginning must be preserved An example of {triplet} is x64-windows.",
  "UsingManifestAt": "Using manifest file at {path}.",
  "_UsingManifestAt.comment": "An example of {path} is /foo/bar.",
  "Utf8ConversionFailed": "Failed to convert to UTF-8",
  "VSExaminedInstances": "The following Visual Studio instances were considered:",
  "VSExaminedPaths": "The following paths were examined for Visual Studio instances:",
  "VSNoInstances": "Could not locate a complete Visual Studio instance",
  "VcpkgCeIsExperimental": "vcpkg-ce ('configure environment') is experimental and may change at any time.",
  "VcpkgCommitTableHeader": "VCPKG Commit",
  "VcpkgCompletion": "vcpkg {value} completion is already imported to your \"{path}\" file.\nThe following entries were found:",
  "_VcpkgCompletion.comment": "'{value}' is the subject for completion. i.e. bash, zsh, etc. An example of {path} is /foo/bar.",
  "VcpkgDisallowedClassicMode": "Could not locate a manifest (vcpkg.json) above the current working directory.\nThis vcpkg distribution does not have a classic mode instance.",
  "VcpkgHasCrashed": "vcpkg has crashed. Please create an issue at https://github.com/microsoft/vcpkg containing a brief summary of what you were trying to do and the following information.",
  "_VcpkgHasCrashed.comment": "Printed at the start of a crash report.",
  "VcpkgInVsPrompt": "vcpkg appears to be in a Visual Studio prompt targeting {value} but installing for {triplet}. Consider using --triplet {value}-windows or --triplet {value}-uwp.",
  "_VcpkgInVsPrompt.comment": "'{value}' is a VS prompt An example of {triplet} is x64-windows.",
  "VcpkgInvalidCommand": "invalid command: {command_name}",
  "_VcpkgInvalidCommand.comment": "An example of {command_name} is install.",
  "VcpkgRegistriesCacheIsNotDirectory": "Value of environment variable X_VCPKG_REGISTRIES_CACHE is not a directory: {path}",
  "_VcpkgRegistriesCacheIsNotDirectory.comment": "An example of {path} is /foo/bar.",
  "VcpkgRootRequired": "Setting VCPKG_ROOT is required for standalone bootstrap.",
  "VcpkgRootsDir": "Specify the vcpkg root directory.\n(default: '{env_var}')",
  "_VcpkgRootsDir.comment": "An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "VcpkgSendMetricsButDisabled": "passed --sendmetrics, but metrics are disabled.",
  "VersionCommandHeader": "vcpkg package management program version {version}\n\nSee LICENSE.txt for license information.",
  "_VersionCommandHeader.comment": "An example of {version} is 1.3.8.",
  "VersionConflictXML": "Expected {path} version: [{expected_version}], but was [{actual_version}]. Please re-run bootstrap-vcpkg.",
  "_VersionConflictXML.comment": "An example of {path} is /foo/bar. An example of {expected_version} is 1.3.8. An example of {actual_version} is 1.3.8.",
  "VersionConstraintViolated": "dependency {spec} was expected to be at least version {expected_version}, but is currently {actual_version}.",
  "_VersionConstraintViolated.comment": "An example of {spec} is zlib:x64-windows. An example of {expected_version} is 1.3.8. An example of {actual_version} is 1.3.8.",
  "VersionInvalidDate": "`{version}` is not a valid date version. Dates must follow the format YYYY-MM-DD and disambiguators must be dot-separated positive integer values without leading zeroes.",
  "_VersionInvalidDate.comment": "An example of {version} is 1.3.8.",
  "VersionInvalidRelaxed": "`{version}` is not a valid relaxed version (semver with arbitrary numeric element count).",
  "_VersionInvalidRelaxed.comment": "An example of {version} is 1.3.8.",
  "VersionInvalidSemver": "`{version}` is not a valid semantic version, consult <https://semver.org>.",
  "_VersionInvalidSemver.comment": "An example of {version} is 1.3.8.",
  "VersionSpecMismatch": "Failed to load port because versions are inconsistent. The file \"{path}\" contains the version {actual_version}, but the version database indicates that it should be {expected_version}.",
  "_VersionSpecMismatch.comment": "An example of {path} is /foo/bar. An example of {expected_version} is 1.3.8. An example of {actual_version} is 1.3.8.",
  "VersionTableHeader": "Version",
  "WaitingForChildrenToExit": "Waiting for child processes to exit...",
  "WaitingToTakeFilesystemLock": "waiting to take filesystem lock on {path}...",
  "_WaitingToTakeFilesystemLock.comment": "An example of {path} is /foo/bar.",
  "WarningMessage": "warning: ",
  "WarningMessageMustUsePrintWarning": "The message named {value} starts with warning:, it must be changed to prepend WarningMessage in code instead.",
  "_WarningMessageMustUsePrintWarning.comment": "{value} is is a localized message name like WarningMessageMustUsePrintWarning",
  "WarningsTreatedAsErrors": "previous warnings being interpreted as errors",
  "WhileLookingForSpec": "while looking for {spec}:",
  "_WhileLookingForSpec.comment": "An example of {spec} is zlib:x64-windows.",
  "WindowsOnlyCommand": "This command only supports Windows.",
  "WroteNuGetPkgConfInfo": "Wrote NuGet package config information to {path}",
  "_WroteNuGetPkgConfInfo.comment": "An example of {path} is /foo/bar."
}
