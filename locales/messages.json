{
  "AddPortSucceded": "Succeeded in adding ports to vcpkg.json file.",
  "AddTripletExpressionNotAllowed": "Error: triplet expressions are not allowed here. You may want to change `{name}:{triplet}` to `{name}` instead.",
  "_AddTripletExpressionNotAllowed.comment": "Example for {name} is 'zlib', {triplet} is 'x64-windows'\n",
  "AwsAttemptingToFetchPackages": "Attempting to fetch {value} packages from AWS",
  "_AwsAttemptingToFetchPackages.comment": "Example for {value} is '35'\n",
  "AwsFailedToDownload": "aws failed to download with exit code: {value}",
  "_AwsFailedToDownload.comment": "Example for {value} is '127'\n",
  "AwsRestoredPackages": "Restored {value} packages from AWS servers in {elapsed}s",
  "_AwsRestoredPackages.comment": "Example for {value} is '32', {elapsed} is '3'\nexample of {elapsed} is '3.532 min'.\n",
  "AwsUploadedPackages": "Uploaded binaries to {value} AWS servers",
  "_AwsUploadedPackages.comment": "Example for {value} is '2'\n",
  "EmptyLicenseExpression": "SPDX license expression was empty.",
  "ErrorIndividualPackagesUnsupported": "Error: In manifest mode, `vcpkg install` does not support individual package arguments.\nTo install additional packages, edit vcpkg.json and then run `vcpkg install` without any package arguments.",
  "ErrorInvalidClassicModeOption": "Error: The option {value} is not supported in classic mode and no manifest was found.",
  "_ErrorInvalidClassicModeOption.comment": "Example for {value} is '--no-default-features'\n",
  "ErrorInvalidManifestModeOption": "Error: The option {value} is not supported in manifest mode.",
  "_ErrorInvalidManifestModeOption.comment": "Example for {value} is '--editable'\n",
  "ErrorMessage": "error: ",
  "ErrorMissingVcpkgRoot": "Error: Could not detect vcpkg-root. If you are trying to use a copy of vcpkg that you've built, you must define the VCPKG_ROOT environment variable to point to a cloned copy of {url}.",
  "_ErrorMissingVcpkgRoot.comment": "{url} will be replaced with 'https://github.com/microsoft/vcpkg'\nexample of {url} is 'https://github.com/microsoft/vcpkg'.\n",
  "ErrorNoVSInstance": "Error: in triplet {triplet}: Unable to find a valid Visual Studio instance",
  "_ErrorNoVSInstance.comment": "Example of {triplet} is 'x64-windows'\nexample of {triplet} is 'x64-windows'.\n",
  "ErrorNoVSInstanceAt": "     at \"{path}\"",
  "_ErrorNoVSInstanceAt.comment": "example of {path} is '/foo/bar'.\n",
  "ErrorNoVSInstanceFullVersion": "    with toolset version prefix {version}",
  "_ErrorNoVSInstanceFullVersion.comment": "example of {version} is '1.3.8'.\n",
  "ErrorNoVSInstanceVersion": "    with toolset version {version}",
  "_ErrorNoVSInstanceVersion.comment": "example of {version} is '1.3.8'.\n",
  "ErrorRequireBaseline": "Error: this vcpkg instance requires a manifest with a specified baseline in order to interact with ports. Please add 'builtin-baseline' to the manifest or add a 'vcpkg-configuration.json' that redefines the default registry.\n",
  "ErrorRequirePackagesList": "Error: `vcpkg install` requires a list of packages to install in classic mode.",
  "ErrorRequirePackagesToInstall": "Error: No packages were listed for installation and no manifest was found.",
  "ErrorVcvarsUnsupported": "Error: in triplet {triplet}: Use of Visual Studio's Developer Prompt is unsupported on non-Windows hosts.\nDefine 'VCPKG_CMAKE_SYSTEM_NAME' or 'VCPKG_CHAINLOAD_TOOLCHAIN_FILE' in the triplet file.",
  "_ErrorVcvarsUnsupported.comment": "Example of {triplet} is 'x64-windows'\nexample of {triplet} is 'x64-windows'.\n",
  "ForceSystemBinariesOnWeirdPlatforms": "Environment variable VCPKG_FORCE_SYSTEM_BINARIES must be set on arm, s390x, and ppc64le platforms.",
  "FormattedParseMessageExpression": "    on expression: {value}",
  "_FormattedParseMessageExpression.comment": "Example of {value} is 'x64 & windows'\n",
  "FormattedParseMessageLocation": "{path}:{row}:{column}: ",
  "_FormattedParseMessageLocation.comment": "{LOCKED}\nexample of {path} is '/foo/bar'.\n",
  "GenerateMsgNoComment": "message {value} accepts arguments, but there is no comment associated with it.\n    You should add a comment explaining what the argument will be replaced with.",
  "_GenerateMsgNoComment.comment": "example of {value} is 'GenerateMsgHasParametersButNoComment'\n",
  "GenerateMsgNoCommentError": "At least one message that accepts arguments did not have a comment; add a comment in order to silence this message.",
  "GraphCycleDetected": "Cycle detected within graph at {package_name}:",
  "_GraphCycleDetected.comment": "example of {package_name} is 'zlib'.\n",
  "GraphCycleDetectedElement": "    {value}",
  "_GraphCycleDetectedElement.comment": "{LOCKED}\n",
  "IllegalFeatures": "error: List of features is not allowed in this contect",
  "IllegalPlatformSpec": "error: Platform qualifier is not allowed in this context",
  "KeepGoingConflict": "The switches 'keep-going' and 'no-keep-going' cannot both be used",
  "LicenseExpressionContainsExtraPlus": "SPDX license expression contains an extra '+'. These are only allowed directly after a license identifier.",
  "LicenseExpressionContainsInvalidCharacter": "SPDX license expression contains an invalid character (0x{value:02X} '{value}').",
  "_LicenseExpressionContainsInvalidCharacter.comment": "Example of {value:02X} is '7B', {value} is '{'\n",
  "LicenseExpressionContainsUnicode": "SPDX license expression contains a unicode character (U+{value:04X} '{pretty_value}'), but these expressions are ASCII-only.",
  "_LicenseExpressionContainsUnicode.comment": "Example of {value:04X} is '22BB', {pretty_value} is '‚äª'\n",
  "LicenseExpressionDocumentRefUnsupported": "The current implementation does not support DocumentRef- SPDX references.",
  "LicenseExpressionExpectCompoundFoundParen": "Expected a compound or the end of the string, found a parenthesis.",
  "LicenseExpressionExpectCompoundFoundWith": "Expected either AND or OR, found WITH (WITH is only allowed after license names, not parenthesized expressions).",
  "LicenseExpressionExpectCompoundFoundWord": "Expected either AND or OR, found a license or exception name: '{value}'.",
  "_LicenseExpressionExpectCompoundFoundWord.comment": "Example of {value} is 'MIT'\n",
  "LicenseExpressionExpectCompoundOrWithFoundWord": "Expected either AND, OR, or WITH, found a license or exception name: '{value}'.",
  "_LicenseExpressionExpectCompoundOrWithFoundWord.comment": "Example of {value} is 'MIT'\n",
  "LicenseExpressionExpectExceptionFoundCompound": "Expected an exception name, found the compound {value}.",
  "_LicenseExpressionExpectExceptionFoundCompound.comment": "Example of {value} is 'AND'\n",
  "LicenseExpressionExpectExceptionFoundEof": "Expected an exception name, found the end of the string.",
  "LicenseExpressionExpectExceptionFoundParen": "Expected an exception name, found a parenthesis.",
  "LicenseExpressionExpectLicenseFoundCompound": "Expected a license name, found the compound {value}.",
  "_LicenseExpressionExpectLicenseFoundCompound.comment": "Example of {value} is 'AND'\n",
  "LicenseExpressionExpectLicenseFoundEof": "Expected a license name, found the end of the string.",
  "LicenseExpressionExpectLicenseFoundParen": "Expected a license name, found a parenthesis.",
  "LicenseExpressionImbalancedParens": "There was a close parenthesis without an opening parenthesis.",
  "LicenseExpressionUnknownException": "Unknown license exception identifier '{value}'. Known values are listed at https://spdx.org/licenses/exceptions-index.html",
  "_LicenseExpressionUnknownException.comment": "Example of {value} is 'unknownexception'\n",
  "LicenseExpressionUnknownLicense": "Unknown license identifier '{value}'. Known values are listed at https://spdx.org/licenses/",
  "_LicenseExpressionUnknownLicense.comment": "Example of {value} is 'unknownlicense'\n",
  "NoLocalizationForMessages": "No localization for the following messages:",
  "ProcessorArchitectureMalformed": "Failed to parse %PROCESSOR_ARCHITECTURE% ({value}) as a valid CPU architecture.",
  "_ProcessorArchitectureMalformed.comment": "Example of {value} is 'ARM32'\n",
  "ProcessorArchitectureMissing": "The required environment variable %PROCESSOR_ARCHITECTURE% is missing.",
  "ProcessorArchitectureW6432Malformed": "Failed to parse %PROCESSOR_ARCHITEW6432% ({value}) as a valid CPU architecture. Falling back to %PROCESSOR_ARCHITECTURE%.",
  "_ProcessorArchitectureW6432Malformed.comment": "Example of {value} is 'ARM32'\n",
  "SeeURL": "See {url} for more information.",
  "_SeeURL.comment": "{url} will be replaced with the URL to look at for more information\nexample of {url} is 'https://github.com/microsoft/vcpkg'.\n",
  "UnsupportedSystemName": "Error: Could not map VCPKG_CMAKE_SYSTEM_NAME '{value}' to a vcvarsall platform. Supported system names are '', 'Windows' and 'WindowsStore'.",
  "_UnsupportedSystemName.comment": "Example for {value} is 'WindowsPhone'\n",
  "UnsupportedToolchain": "Error: in triplet {triplet}: Unable to find a valid toolchain combination.\n    The requested target architecture was {value}\n    The selected Visual Studio instance is at {path}\n    The available toolchain combinations are {list}\n",
  "_UnsupportedToolchain.comment": "Example for {triplet} is 'x64-windows', {value} is 'x64', {path} is 'C:\\Program Files (x86)\\Microsoft Visual Studio', and {list} is 'x86, arm64'\nexample of {triplet} is 'x64-windows'.\nexample of {path} is '/foo/bar'.\n",
  "UsingManifestAt": "Using manifest file at {path}.",
  "_UsingManifestAt.comment": "Example for {path} is '/code/myproj/vcpkg.json'\nexample of {path} is '/foo/bar'.\n",
  "VSExaminedInstances": "The following Visual Studio instances were considered:",
  "VSExaminedPaths": "The following paths were examined for Visual Studio instances:",
  "VSNoInstances": "Could not locate a complete Visual Studio instance",
  "VcpkgDisallowedClassicMode": "Error: Could not locate a manifest (vcpkg.json) above the current working directory.\nThis vcpkg distribution does not have a classic mode instance.",
  "VcpkgHasCrashed": "vcpkg.exe has crashed.\nPlease send an email to:\n    {email}\ncontaining a brief summary of what you were trying to do and the following data blob:",
  "_VcpkgHasCrashed.comment": "{email} will be the email for the vcpkg team\nexample of {email} is 'vcpkg@microsoft.com'.\n",
  "VcpkgHasCrashedArgument": "{value}|",
  "_VcpkgHasCrashedArgument.comment": "{LOCKED}\n",
  "VcpkgHasCrashedDataBlob": "\nVersion={version}\nEXCEPTION='{error}'\nCMD=",
  "_VcpkgHasCrashedDataBlob.comment": "{LOCKED}\nexample of {version} is '1.3.8'.\n",
  "VcpkgInvalidCommand": "invalid command: {value}",
  "_VcpkgInvalidCommand.comment": "{value} will be replaced by a command name\n",
  "VcpkgSendMetricsButDisabled": "Warning: passed --sendmetrics, but metrics are disabled.",
  "VersionSpecMismatch": "error: Failed to load port because version specs did not match\n    Path: {path}\n    Expected: {expected}\n    Actual: {actual}",
  "_VersionSpecMismatch.comment": "Example of {path} is '/vcpkg/overlays/blah', {expected} is '0.1', {actual} is '0.1.0'\nexample of {path} is '/foo/bar'.\n",
  "WarningMessage": "warning: "
}
