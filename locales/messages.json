{
  "AddArtifactOnlyOne": "'{command_line}' can only add one artifact at a time.",
  "_AddArtifactOnlyOne.comment": "example of {command_line} is 'vcpkg install zlib'.\n",
  "AddFirstArgument": "The first argument to '{command_line}' must be 'artifact' or 'port'.\n",
  "_AddFirstArgument.comment": "example of {command_line} is 'vcpkg install zlib'.\n",
  "AddPortRequiresManifest": "'{command_line}' requires an active manifest file.",
  "_AddPortRequiresManifest.comment": "example of {command_line} is 'vcpkg install zlib'.\n",
  "AddPortSucceded": "Succeeded in adding ports to vcpkg.json file.",
  "AddTripletExpressionNotAllowed": "Error: triplet expressions are not allowed here. You may want to change `{package_name}:{triplet}` to `{package_name}` instead.",
  "_AddTripletExpressionNotAllowed.comment": "example of {package_name} is 'zlib'.\nexample of {triplet} is 'x64-windows'.\n",
  "AddVersionAddedVersionToFile": "added version {version} to {path}",
  "_AddVersionAddedVersionToFile.comment": "example of {version} is '1.3.8'.\nexample of {path} is '/foo/bar'.\n",
  "AddVersionCommitChangesReminder": "Did you remember to commit your changes?",
  "AddVersionCommitResultReminder": "Don't forget to commit the result!",
  "AddVersionDetectLocalChangesError": "skipping detection of local changes due to unexpected format in git status output",
  "AddVersionFileNotFound": "couldn't find required file {path}",
  "_AddVersionFileNotFound.comment": "example of {path} is '/foo/bar'.\n",
  "AddVersionFormatPortSuggestion": "Run `{command_line}` to format the file",
  "_AddVersionFormatPortSuggestion.comment": "example of {command_line} is 'vcpkg install zlib'.\n",
  "AddVersionIgnoringOptionAll": "ignoring --{option} since a port name argument was provided",
  "_AddVersionIgnoringOptionAll.comment": "The -- before {option} must be preserved as they're part of the help message for the user.\nexample of {option} is 'editable'.\n",
  "AddVersionLoadPortFailed": "can't load port {package_name}",
  "_AddVersionLoadPortFailed.comment": "example of {package_name} is 'zlib'.\n",
  "AddVersionNewFile": "(new file)",
  "AddVersionNewShaIs": "new SHA: {value}",
  "_AddVersionNewShaIs.comment": "{value} is a 40-digit hexadecimal SHA\n",
  "AddVersionNoFilesUpdated": "No files were updated",
  "AddVersionNoFilesUpdatedForPort": "No files were updated for {package_name}",
  "_AddVersionNoFilesUpdatedForPort.comment": "example of {package_name} is 'zlib'.\n",
  "AddVersionNoGitSha": "can't obtain SHA for port {package_name}",
  "_AddVersionNoGitSha.comment": "example of {package_name} is 'zlib'.\n",
  "AddVersionOldShaIs": "old SHA: {value}",
  "_AddVersionOldShaIs.comment": "{value} is a 40-digit hexadecimal SHA\n",
  "AddVersionOverwriteOptionSuggestion": "Use --{option} to bypass this check",
  "_AddVersionOverwriteOptionSuggestion.comment": "The -- before {option} must be preserved as they're part of the help message for the user.\nexample of {option} is 'editable'.\n",
  "AddVersionPortDoesNotExist": "{package_name} does not exist",
  "_AddVersionPortDoesNotExist.comment": "example of {package_name} is 'zlib'.\n",
  "AddVersionPortFilesShaChanged": "checked-in files for {package_name} have changed but the version was not updated",
  "_AddVersionPortFilesShaChanged.comment": "example of {package_name} is 'zlib'.\n",
  "AddVersionPortFilesShaUnchanged": "checked-in files for {package_name} are unchanged from version {version}",
  "_AddVersionPortFilesShaUnchanged.comment": "example of {package_name} is 'zlib'.\nexample of {version} is '1.3.8'.\n",
  "AddVersionPortHasImproperFormat": "{package_name} is not properly formatted",
  "_AddVersionPortHasImproperFormat.comment": "example of {package_name} is 'zlib'.\n",
  "AddVersionSuggestNewVersionScheme": "Use the version scheme \"{new_scheme}\" instead of \"{old_scheme}\" in port \"{package_name}\".\nUse --{option} to disable this check.",
  "_AddVersionSuggestNewVersionScheme.comment": "The -- before {option} must be preserved as they're part of the help message for the user.\nexample of {new_scheme} is 'version'.\nexample of {old_scheme} is 'version-string'.\nexample of {package_name} is 'zlib'.\nexample of {option} is 'editable'.\n",
  "AddVersionUnableToParseVersionsFile": "unable to parse versions file {path}",
  "_AddVersionUnableToParseVersionsFile.comment": "example of {path} is '/foo/bar'.\n",
  "AddVersionUncommittedChanges": "there are uncommitted changes for {package_name}",
  "_AddVersionUncommittedChanges.comment": "example of {package_name} is 'zlib'.\n",
  "AddVersionUpdateVersionReminder": "Did you remember to update the version or port version?",
  "AddVersionUseOptionAll": "{command_name} with no arguments requires passing --{option} to update all port versions at once",
  "_AddVersionUseOptionAll.comment": "The -- before {option} must be preserved as they're part of the help message for the user.\nexample of {command_name} is 'install'.\nexample of {option} is 'editable'.\n",
  "AddVersionVersionAlreadyInFile": "version {version} is already in {path}",
  "_AddVersionVersionAlreadyInFile.comment": "example of {version} is '1.3.8'.\nexample of {path} is '/foo/bar'.\n",
  "AddVersionVersionIs": "version: {version}",
  "_AddVersionVersionIs.comment": "example of {version} is '1.3.8'.\n",
  "AllFormatArgsRawArgument": "format string \"{value}\" contains a raw format argument",
  "_AllFormatArgsRawArgument.comment": "example of {value} is 'foo {} bar'\n",
  "AllFormatArgsUnbalancedBraces": "unbalanced brace in format string \"{value}\"",
  "_AllFormatArgsUnbalancedBraces.comment": "example of {value} is 'foo bar {'\n",
  "AlreadyInstalled": "{spec} is already installed",
  "_AlreadyInstalled.comment": "example of {spec} is 'zlib:x64-windows'.\n",
  "AlreadyInstalledNotHead": "{spec} is already installed -- not building from HEAD",
  "_AlreadyInstalledNotHead.comment": "'HEAD' means the most recent version of source code\nexample of {spec} is 'zlib:x64-windows'.\n",
  "AttemptingToFetchPackagesFromVendor": "Attempting to fetch {count} package(s) from {vendor}",
  "_AttemptingToFetchPackagesFromVendor.comment": "example of {count} is '42'.\nexample of {vendor} is 'Azure'.\n",
  "BothYesAndNoOptionSpecifiedError": "error: cannot specify both --no-{option} and --{option}.",
  "_BothYesAndNoOptionSpecifiedError.comment": "example of {option} is 'editable'.\n",
  "BuildAlreadyInstalled": "{spec} is already installed; please remove {spec} before attempting to build it.",
  "_BuildAlreadyInstalled.comment": "example of {spec} is 'zlib:x64-windows'.\n",
  "BuildDependenciesMissing": "The build command requires all dependencies to be already installed.\nThe following dependencies are missing:\n\n",
  "BuildResultBuildFailed": "BUILD_FAILED",
  "_BuildResultBuildFailed.comment": "Printed after the name of an installed entity to indicate that it failed to build.\n",
  "BuildResultCacheMissing": "CACHE_MISSING",
  "_BuildResultCacheMissing.comment": "Printed after the name of an installed entity to indicate that it was not present in the binary cache when the user has requested that things may only be installed from the cache rather than built.\n",
  "BuildResultCascadeDueToMissingDependencies": "CASCADED_DUE_TO_MISSING_DEPENDENCIES",
  "_BuildResultCascadeDueToMissingDependencies.comment": "Printed after the name of an installed entity to indicate that it could not attempt to be installed because one of its transitive dependencies failed to install.\n",
  "BuildResultDownloaded": "DOWNLOADED",
  "_BuildResultDownloaded.comment": "Printed after the name of an installed entity to indicate that it was successfully downloaded but no build or install was requested.\n",
  "BuildResultExcluded": "EXCLUDED",
  "_BuildResultExcluded.comment": "Printed after the name of an installed entity to indicate that the user explicitly requested it not be installed.\n",
  "BuildResultFileConflicts": "FILE_CONFLICTS",
  "_BuildResultFileConflicts.comment": "Printed after the name of an installed entity to indicate that it conflicts with something already installed\n",
  "BuildResultPostBuildChecksFailed": "POST_BUILD_CHECKS_FAILED",
  "_BuildResultPostBuildChecksFailed.comment": "Printed after the name of an installed entity to indicate that it built successfully, but that it failed post build checks.\n",
  "BuildResultRemoved": "REMOVED",
  "_BuildResultRemoved.comment": "Printed after the name of an uninstalled entity to indicate that it was successfully uninstalled.\n",
  "BuildResultSucceeded": "SUCCEEDED",
  "_BuildResultSucceeded.comment": "Printed after the name of an installed entity to indicate that it was built and installed successfully.\n",
  "BuildResultSummaryHeader": "SUMMARY FOR {triplet}",
  "_BuildResultSummaryHeader.comment": "Displayed before a list of a summary installation results.\nexample of {triplet} is 'x64-windows'.\n",
  "BuildResultSummaryLine": "    {build_result}: {count}",
  "_BuildResultSummaryLine.comment": "Displayed to show a count of results of a build_result in a summary.\nexample of {build_result} is 'One of the BuildResultXxx messages (such as BuildResultSucceeded/SUCCEEDED)'.\nexample of {count} is '42'.\n",
  "BuildTroubleshootingMessage1": "Please ensure you're using the latest port files with `git pull` and `vcpkg update`.\nThen check for known issues at:",
  "_BuildTroubleshootingMessage1.comment": "First part of build troubleshooting message, printed before the URI to look for existing bugs.\n",
  "BuildTroubleshootingMessage2": "You can submit a new issue at:",
  "_BuildTroubleshootingMessage2.comment": "Second part of build troubleshooting message, printed after the URI to look for existing bugs but before the URI to file one.\n",
  "BuildTroubleshootingMessage3": "Include '[{package_name}] Build error' in your bug report title, the following version information in your bug description, and attach any relevant failure logs from above.",
  "_BuildTroubleshootingMessage3.comment": "Third part of build troubleshooting message, printed after the URI to file a bug but before version information about vcpkg itself.\nexample of {package_name} is 'zlib'.\n",
  "BuildingFromHead": "Building {spec} from HEAD...",
  "_BuildingFromHead.comment": "'HEAD' means the most recent version of source code\nexample of {spec} is 'zlib:x64-windows'.\n",
  "BuildingPackage": "Building {spec}...",
  "_BuildingPackage.comment": "example of {spec} is 'zlib:x64-windows'.\n",
  "BuildingPackageFailed": "building {spec} failed with: {build_result}",
  "_BuildingPackageFailed.comment": "example of {spec} is 'zlib:x64-windows'.\nexample of {build_result} is 'One of the BuildResultXxx messages (such as BuildResultSucceeded/SUCCEEDED)'.\n",
  "BuildingPackageFailedDueToMissingDeps": "due to the following missing dependencies:",
  "_BuildingPackageFailedDueToMissingDeps.comment": "Printed after BuildingPackageFailed, and followed by a list of dependencies that were missing.\n",
  "CMakeTargetsUsage": "{package_name} provides CMake targets:",
  "_CMakeTargetsUsage.comment": "'targets' are a CMake and Makefile concept\nexample of {package_name} is 'zlib'.\n",
  "CMakeTargetsUsageHeuristicMessage": "# this is heuristically generated, and may not be correct",
  "_CMakeTargetsUsageHeuristicMessage.comment": "Displayed after CMakeTargetsUsage; the # must be kept at the beginning so that the message remains a comment.\n",
  "ChecksFailedCheck": "vcpkg has crashed; no additional details are available.",
  "ChecksUnreachableCode": "unreachable code was reached",
  "ChecksUpdateVcpkg": "updating vcpkg by rerunning bootstrap-vcpkg may resolve this failure.",
  "CiBaselineAllowUnexpectedPassingRequiresBaseline": "--allow-unexpected-passing can only be used if a baseline is provided via --ci-baseline.",
  "CiBaselineRegression": "REGRESSION: {spec} failed with {build_result}. If expected, add {spec}=fail to {path}.",
  "_CiBaselineRegression.comment": "example of {spec} is 'zlib:x64-windows'.\nexample of {build_result} is 'One of the BuildResultXxx messages (such as BuildResultSucceeded/SUCCEEDED)'.\nexample of {path} is '/foo/bar'.\n",
  "CiBaselineRegressionHeader": "REGRESSIONS:",
  "_CiBaselineRegressionHeader.comment": "Printed before a series of CiBaselineRegression and/or CiBaselineUnexpectedPass messages.\n",
  "CiBaselineUnexpectedPass": "PASSING, REMOVE FROM FAIL LIST: {spec} ({path}).",
  "_CiBaselineUnexpectedPass.comment": "example of {spec} is 'zlib:x64-windows'.\nexample of {path} is '/foo/bar'.\n",
  "CmakeTargetsExcluded": "note: {count} additional targets are not displayed.",
  "_CmakeTargetsExcluded.comment": "example of {count} is '42'.\n",
  "CouldNotDeduceNugetIdAndVersion": "Could not deduce nuget id and version from filename: {path}",
  "_CouldNotDeduceNugetIdAndVersion.comment": "example of {path} is '/foo/bar'.\n",
  "CurlReportedUnexpectedResults": "curl has reported unexpected results to vcpkg and vcpkg cannot continue.\nPlease review the following text for sensitive information and open an issue on the Microsoft/vcpkg GitHub to help fix this problem!\ncmd: {command_line}\n=== curl output ===\n{actual}\n=== end curl output ===\n",
  "_CurlReportedUnexpectedResults.comment": "{command_line} is the command line to call curl.exe, {actual} is the console output of curl.exe locale-invariant download results.\nexample of {command_line} is 'vcpkg install zlib'.\n",
  "DownloadedSources": "Downloaded sources for {spec}",
  "_DownloadedSources.comment": "example of {spec} is 'zlib:x64-windows'.\n",
  "DownloadingVcpkgCeBundle": "Downloading vcpkg-ce bundle {version}...",
  "_DownloadingVcpkgCeBundle.comment": "example of {version} is '1.3.8'.\n",
  "DownloadingVcpkgCeBundleLatest": "Downloading latest vcpkg-ce bundle...",
  "_DownloadingVcpkgCeBundleLatest.comment": "This message is normally displayed only in development.\n",
  "ElapsedForPackage": "Elapsed time to handle {spec}: {elapsed}",
  "_ElapsedForPackage.comment": "example of {spec} is 'zlib:x64-windows'.\nexample of {elapsed} is '3.532 min'.\n",
  "EmptyLicenseExpression": "SPDX license expression was empty.",
  "ErrorIndividualPackagesUnsupported": "Error: In manifest mode, `vcpkg install` does not support individual package arguments.\nTo install additional packages, edit vcpkg.json and then run `vcpkg install` without any package arguments.",
  "ErrorInvalidClassicModeOption": "Error: The option --{option} is not supported in classic mode and no manifest was found.",
  "_ErrorInvalidClassicModeOption.comment": "example of {option} is 'editable'.\n",
  "ErrorInvalidManifestModeOption": "Error: The option --{option} is not supported in manifest mode.",
  "_ErrorInvalidManifestModeOption.comment": "example of {option} is 'editable'.\n",
  "ErrorMessage": "error: ",
  "ErrorMissingVcpkgRoot": "Error: Could not detect vcpkg-root. If you are trying to use a copy of vcpkg that you've built, you must define the VCPKG_ROOT environment variable to point to a cloned copy of {url}.",
  "_ErrorMissingVcpkgRoot.comment": "example of {url} is 'https://github.com/microsoft/vcpkg'.\n",
  "ErrorNoVSInstance": "Error: in triplet {triplet}: Unable to find a valid Visual Studio instance",
  "_ErrorNoVSInstance.comment": "example of {triplet} is 'x64-windows'.\n",
  "ErrorNoVSInstanceAt": "     at \"{path}\"",
  "_ErrorNoVSInstanceAt.comment": "example of {path} is '/foo/bar'.\n",
  "ErrorNoVSInstanceFullVersion": "    with toolset version prefix {version}",
  "_ErrorNoVSInstanceFullVersion.comment": "example of {version} is '1.3.8'.\n",
  "ErrorNoVSInstanceVersion": "    with toolset version {version}",
  "_ErrorNoVSInstanceVersion.comment": "example of {version} is '1.3.8'.\n",
  "ErrorRequireBaseline": "Error: this vcpkg instance requires a manifest with a specified baseline in order to interact with ports. Please add 'builtin-baseline' to the manifest or add a 'vcpkg-configuration.json' that redefines the default registry.\n",
  "ErrorRequirePackagesList": "Error: `vcpkg install` requires a list of packages to install in classic mode.",
  "ErrorRequirePackagesToInstall": "Error: No packages were listed for installation and no manifest was found.",
  "ErrorVcvarsUnsupported": "Error: in triplet {triplet}: Use of Visual Studio's Developer Prompt is unsupported on non-Windows hosts.\nDefine 'VCPKG_CMAKE_SYSTEM_NAME' or 'VCPKG_CHAINLOAD_TOOLCHAIN_FILE' in the triplet file.",
  "_ErrorVcvarsUnsupported.comment": "example of {triplet} is 'x64-windows'.\n",
  "ExcludedPackage": "Excluded {spec}",
  "_ExcludedPackage.comment": "example of {spec} is 'zlib:x64-windows'.\n",
  "ExpectedCharacterHere": "expected '{expected}' here",
  "_ExpectedCharacterHere.comment": "{expected} is a locale-invariant delimiter; for example, the ':' or '=' in 'zlib:x64-windows=skip'\n",
  "ExpectedFailOrSkip": "expected 'fail' or 'skip' here",
  "ExpectedPortName": "expected a port name here",
  "ExpectedTripletName": "expected a triplet name here",
  "FailedToProvisionCe": "Failed to provision vcpkg-ce.",
  "FailedToStoreBackToMirror": "failed to store back to mirror:",
  "ForceSystemBinariesOnWeirdPlatforms": "Environment variable VCPKG_FORCE_SYSTEM_BINARIES must be set on arm, s390x, and ppc64le platforms.",
  "FormattedParseMessageExpression": "    on expression: {value}",
  "_FormattedParseMessageExpression.comment": "Example of {value} is 'x64 & windows'\n",
  "GenerateMsgErrorParsingFormatArgs": "error: parsing format string for {value}:",
  "_GenerateMsgErrorParsingFormatArgs.comment": "example of {value} 'GenerateMsgNoComment'\n",
  "GenerateMsgIncorrectComment": "message {value} has an incorrect comment:",
  "_GenerateMsgIncorrectComment.comment": "example of {value} is 'GenerateMsgNoComment'\n",
  "GenerateMsgNoArgumentValue": "    {{{value}}} was specified in a comment, but was not used in the message.",
  "_GenerateMsgNoArgumentValue.comment": "example of {value} is 'arch'\n",
  "GenerateMsgNoCommentValue": "    {{{value}}} was used in the message, but not commented.",
  "_GenerateMsgNoCommentValue.comment": "example of {value} is 'arch'\n",
  "GitCommandFailed": "failed to execute: {command_line}",
  "_GitCommandFailed.comment": "example of {command_line} is 'vcpkg install zlib'.\n",
  "GitStatusOutputExpectedFileName": "expected a file name",
  "GitStatusOutputExpectedNewLine": "expected new line",
  "GitStatusOutputExpectedRenameOrNewline": "expected renamed file or new lines",
  "GitStatusUnknownFileStatus": "unknown file status: {value}",
  "_GitStatusUnknownFileStatus.comment": "{value} is a single character indicating file status, for example: A, U, M, D\n",
  "GitUnexpectedCommandOutput": "unexpected git output",
  "GraphCycleDetected": "Cycle detected within graph at {package_name}:",
  "_GraphCycleDetected.comment": "A list of package names comprising the cycle will be printed after this message.\nexample of {package_name} is 'zlib'.\n",
  "HashFileFailureToRead": "failed to read file '{path}' for hashing: ",
  "_HashFileFailureToRead.comment": "Printed after ErrorMessage and before the specific failing filesystem operation (like file not found)\nexample of {path} is '/foo/bar'.\n",
  "HeaderOnlyUsage": "{package_name} is header-only and can be used from CMake via:",
  "_HeaderOnlyUsage.comment": "'header' refers to C/C++ .h files\nexample of {package_name} is 'zlib'.\n",
  "IllegalFeatures": "error: List of features is not allowed in this context",
  "IllegalPlatformSpec": "error: Platform qualifier is not allowed in this context",
  "InstallingPackage": "Installing {action_index}/{count} {spec}...",
  "_InstallingPackage.comment": "example of {action_index} is '340'.\nexample of {count} is '42'.\nexample of {spec} is 'zlib:x64-windows'.\n",
  "InternalErrorMessage": "internal error: ",
  "InternalErrorMessageContact": "Please open an issue at https://github.com/microsoft/vcpkg/issues/new?template=other-type-of-bug-report.md&labels=category:vcpkg-bug with detailed steps to reproduce the problem.",
  "InvalidArgument": "invalid argument",
  "InvalidArgumentRequiresAbsolutePath": "invalid argument: binary config '{binary_source}' path arguments for binary config strings must be absolute",
  "_InvalidArgumentRequiresAbsolutePath.comment": "example of {binary_source} is 'azblob'.\n",
  "InvalidArgumentRequiresBaseUrl": "invalid argument: binary config '{binary_source}' requires a {base_url} base url as the first argument",
  "_InvalidArgumentRequiresBaseUrl.comment": "example of {base_url} is 'azblob://'.\nexample of {binary_source} is 'azblob'.\n",
  "InvalidArgumentRequiresBaseUrlAndToken": "invalid argument: binary config '{binary_source}' requires at least a base-url and a SAS token",
  "_InvalidArgumentRequiresBaseUrlAndToken.comment": "example of {binary_source} is 'azblob'.\n",
  "InvalidArgumentRequiresNoneArguments": "invalid argument: binary config '{binary_source}' does not take arguments",
  "_InvalidArgumentRequiresNoneArguments.comment": "example of {binary_source} is 'azblob'.\n",
  "InvalidArgumentRequiresOneOrTwoArguments": "invalid argument: binary config '{binary_source}' requires 1 or 2 arguments",
  "_InvalidArgumentRequiresOneOrTwoArguments.comment": "example of {binary_source} is 'azblob'.\n",
  "InvalidArgumentRequiresPathArgument": "invalid argument: binary config '{binary_source}' requires at least a path argument",
  "_InvalidArgumentRequiresPathArgument.comment": "example of {binary_source} is 'azblob'.\n",
  "InvalidArgumentRequiresPrefix": "invalid argument: binary config '{binary_source}' requires at least a prefix",
  "_InvalidArgumentRequiresPrefix.comment": "example of {binary_source} is 'azblob'.\n",
  "InvalidArgumentRequiresSingleArgument": "invalid argument: binary config '{binary_source}' does not take more than 1 argument",
  "_InvalidArgumentRequiresSingleArgument.comment": "example of {binary_source} is 'azblob'.\n",
  "InvalidArgumentRequiresSingleStringArgument": "invalid argument: binary config '{binary_source}' expects a single string argument",
  "_InvalidArgumentRequiresSingleStringArgument.comment": "example of {binary_source} is 'azblob'.\n",
  "InvalidArgumentRequiresSource": "invalid argument: binary config '{binary_source}' requires non-empty source",
  "_InvalidArgumentRequiresSource.comment": "example of {binary_source} is 'azblob'.\n",
  "InvalidArgumentRequiresSourceArgument": "invalid argument: binary config '{binary_source}' requires at least a source argument",
  "_InvalidArgumentRequiresSourceArgument.comment": "example of {binary_source} is 'azblob'.\n",
  "InvalidArgumentRequiresTwoOrThreeArguments": "invalid argument: binary config '{binary_source}' requires 2 or 3 arguments",
  "_InvalidArgumentRequiresTwoOrThreeArguments.comment": "example of {binary_source} is 'azblob'.\n",
  "InvalidArgumentRequiresValidToken": "invalid argument: binary config '{binary_source}' requires a SAS token without a preceeding '?' as the second argument",
  "_InvalidArgumentRequiresValidToken.comment": "example of {binary_source} is 'azblob'.\n",
  "JsonErrorFailedToParse": "failed to parse {path}:",
  "_JsonErrorFailedToParse.comment": "example of {path} is '/foo/bar'.\n",
  "JsonErrorFailedToRead": "failed to read {path}: {error_msg}",
  "_JsonErrorFailedToRead.comment": "example of {path} is '/foo/bar'.\nexample of {error_msg} is 'File Not Found'.\n",
  "LicenseExpressionContainsExtraPlus": "SPDX license expression contains an extra '+'. These are only allowed directly after a license identifier.",
  "LicenseExpressionContainsInvalidCharacter": "SPDX license expression contains an invalid character (0x{value:02X} '{value}').",
  "_LicenseExpressionContainsInvalidCharacter.comment": "example of {value:02X} is '7B'\nexample of {value} is '{'\n",
  "LicenseExpressionContainsUnicode": "SPDX license expression contains a unicode character (U+{value:04X} '{pretty_value}'), but these expressions are ASCII-only.",
  "_LicenseExpressionContainsUnicode.comment": "example of {value:04X} is '22BB'\nexample of {pretty_value} is '⊻'\n",
  "LicenseExpressionDocumentRefUnsupported": "The current implementation does not support DocumentRef- SPDX references.",
  "LicenseExpressionExpectCompoundFoundParen": "Expected a compound or the end of the string, found a parenthesis.",
  "LicenseExpressionExpectCompoundFoundWith": "Expected either AND or OR, found WITH (WITH is only allowed after license names, not parenthesized expressions).",
  "_LicenseExpressionExpectCompoundFoundWith.comment": "AND, OR, and WITH are all keywords and should not be translated.\n",
  "LicenseExpressionExpectCompoundFoundWord": "Expected either AND or OR, found a license or exception name: '{value}'.",
  "_LicenseExpressionExpectCompoundFoundWord.comment": "Example of {value} is 'MIT'.\nAND and OR are both keywords and should not be translated.\n",
  "LicenseExpressionExpectCompoundOrWithFoundWord": "Expected either AND, OR, or WITH, found a license or exception name: '{value}'.",
  "_LicenseExpressionExpectCompoundOrWithFoundWord.comment": "example of {value} is 'MIT'.\nAND, OR, and WITH are all keywords and should not be translated.\n",
  "LicenseExpressionExpectExceptionFoundCompound": "Expected an exception name, found the compound {value}.",
  "_LicenseExpressionExpectExceptionFoundCompound.comment": "Example of {value} is 'AND'\n",
  "LicenseExpressionExpectExceptionFoundEof": "Expected an exception name, found the end of the string.",
  "LicenseExpressionExpectExceptionFoundParen": "Expected an exception name, found a parenthesis.",
  "LicenseExpressionExpectLicenseFoundCompound": "Expected a license name, found the compound {value}.",
  "_LicenseExpressionExpectLicenseFoundCompound.comment": "Example of {value} is 'AND'\n",
  "LicenseExpressionExpectLicenseFoundEof": "Expected a license name, found the end of the string.",
  "LicenseExpressionExpectLicenseFoundParen": "Expected a license name, found a parenthesis.",
  "LicenseExpressionImbalancedParens": "There was a close parenthesis without an opening parenthesis.",
  "LicenseExpressionUnknownException": "Unknown license exception identifier '{value}'. Known values are listed at https://spdx.org/licenses/exceptions-index.html",
  "_LicenseExpressionUnknownException.comment": "Example of {value} is 'unknownexception'\n",
  "LicenseExpressionUnknownLicense": "Unknown license identifier '{value}'. Known values are listed at https://spdx.org/licenses/",
  "_LicenseExpressionUnknownLicense.comment": "Example of {value} is 'unknownlicense'\n",
  "MsiexecFailedToExtract": "msiexec failed while extracting '{path}' with launch or exit code {exit_code} and message:",
  "_MsiexecFailedToExtract.comment": "example of {path} is '/foo/bar'.\nexample of {exit_code} is '127'.\n",
  "NoLocalizationForMessages": "No localization for the following messages:",
  "NoteMessage": "note: ",
  "ObjectStorageToolFailed": "{tool_name} failed with exit code: {exit_code}",
  "_ObjectStorageToolFailed.comment": "example of {exit_code} is '127'.\nexample of {tool_name} is 'aria2'.\n",
  "ProcessorArchitectureMalformed": "Failed to parse %PROCESSOR_ARCHITECTURE% ({arch}) as a valid CPU architecture.",
  "_ProcessorArchitectureMalformed.comment": "example of {arch} is 'x64'.\n",
  "ProcessorArchitectureMissing": "The required environment variable %PROCESSOR_ARCHITECTURE% is missing.",
  "ProcessorArchitectureW6432Malformed": "Failed to parse %PROCESSOR_ARCHITEW6432% ({arch}) as a valid CPU architecture. Falling back to %PROCESSOR_ARCHITECTURE%.",
  "_ProcessorArchitectureW6432Malformed.comment": "example of {arch} is 'x64'.\n",
  "RemovingPackage": "Removing {action_index}/{count} {spec}",
  "_RemovingPackage.comment": "example of {action_index} is '340'.\nexample of {count} is '42'.\nexample of {spec} is 'zlib:x64-windows'.\n",
  "RestoredPackagesFromVendor": "Restored {count} package(s) from {vendor} in {elapsed}",
  "_RestoredPackagesFromVendor.comment": "example of {count} is '42'.\nexample of {elapsed} is '3.532 min'.\nexample of {vendor} is 'Azure'.\n",
  "ResultsHeader": "RESULTS",
  "_ResultsHeader.comment": "Displayed before a list of installation results.\n",
  "SeeURL": "See {url} for more information.",
  "_SeeURL.comment": "example of {url} is 'https://github.com/microsoft/vcpkg'.\n",
  "SourceFieldPortNameMismatch": "The 'Source' field inside the CONTROL file, or \"name\" field inside the vcpkg.json file has the name {package_name} and does not match the port directory {path}.",
  "_SourceFieldPortNameMismatch.comment": "{package_name} and {path} are both names of installable ports/packages. 'Source', 'CONTROL', 'vcpkg.json', and 'name' references are locale-invariant.\nexample of {package_name} is 'zlib'.\nexample of {path} is '/foo/bar'.\n",
  "UnexpectedErrorDuringBulkDownload": "an unexpected error occurred during bulk download.",
  "UnknownBaselineFileContent": "unrecognizable baseline entry; expected 'port:triplet=(fail|skip)'",
  "UnknownBinaryProviderType": "unknown binary provider type: valid providers are 'clear', 'default', 'nuget', 'nugetconfig', 'interactive', and 'files'",
  "UnsupportedSystemName": "Error: Could not map VCPKG_CMAKE_SYSTEM_NAME '{system_name}' to a vcvarsall platform. Supported system names are '', 'Windows' and 'WindowsStore'.",
  "_UnsupportedSystemName.comment": "example of {system_name} is 'Darwin'.\n",
  "UnsupportedToolchain": "Error: in triplet {triplet}: Unable to find a valid toolchain combination.\n    The requested target architecture was {arch}\n    The selected Visual Studio instance is at {path}\n    The available toolchain combinations are {list}\n",
  "_UnsupportedToolchain.comment": "example for {list} is 'x86, arm64'\nexample of {triplet} is 'x64-windows'.\nexample of {arch} is 'x64'.\nexample of {path} is '/foo/bar'.\n",
  "UpdateBaselineAddBaselineNoManifest": "the --{option} switch was passed, but there is no manifest file to add a `builtin-baseline` field to.",
  "_UpdateBaselineAddBaselineNoManifest.comment": "example of {option} is 'editable'.\n",
  "UpdateBaselineLocalGitError": "git failed to parse HEAD for the local vcpkg registry at '{path}'",
  "_UpdateBaselineLocalGitError.comment": "example of {path} is '/foo/bar'.\n",
  "UpdateBaselineNoConfiguration": "neither `vcpkg.json` nor `vcpkg-configuration.json` exist to update.",
  "UpdateBaselineNoExistingBuiltinBaseline": "the manifest file currently does not contain a `builtin-baseline` field; in order to add one, pass the --{option} switch.",
  "_UpdateBaselineNoExistingBuiltinBaseline.comment": "example of {option} is 'editable'.\n",
  "UpdateBaselineNoUpdate": "registry '{url}' not updated: '{value}'",
  "_UpdateBaselineNoUpdate.comment": "example of {value} is '5507daa796359fe8d45418e694328e878ac2b82f'\nexample of {url} is 'https://github.com/microsoft/vcpkg'.\n",
  "UpdateBaselineRemoteGitError": "git failed to fetch remote repository '{url}'",
  "_UpdateBaselineRemoteGitError.comment": "example of {url} is 'https://github.com/microsoft/vcpkg'.\n",
  "UpdateBaselineUpdatedBaseline": "updated registry '{url}': baseline '{old_value}' -> '{new_value}'",
  "_UpdateBaselineUpdatedBaseline.comment": "example of {old_value}, {new_value} is '5507daa796359fe8d45418e694328e878ac2b82f'\nexample of {url} is 'https://github.com/microsoft/vcpkg'.\n",
  "UploadedPackagesToVendor": "Uploaded {count} package(s) to {vendor} in {elapsed}",
  "_UploadedPackagesToVendor.comment": "example of {count} is '42'.\nexample of {elapsed} is '3.532 min'.\nexample of {vendor} is 'Azure'.\n",
  "UsingManifestAt": "Using manifest file at {path}.",
  "_UsingManifestAt.comment": "example of {path} is '/foo/bar'.\n",
  "Utf8DecoderDereferencedAtEof": "dereferenced Utf8Decoder at the end of a string.",
  "VSExaminedInstances": "The following Visual Studio instances were considered:",
  "VSExaminedPaths": "The following paths were examined for Visual Studio instances:",
  "VSNoInstances": "Could not locate a complete Visual Studio instance",
  "VcpkgCeIsExperimental": "vcpkg-ce ('configure environment') is experimental and may change at any time.",
  "VcpkgDisallowedClassicMode": "Error: Could not locate a manifest (vcpkg.json) above the current working directory.\nThis vcpkg distribution does not have a classic mode instance.",
  "VcpkgHasCrashed": "vcpkg.exe has crashed.\nPlease send an email to:\n    {email}\ncontaining a brief summary of what you were trying to do and the following data blob:",
  "_VcpkgHasCrashed.comment": "example of {email} is 'vcpkg@microsoft.com'.\n",
  "VcpkgInvalidCommand": "invalid command: {command_name}",
  "_VcpkgInvalidCommand.comment": "example of {command_name} is 'install'.\n",
  "VcpkgSendMetricsButDisabled": "Warning: passed --sendmetrics, but metrics are disabled.",
  "VersionCommandHeader": "vcpkg package management program version {version}\n\nSee LICENSE.txt for license information.",
  "_VersionCommandHeader.comment": "example of {version} is '1.3.8'.\n",
  "VersionConstraintViolated": "dependency {spec} was expected to be at least version {expected_version}, but is currently {actual_version}.",
  "_VersionConstraintViolated.comment": "example of {spec} is 'zlib:x64-windows'.\nexample of {expected_version} is '1.3.8'.\nexample of {actual_version} is '1.3.8'.\n",
  "VersionInvalidDate": "`{version}` is not a valid date version. Dates must follow the format YYYY-MM-DD and disambiguators must be dot-separated positive integer values without leading zeroes.",
  "_VersionInvalidDate.comment": "example of {version} is '1.3.8'.\n",
  "VersionInvalidRelaxed": "`{version}` is not a valid relaxed version (semver with arbitrary numeric element count).",
  "_VersionInvalidRelaxed.comment": "example of {version} is '1.3.8'.\n",
  "VersionInvalidSemver": "`{version}` is not a valid semantic version, consult <https://semver.org>.",
  "_VersionInvalidSemver.comment": "example of {version} is '1.3.8'.\n",
  "VersionSpecMismatch": "error: Failed to load port because version specs did not match\n    Path: {path}\n    Expected: {expected_version}\n    Actual: {actual_version}",
  "_VersionSpecMismatch.comment": "example of {path} is '/foo/bar'.\nexample of {expected_version} is '1.3.8'.\nexample of {actual_version} is '1.3.8'.\n",
  "WaitingForChildrenToExit": "Waiting for child processes to exit...",
  "WaitingToTakeFilesystemLock": "waiting to take filesystem lock on {path}...",
  "_WaitingToTakeFilesystemLock.comment": "example of {path} is '/foo/bar'.\n",
  "WarningMessage": "warning: ",
  "WarningsTreatedAsErrors": "previous warnings being interpreted as errors"
}
