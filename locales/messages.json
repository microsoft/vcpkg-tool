{
  "AddArtifactOnlyOne": "'{command_line}' can only add one artifact at a time.",
  "_AddArtifactOnlyOne.comment": "example of {command_line} is 'vcpkg install zlib'.\n",
  "AddFirstArgument": "The first argument to '{command_line}' must be 'artifact' or 'port'.\n",
  "_AddFirstArgument.comment": "example of {command_line} is 'vcpkg install zlib'.\n",
  "AddPortRequiresManifest": "'{command_line}' requires an active manifest file.",
  "_AddPortRequiresManifest.comment": "example of {command_line} is 'vcpkg install zlib'.\n",
  "AddPortSucceded": "Succeeded in adding ports to vcpkg.json file.",
  "AddTripletExpressionNotAllowed": "Error: triplet expressions are not allowed here. You may want to change `{package_name}:{triplet}` to `{package_name}` instead.",
  "_AddTripletExpressionNotAllowed.comment": "example of {package_name} is 'zlib'.\nexample of {triplet} is 'x64-windows'.\n",
  "AllFormatArgsRawArgument": "format string \"{value}\" contains a raw format argument",
  "_AllFormatArgsRawArgument.comment": "example of {value} is 'foo {} bar'\n",
  "AllFormatArgsUnbalancedBraces": "unbalanced brace in format string \"{value}\"",
  "_AllFormatArgsUnbalancedBraces.comment": "example of {value} is 'foo bar {'\n",
  "AwsAttemptingToFetchPackages": "Attempting to fetch {count} packages from AWS",
  "_AwsAttemptingToFetchPackages.comment": "example of {count} is '42'.\n",
  "AwsFailedToDownload": "aws failed to download with exit code: {exit_code}",
  "_AwsFailedToDownload.comment": "example of {exit_code} is '127'.\n",
  "AwsRestoredPackages": "Restored {count} packages from AWS servers in {elapsed}",
  "_AwsRestoredPackages.comment": "example of {count} is '42'.\nexample of {elapsed} is '3.532 min'.\n",
  "AwsUploadedPackages": "Uploaded binaries to {count} AWS servers",
  "_AwsUploadedPackages.comment": "example of {count} is '42'.\n",
  "BothYesAndNoOptionSpecifiedError": "error: cannot specify both --no-{option} and --{option}.",
  "_BothYesAndNoOptionSpecifiedError.comment": "example of {option} is 'editable'.\n",
  "BuildResultBuildFailed": "BUILD_FAILED",
  "_BuildResultBuildFailed.comment": "Printed after the name of an installed entity to indicate that it failed to build.\n",
  "BuildResultCacheMissing": "CACHE_MISSING",
  "_BuildResultCacheMissing.comment": "Printed after the name of an installed entity to indicate that it was not present in the binary cache when the user has requested that things may only be installed from the cache rather than built.\n",
  "BuildResultCascadeDueToMissingDependencies": "CASCADED_DUE_TO_MISSING_DEPENDENCIES",
  "_BuildResultCascadeDueToMissingDependencies.comment": "Printed after the name of an installed entity to indicate that it could not attempt to be installed because one of its transitive dependencies failed to install.\n",
  "BuildResultDownloaded": "DOWNLOADED",
  "_BuildResultDownloaded.comment": "Printed after the name of an installed entity to indicate that it was successfully downloaded but no build or install was requested.\n",
  "BuildResultExcluded": "EXCLUDED",
  "_BuildResultExcluded.comment": "Printed after the name of an installed entity to indicate that the user explicitly requested it not be installed.\n",
  "BuildResultFileConflicts": "FILE_CONFLICTS",
  "_BuildResultFileConflicts.comment": "Printed after the name of an installed entity to indicate that it conflicts with something already installed\n",
  "BuildResultPostBuildChecksFailed": "POST_BUILD_CHECKS_FAILED",
  "_BuildResultPostBuildChecksFailed.comment": "Printed after the name of an installed entity to indicate that it built successfully, but that it failed post build checks.\n",
  "BuildResultSucceeded": "SUCCEEDED",
  "_BuildResultSucceeded.comment": "Printed after the name of an installed entity to indicate that it was built and installed successfully.\n",
  "BuildResultSummaryHeader": "SUMMARY FOR {triplet}",
  "_BuildResultSummaryHeader.comment": "Displayed before a list of a summary installation results.\nexample of {triplet} is 'x64-windows'.\n",
  "BuildResultSummaryLine": "    {build_result}: {count}",
  "_BuildResultSummaryLine.comment": "Displayed to show a count of results of a build_result in a summary.\nexample of {build_result} is 'One of the BuildResultXxx messages (such as BuildResultSucceeded/SUCCEEDED)'.\nexample of {count} is '42'.\n",
  "BuildingPackageFailed": "building {spec} failed with: {build_result}",
  "_BuildingPackageFailed.comment": "example of {spec} is 'zlib:x64-windows'.\nexample of {build_result} is 'One of the BuildResultXxx messages (such as BuildResultSucceeded/SUCCEEDED)'.\n",
  "BuildingPackageFailedDueToMissingDeps": "due to the following missing dependencies:",
  "_BuildingPackageFailedDueToMissingDeps.comment": "Printed after BuildingPackageFailed, and followed by a list of dependencies that were missing.\n",
  "ChecksFailedCheck": "vcpkg has crashed; no additional details are available.",
  "ChecksLineInfo": "{vcpkg_line_info}: ",
  "_ChecksLineInfo.comment": "{Locked}",
  "ChecksUnreachableCode": "unreachable code was reached",
  "ChecksUpdateVcpkg": "updating vcpkg by rerunning bootstrap-vcpkg may resolve this failure.",
  "CiBaselineAllowUnexpectedPassingRequiresBaseline": "--allow-unexpected-passing can only be used if a baseline is provided via --ci-baseline.",
  "CiBaselineRegression": "REGRESSION: {spec} failed with {build_result}. If expected, add {spec}=fail to {path}.",
  "_CiBaselineRegression.comment": "example of {spec} is 'zlib:x64-windows'.\nexample of {build_result} is 'One of the BuildResultXxx messages (such as BuildResultSucceeded/SUCCEEDED)'.\nexample of {path} is '/foo/bar'.\n",
  "CiBaselineRegressionHeader": "REGRESSIONS:",
  "_CiBaselineRegressionHeader.comment": "Printed before a series of CiBaselineRegression and/or CiBaselineUnexpectedPass messages.\n",
  "CiBaselineUnexpectedPass": "PASSING, REMOVE FROM FAIL LIST: {spec} ({path}).",
  "_CiBaselineUnexpectedPass.comment": "example of {spec} is 'zlib:x64-windows'.\nexample of {path} is '/foo/bar'.\n",
  "CmakeTargetLinkLibraries": "    target_link_libraries(main PRIVATE {list})",
  "_CmakeTargetLinkLibraries.comment": "{Locked}",
  "CmakeTargetsExcluded": "    # note: {count} targets were omitted.",
  "_CmakeTargetsExcluded.comment": "keep the indentation and the `#` mark\nexample of {count} is '42'.\n",
  "CouldNotDeduceNugetIdAndVersion": "Could not deduce nuget id and version from filename: {path}",
  "_CouldNotDeduceNugetIdAndVersion.comment": "example of {path} is '/foo/bar'.\n",
  "CurlReportedUnexpectedResults": "curl has reported unexpected results to vcpkg and vcpkg cannot continue.\nPlease review the following text for sensitive information and open an issue on the Microsoft/vcpkg GitHub to help fix this problem!\ncmd: {command_line}\n=== curl output ===\n{actual}\n=== end curl output ===\n",
  "_CurlReportedUnexpectedResults.comment": "{command_line} is the command line to call curl.exe, {actual} is the console output of curl.exe locale-invariant download results.\nexample of {command_line} is 'vcpkg install zlib'.\n",
  "DownloadingVcpkgCeBundle": "Downloading vcpkg-ce bundle {version}...",
  "_DownloadingVcpkgCeBundle.comment": "example of {version} is '1.3.8'.\n",
  "DownloadingVcpkgCeBundleLatest": "Downloading latest vcpkg-ce bundle...",
  "_DownloadingVcpkgCeBundleLatest.comment": "This message is normally displayed only in development.\n",
  "EmptyLicenseExpression": "SPDX license expression was empty.",
  "ErrorIndividualPackagesUnsupported": "Error: In manifest mode, `vcpkg install` does not support individual package arguments.\nTo install additional packages, edit vcpkg.json and then run `vcpkg install` without any package arguments.",
  "ErrorInvalidClassicModeOption": "Error: The option --{option} is not supported in classic mode and no manifest was found.",
  "_ErrorInvalidClassicModeOption.comment": "example of {option} is 'editable'.\n",
  "ErrorInvalidManifestModeOption": "Error: The option --{option} is not supported in manifest mode.",
  "_ErrorInvalidManifestModeOption.comment": "example of {option} is 'editable'.\n",
  "ErrorMessage": "error: ",
  "ErrorMissingVcpkgRoot": "Error: Could not detect vcpkg-root. If you are trying to use a copy of vcpkg that you've built, you must define the VCPKG_ROOT environment variable to point to a cloned copy of {url}.",
  "_ErrorMissingVcpkgRoot.comment": "example of {url} is 'https://github.com/microsoft/vcpkg'.\n",
  "ErrorNoVSInstance": "Error: in triplet {triplet}: Unable to find a valid Visual Studio instance",
  "_ErrorNoVSInstance.comment": "example of {triplet} is 'x64-windows'.\n",
  "ErrorNoVSInstanceAt": "     at \"{path}\"",
  "_ErrorNoVSInstanceAt.comment": "example of {path} is '/foo/bar'.\n",
  "ErrorNoVSInstanceFullVersion": "    with toolset version prefix {version}",
  "_ErrorNoVSInstanceFullVersion.comment": "example of {version} is '1.3.8'.\n",
  "ErrorNoVSInstanceVersion": "    with toolset version {version}",
  "_ErrorNoVSInstanceVersion.comment": "example of {version} is '1.3.8'.\n",
  "ErrorRequireBaseline": "Error: this vcpkg instance requires a manifest with a specified baseline in order to interact with ports. Please add 'builtin-baseline' to the manifest or add a 'vcpkg-configuration.json' that redefines the default registry.\n",
  "ErrorRequirePackagesList": "Error: `vcpkg install` requires a list of packages to install in classic mode.",
  "ErrorRequirePackagesToInstall": "Error: No packages were listed for installation and no manifest was found.",
  "ErrorVcvarsUnsupported": "Error: in triplet {triplet}: Use of Visual Studio's Developer Prompt is unsupported on non-Windows hosts.\nDefine 'VCPKG_CMAKE_SYSTEM_NAME' or 'VCPKG_CHAINLOAD_TOOLCHAIN_FILE' in the triplet file.",
  "_ErrorVcvarsUnsupported.comment": "example of {triplet} is 'x64-windows'.\n",
  "ExpectedCharacterHere": "expected '{expected}' here",
  "_ExpectedCharacterHere.comment": "{expected} is a locale-invariant delimiter; for example, the ':' or '=' in 'zlib:x64-windows=skip'\n",
  "ExpectedFailOrSkip": "expected 'fail' or 'skip' here",
  "ExpectedPortName": "expected a port name here",
  "ExpectedTripletName": "expected a triplet name here",
  "FailedToProvisionCe": "Failed to provision vcpkg-ce.",
  "ForceSystemBinariesOnWeirdPlatforms": "Environment variable VCPKG_FORCE_SYSTEM_BINARIES must be set on arm, s390x, and ppc64le platforms.",
  "FormattedParseMessageExpression": "    on expression: {value}",
  "_FormattedParseMessageExpression.comment": "Example of {value} is 'x64 & windows'\n",
  "GenerateMsgErrorParsingFormatArgs": "error: parsing format string for {value}:",
  "_GenerateMsgErrorParsingFormatArgs.comment": "example of {value} 'GenerateMsgNoComment'\n",
  "GenerateMsgIncorrectComment": "message {value} has an incorrect comment:",
  "_GenerateMsgIncorrectComment.comment": "example of {value} is 'GenerateMsgNoComment'\n",
  "GenerateMsgNoArgumentValue": "    {{{value}}} was specified in a comment, but was not used in the message.",
  "_GenerateMsgNoArgumentValue.comment": "example of {value} is 'arch'\n",
  "GenerateMsgNoCommentValue": "    {{{value}}} was used in the message, but not commented.",
  "_GenerateMsgNoCommentValue.comment": "example of {value} is 'arch'\n",
  "GraphCycleDetected": "Cycle detected within graph at {package_name}:",
  "_GraphCycleDetected.comment": "example of {package_name} is 'zlib'.\n",
  "GraphCycleDetectedElement": "    {package_name}",
  "_GraphCycleDetectedElement.comment": "{Locked}",
  "HashFileFailureToRead": "failed to read file '{path}' for hashing: {error}",
  "_HashFileFailureToRead.comment": "example of {error} is 'no such file or directory'\nexample of {path} is '/foo/bar'.\n",
  "IllegalFeatures": "error: List of features is not allowed in this contect",
  "IllegalPlatformSpec": "error: Platform qualifier is not allowed in this context",
  "InternalErrorMessage": "internal error: ",
  "InternalErrorMessageContact": "Please open an issue at https://github.com/microsoft/vcpkg/issues/new?template=other-type-of-bug-report.md&labels=category:vcpkg-bug with detailed steps to reproduce the problem.",
  "LicenseExpressionContainsExtraPlus": "SPDX license expression contains an extra '+'. These are only allowed directly after a license identifier.",
  "LicenseExpressionContainsInvalidCharacter": "SPDX license expression contains an invalid character (0x{value:02X} '{value}').",
  "_LicenseExpressionContainsInvalidCharacter.comment": "example of {value:02X} is '7B'\nexample of {value} is '{'\n",
  "LicenseExpressionContainsUnicode": "SPDX license expression contains a unicode character (U+{value:04X} '{pretty_value}'), but these expressions are ASCII-only.",
  "_LicenseExpressionContainsUnicode.comment": "example of {value:04X} is '22BB'\nexample of {pretty_value} is '⊻'\n",
  "LicenseExpressionDocumentRefUnsupported": "The current implementation does not support DocumentRef- SPDX references.",
  "LicenseExpressionExpectCompoundFoundParen": "Expected a compound or the end of the string, found a parenthesis.",
  "LicenseExpressionExpectCompoundFoundWith": "Expected either AND or OR, found WITH (WITH is only allowed after license names, not parenthesized expressions).",
  "_LicenseExpressionExpectCompoundFoundWith.comment": "AND, OR, and WITH are all keywords and should not be translated.\n",
  "LicenseExpressionExpectCompoundFoundWord": "Expected either AND or OR, found a license or exception name: '{value}'.",
  "_LicenseExpressionExpectCompoundFoundWord.comment": "Example of {value} is 'MIT'.\nAND and OR are both keywords and should not be translated.\n",
  "LicenseExpressionExpectCompoundOrWithFoundWord": "Expected either AND, OR, or WITH, found a license or exception name: '{value}'.",
  "_LicenseExpressionExpectCompoundOrWithFoundWord.comment": "example of {value} is 'MIT'.\nAND, OR, and WITH are all keywords and should not be translated.\n",
  "LicenseExpressionExpectExceptionFoundCompound": "Expected an exception name, found the compound {value}.",
  "_LicenseExpressionExpectExceptionFoundCompound.comment": "Example of {value} is 'AND'\n",
  "LicenseExpressionExpectExceptionFoundEof": "Expected an exception name, found the end of the string.",
  "LicenseExpressionExpectExceptionFoundParen": "Expected an exception name, found a parenthesis.",
  "LicenseExpressionExpectLicenseFoundCompound": "Expected a license name, found the compound {value}.",
  "_LicenseExpressionExpectLicenseFoundCompound.comment": "Example of {value} is 'AND'\n",
  "LicenseExpressionExpectLicenseFoundEof": "Expected a license name, found the end of the string.",
  "LicenseExpressionExpectLicenseFoundParen": "Expected a license name, found a parenthesis.",
  "LicenseExpressionImbalancedParens": "There was a close parenthesis without an opening parenthesis.",
  "LicenseExpressionUnknownException": "Unknown license exception identifier '{value}'. Known values are listed at https://spdx.org/licenses/exceptions-index.html",
  "_LicenseExpressionUnknownException.comment": "Example of {value} is 'unknownexception'\n",
  "LicenseExpressionUnknownLicense": "Unknown license identifier '{value}'. Known values are listed at https://spdx.org/licenses/",
  "_LicenseExpressionUnknownLicense.comment": "Example of {value} is 'unknownlicense'\n",
  "MsiexecFailedToExtract": "msiexec failed while extracting '{path}' with launch or exit code {exit_code} and message:",
  "_MsiexecFailedToExtract.comment": "example of {path} is '/foo/bar'.\nexample of {exit_code} is '127'.\n",
  "NoLocalizationForMessages": "No localization for the following messages:",
  "NoteMessage": "note: ",
  "ProcessorArchitectureMalformed": "Failed to parse %PROCESSOR_ARCHITECTURE% ({arch}) as a valid CPU architecture.",
  "_ProcessorArchitectureMalformed.comment": "example of {arch} is 'x64'.\n",
  "ProcessorArchitectureMissing": "The required environment variable %PROCESSOR_ARCHITECTURE% is missing.",
  "ProcessorArchitectureW6432Malformed": "Failed to parse %PROCESSOR_ARCHITEW6432% ({arch}) as a valid CPU architecture. Falling back to %PROCESSOR_ARCHITECTURE%.",
  "_ProcessorArchitectureW6432Malformed.comment": "example of {arch} is 'x64'.\n",
  "ResultsHeader": "RESULTS",
  "_ResultsHeader.comment": "Displayed before a list of installation results.\n",
  "ResultsLine": "    {spec}: {build_result}: {elapsed}",
  "_ResultsLine.comment": "{Locked}",
  "SeeURL": "See {url} for more information.",
  "_SeeURL.comment": "example of {url} is 'https://github.com/microsoft/vcpkg'.\n",
  "SuggestNewVersionScheme": "Use the version scheme \"{new_scheme}\" instead of \"{old_scheme}\" in port \"{package_name}\".\nUse `--{option}` to disable this check.",
  "_SuggestNewVersionScheme.comment": "example of {new_scheme} is 'version'.\nexample of {old_scheme} is 'version-string'.\nexample of {package_name} is 'zlib'.\nexample of {option} is 'editable'.\n",
  "UnknownBaselineFileContent": "unrecognizable baseline entry; expected 'port:triplet=(fail|skip)'",
  "UnsupportedSystemName": "Error: Could not map VCPKG_CMAKE_SYSTEM_NAME '{system_name}' to a vcvarsall platform. Supported system names are '', 'Windows' and 'WindowsStore'.",
  "_UnsupportedSystemName.comment": "example of {system_name} is 'Darwin'.\n",
  "UnsupportedToolchain": "Error: in triplet {triplet}: Unable to find a valid toolchain combination.\n    The requested target architecture was {arch}\n    The selected Visual Studio instance is at {path}\n    The available toolchain combinations are {list}\n",
  "_UnsupportedToolchain.comment": "example for {list} is 'x86, arm64'\nexample of {triplet} is 'x64-windows'.\nexample of {arch} is 'x64'.\nexample of {path} is '/foo/bar'.\n",
  "UsingManifestAt": "Using manifest file at {path}.",
  "_UsingManifestAt.comment": "example of {path} is '/foo/bar'.\n",
  "Utf8DecoderDereferencedAtEof": "dereferenced Utf8Decoder at the end of a string.",
  "VSExaminedInstances": "The following Visual Studio instances were considered:",
  "VSExaminedPaths": "The following paths were examined for Visual Studio instances:",
  "VSNoInstances": "Could not locate a complete Visual Studio instance",
  "VcpkgCeIsExperimental": "vcpkg-ce ('configure environment') is experimental and may change at any time.",
  "VcpkgDisallowedClassicMode": "Error: Could not locate a manifest (vcpkg.json) above the current working directory.\nThis vcpkg distribution does not have a classic mode instance.",
  "VcpkgHasCrashed": "vcpkg.exe has crashed.\nPlease send an email to:\n    {email}\ncontaining a brief summary of what you were trying to do and the following data blob:",
  "_VcpkgHasCrashed.comment": "example of {email} is 'vcpkg@microsoft.com'.\n",
  "VcpkgHasCrashedArgument": "{value}|",
  "_VcpkgHasCrashedArgument.comment": "{Locked}",
  "VcpkgHasCrashedDataBlob": "\nVersion={version}\nEXCEPTION='{error}'\nCMD=",
  "_VcpkgHasCrashedDataBlob.comment": "{Locked}",
  "VcpkgInvalidCommand": "invalid command: {command_name}",
  "_VcpkgInvalidCommand.comment": "example of {command_name} is 'install'.\n",
  "VcpkgSendMetricsButDisabled": "Warning: passed --sendmetrics, but metrics are disabled.",
  "VersionInvalidDate": "`{version}` is not a valid date version. Dates must follow the format YYYY-MM-DD and disambiguators must be dot-separated positive integer values without leading zeroes.",
  "_VersionInvalidDate.comment": "example of {version} is '1.3.8'.\n",
  "VersionInvalidRelaxed": "`{version}` is not a valid relaxed version (semver with arbitrary numeric element count).",
  "_VersionInvalidRelaxed.comment": "example of {version} is '1.3.8'.\n",
  "VersionInvalidSemver": "`{version}` is not a valid semantic version, consult <https://semver.org>.",
  "_VersionInvalidSemver.comment": "example of {version} is '1.3.8'.\n",
  "VersionSpecMismatch": "error: Failed to load port because version specs did not match\n    Path: {path}\n    Expected: {expected_version}\n    Actual: {actual_version}",
  "_VersionSpecMismatch.comment": "example of {path} is '/foo/bar'.\nexample of {expected_version} is '1.3.8'.\nexample of {actual_version} is '1.3.8'.\n",
  "WarningMessage": "warning: ",
  "WarningsTreatedAsErrors": "previous warnings being interpreted as errors"
}
