{
  "ABaseline": "a baseline",
  "ABaselineObject": "a baseline object",
  "ABoolean": "a boolean",
  "ABuiltinRegistry": "a builtin registry",
  "AConfigurationObject": "a configuration object",
  "ADateVersionString": "a date version string",
  "ADefaultFeature": "a default feature",
  "ADemandObject": "a demand object",
  "_ADemandObject.comment": "'demands' are a concept in the schema of a JSON file the user can edit",
  "ADependency": "a dependency",
  "ADependencyFeature": "a feature of a dependency",
  "ADictionaryOfContacts": "a dictionary of contacts",
  "AFeature": "a feature",
  "AFeatureName": "a feature name",
  "AFilesystemRegistry": "a filesystem registry",
  "AGitObjectSha": "a git object SHA",
  "AGitReference": "a git reference (for example, a branch)",
  "AGitRegistry": "a git registry",
  "AGitRepositoryUrl": "a git repository URL",
  "AManifest": "a manifest",
  "AMaximumOfOneAssetReadUrlCanBeSpecified": "a maximum of one asset read url can be specified.",
  "AMaximumOfOneAssetWriteUrlCanBeSpecified": "a maximum of one asset write url can be specified.",
  "ANonNegativeInteger": "a nonnegative integer",
  "APackageName": "a package name",
  "APackagePattern": "a package pattern",
  "APackagePatternArray": "a package pattern array",
  "APath": "a path",
  "APlatformExpression": "a platform expression",
  "ARegistry": "a registry",
  "ARegistryImplementationKind": "a registry implementation kind",
  "ARegistryPath": "a registry path",
  "ARegistryPathMustBeDelimitedWithForwardSlashes": "A registry path must use single forward slashes as path separators.",
  "ARegistryPathMustNotHaveDots": "A registry path must not have 'dot' or 'dot dot' path elements.",
  "ARegistryPathMustStartWithDollar": "A registry path must start with `$` to mean the registry root; for example, `$/foo/bar`.",
  "ARelaxedVersionString": "a relaxed version string",
  "ASemanticVersionString": "a semantic version string",
  "ASetOfFeatures": "a set of features",
  "AString": "a string",
  "AStringOrArrayOfStrings": "a string or array of strings",
  "AStringStringDictionary": "a \"string\": \"string\" dictionary",
  "AUrl": "a url",
  "AVcpkgRepositoryCommit": "a vcpkg repository commit",
  "AVersionConstraint": "a version constraint",
  "AVersionDatabaseEntry": "a version database entry",
  "AVersionObject": "a version object",
  "AVersionOfAnyType": "a version of any type",
  "AddArtifactOnlyOne": "'{command_line}' can only add one artifact at a time.",
  "_AddArtifactOnlyOne.comment": "An example of {command_line} is vcpkg install zlib.",
  "AddCommandFirstArg": "The first parameter to add must be 'artifact' or 'port'.",
  "AddFirstArgument": "The first argument to '{command_line}' must be 'artifact' or 'port'.",
  "_AddFirstArgument.comment": "An example of {command_line} is vcpkg install zlib.",
  "AddPortRequiresManifest": "'{command_line}' requires an active manifest file.",
  "_AddPortRequiresManifest.comment": "An example of {command_line} is vcpkg install zlib.",
  "AddPortSucceeded": "Succeeded in adding ports to vcpkg.json file.",
  "AddRecurseOption": "If you are sure you want to remove them, run the command with the --recurse option.",
  "AddTripletExpressionNotAllowed": "triplet expressions are not allowed here. You may want to change `{package_name}:{triplet}` to `{package_name}` instead.",
  "_AddTripletExpressionNotAllowed.comment": "An example of {package_name} is zlib. An example of {triplet} is x64-windows.",
  "AddVersionAddedVersionToFile": "added version {version} to {path}",
  "_AddVersionAddedVersionToFile.comment": "An example of {version} is 1.3.8. An example of {path} is /foo/bar.",
  "AddVersionArtifactsOnly": "--version is artifacts only and can't be used with vcpkg add port",
  "_AddVersionArtifactsOnly.comment": "'--version', and 'vcpkg add port' are command lines that must not be localized",
  "AddVersionCommitChangesReminder": "Did you remember to commit your changes?",
  "AddVersionCommitResultReminder": "Don't forget to commit the result!",
  "AddVersionDetectLocalChangesError": "skipping detection of local changes due to unexpected format in git status output",
  "AddVersionFileNotFound": "couldn't find required file {path}",
  "_AddVersionFileNotFound.comment": "An example of {path} is /foo/bar.",
  "AddVersionFormatPortSuggestion": "Run `{command_line}` to format the file",
  "_AddVersionFormatPortSuggestion.comment": "An example of {command_line} is vcpkg install zlib.",
  "AddVersionIgnoringOptionAll": "ignoring --{option} since a port name argument was provided",
  "_AddVersionIgnoringOptionAll.comment": "The -- before {option} must be preserved as they're part of the help message for the user. An example of {option} is editable.",
  "AddVersionLoadPortFailed": "can't load port {package_name}",
  "_AddVersionLoadPortFailed.comment": "An example of {package_name} is zlib.",
  "AddVersionNewFile": "(new file)",
  "AddVersionNewShaIs": "new SHA: {commit_sha}",
  "_AddVersionNewShaIs.comment": "An example of {commit_sha} is 7cfad47ae9f68b183983090afd6337cd60fd4949.",
  "AddVersionNoFilesUpdated": "No files were updated",
  "AddVersionNoFilesUpdatedForPort": "No files were updated for {package_name}",
  "_AddVersionNoFilesUpdatedForPort.comment": "An example of {package_name} is zlib.",
  "AddVersionNoGitSha": "can't obtain SHA for port {package_name}",
  "_AddVersionNoGitSha.comment": "An example of {package_name} is zlib.",
  "AddVersionOldShaIs": "old SHA: {commit_sha}",
  "_AddVersionOldShaIs.comment": "An example of {commit_sha} is 7cfad47ae9f68b183983090afd6337cd60fd4949.",
  "AddVersionOverwriteOptionSuggestion": "Use --{option} to bypass this check",
  "_AddVersionOverwriteOptionSuggestion.comment": "The -- before {option} must be preserved as they're a part of the help message for the user. An example of {option} is editable.",
  "AddVersionPortFilesShaChanged": "checked-in files for {package_name} have changed but the version was not updated",
  "_AddVersionPortFilesShaChanged.comment": "An example of {package_name} is zlib.",
  "AddVersionPortFilesShaUnchanged": "checked-in files for {package_name} are unchanged from version {version}",
  "_AddVersionPortFilesShaUnchanged.comment": "An example of {package_name} is zlib. An example of {version} is 1.3.8.",
  "AddVersionPortHasImproperFormat": "{package_name} is not properly formatted",
  "_AddVersionPortHasImproperFormat.comment": "An example of {package_name} is zlib.",
  "AddVersionSuggestVersionDate": "The version format of \"{package_name}\" uses \"version-string\", but the format is acceptable as a \"version-date\". If this format is actually intended to be an ISO 8601 date, change the format to \"version-date\", and rerun this command. Otherwise, disable this check by rerunning this command and adding --skip-version-format-check .",
  "_AddVersionSuggestVersionDate.comment": "\"version-string\" and \"version-date\" are JSON keys, and --skip-version-format-check is a command line switch. They should not be translated An example of {package_name} is zlib.",
  "AddVersionSuggestVersionRelaxed": "The version format of \"{package_name}\" uses \"version-string\", but the format is acceptable as a \"version\". If the versions for this port are orderable using relaxed-version rules, change the format to \"version\", and rerun this command. Relaxed-version rules order versions by each numeric component. Then, versions with dash suffixes are sorted lexcographically before. Plus'd build tags are ignored. Examples:\n1.0 < 1.1-alpha < 1.1-b < 1.1 < 1.1.1 < 1.2+build = 1.2 < 2.0\nNote in particular that dashed suffixes sort *before*, not after. 1.0-anything < 1.0\nNote that this sort order is the same as chosen in Semantic Versioning (see https://semver.org), even though the actually semantic parts do not apply.\nIf versions for this port are not ordered by these rules, disable this check by rerunning this command and adding --skip-version-format-check .",
  "_AddVersionSuggestVersionRelaxed.comment": "\"version-string\" and \"version\" are JSON keys, and --skip-version-format-check is a command line switch. They should not be translated An example of {package_name} is zlib.",
  "AddVersionUnableToParseVersionsFile": "unable to parse versions file {path}",
  "_AddVersionUnableToParseVersionsFile.comment": "An example of {path} is /foo/bar.",
  "AddVersionUncommittedChanges": "there are uncommitted changes for {package_name}",
  "_AddVersionUncommittedChanges.comment": "An example of {package_name} is zlib.",
  "AddVersionUpdateVersionReminder": "Did you remember to update the version or port version?",
  "AddVersionUseOptionAll": "{command_name} with no arguments requires passing --{option} to update all port versions at once",
  "_AddVersionUseOptionAll.comment": "The -- before {option} must be preserved as they're part of the help message for the user. An example of {command_name} is install. An example of {option} is editable.",
  "AddVersionVersionAlreadyInFile": "version {version} is already in {path}",
  "_AddVersionVersionAlreadyInFile.comment": "An example of {version} is 1.3.8. An example of {path} is /foo/bar.",
  "AddVersionVersionIs": "version: {version}",
  "_AddVersionVersionIs.comment": "An example of {version} is 1.3.8.",
  "AddingCompletionEntry": "Adding vcpkg completion entry to {path}.",
  "_AddingCompletionEntry.comment": "An example of {path} is /foo/bar.",
  "AdditionalPackagesToExport": "Additional packages (*) need to be exported to complete this operation.",
  "AdditionalPackagesToRemove": "Additional packages (*) need to be removed to complete this operation.",
  "AllFormatArgsRawArgument": "format string \"{value}\" contains a raw format argument",
  "_AllFormatArgsRawArgument.comment": "example of {value} is 'foo {} bar'",
  "AllFormatArgsUnbalancedBraces": "unbalanced brace in format string \"{value}\"",
  "_AllFormatArgsUnbalancedBraces.comment": "example of {value} is 'foo bar {'",
  "AllPackagesAreUpdated": "All installed packages are up-to-date with the local portfile.",
  "AlreadyInstalled": "{spec} is already installed",
  "_AlreadyInstalled.comment": "An example of {spec} is zlib:x64-windows.",
  "AlreadyInstalledNotHead": "{spec} is already installed -- not building from HEAD",
  "_AlreadyInstalledNotHead.comment": "'HEAD' means the most recent version of source code An example of {spec} is zlib:x64-windows.",
  "AmbiguousConfigDeleteConfigFile": "Ambiguous vcpkg configuration provided by both manifest and configuration file.\n-- Delete configuration file {path}",
  "_AmbiguousConfigDeleteConfigFile.comment": "An example of {path} is /foo/bar.",
  "AnArrayOfDefaultFeatures": "an array of default features",
  "AnArrayOfDependencies": "an array of dependencies",
  "AnArrayOfDependencyOverrides": "an array of dependency overrides",
  "AnArrayOfFeatures": "an array of features",
  "AnArrayOfIdentifers": "an array of identifiers",
  "AnArrayOfOverlayPaths": "an array of overlay paths",
  "AnArrayOfOverlayTripletsPaths": "an array of overlay triplets paths",
  "AnArrayOfRegistries": "an array of registries",
  "AnArrayOfVersions": "an array of versions",
  "AnArtifactsGitRegistryUrl": "an artifacts git registry URL",
  "AnArtifactsRegistry": "an artifacts registry",
  "AnExactVersionString": "an exact version string",
  "AnIdentifer": "an identifier",
  "AnObjectContainingVcpkgArtifactsMetadata": "an object containing vcpkg-artifacts metadata",
  "_AnObjectContainingVcpkgArtifactsMetadata.comment": "'vcpkg-artifacts' is the name of the product feature and should not be localized",
  "AnOverlayPath": "an overlay path",
  "AnOverlayTripletsPath": "a triplet path",
  "AnOverride": "an override",
  "AnSpdxLicenseExpression": "an SPDX license expression",
  "AndroidHomeDirMissingProps": "source.properties missing in {env_var} directory: {path}",
  "_AndroidHomeDirMissingProps.comment": "Note: 'source.properties' is code and should not be translated. An example of {env_var} is VCPKG_DEFAULT_TRIPLET. An example of {path} is /foo/bar.",
  "AnotherInstallationInProgress": "Another installation is in progress on the machine, sleeping 6s before retrying.",
  "AppliedUserIntegration": "Applied user-wide integration for this vcpkg root.",
  "ApplocalProcessing": "deploying dependencies",
  "ArtifactsBootstrapFailed": "vcpkg-artifacts is not installed and could not be bootstrapped.",
  "ArtifactsNotInstalledReadonlyRoot": "vcpkg-artifacts is not installed, and it can't be installed because VCPKG_ROOT is assumed to be readonly. Reinstalling vcpkg using the 'one liner' may fix this problem.",
  "ArtifactsOptionIncompatibility": "--{option} has no effect on find artifact.",
  "_ArtifactsOptionIncompatibility.comment": "An example of {option} is editable.",
  "ArtifactsOptionJson": "Full path to JSON file where environment variables and other properties are recorded",
  "ArtifactsOptionMSBuildProps": "Full path to the file in which MSBuild properties will be written",
  "ArtifactsOptionVersion": "A version or version range to match; only valid for artifacts",
  "ArtifactsOptionVersionMismatch": "The number of --version switches must match the number of named artifacts",
  "_ArtifactsOptionVersionMismatch.comment": "--version is a command line switch and must not be localized",
  "ArtifactsSwitchARM": "Forces host detection to ARM when acquiring artifacts",
  "ArtifactsSwitchARM64": "Forces host detection to ARM64 when acquiring artifacts",
  "ArtifactsSwitchAllLanguages": "Acquires all language files when acquiring artifacts",
  "ArtifactsSwitchForce": "Forces reacquire if an artifact is already acquired",
  "ArtifactsSwitchFreebsd": "Forces host detection to FreeBSD when acquiring artifacts",
  "ArtifactsSwitchLinux": "Forces host detection to Linux when acquiring artifacts",
  "ArtifactsSwitchOnlyOneHostPlatform": "Only one host platform (--x64, --x86, --arm, --arm64) may be set.",
  "_ArtifactsSwitchOnlyOneHostPlatform.comment": "The words after -- are command line switches and must not be localized.",
  "ArtifactsSwitchOnlyOneOperatingSystem": "Only one operating system (--windows, --osx, --linux, --freebsd) may be set.",
  "_ArtifactsSwitchOnlyOneOperatingSystem.comment": "The words after -- are command line switches and must not be localized.",
  "ArtifactsSwitchOnlyOneTargetPlatform": "Only one target platform (--target:x64, --target:x86, --target:arm, --target:arm64) may be set.",
  "_ArtifactsSwitchOnlyOneTargetPlatform.comment": "The words after -- are command line switches and must not be localized.",
  "ArtifactsSwitchOsx": "Forces host detection to MacOS when acquiring artifacts",
  "ArtifactsSwitchTargetARM": "Sets target detection to ARM when acquiring artifacts",
  "ArtifactsSwitchTargetARM64": "Sets target detection to ARM64 when acquiring artifacts",
  "ArtifactsSwitchTargetX64": "Sets target detection to x64 when acquiring artifacts",
  "ArtifactsSwitchTargetX86": "Sets target to x86 when acquiring artifacts",
  "ArtifactsSwitchWindows": "Forces host detection to Windows when acquiring artifacts",
  "ArtifactsSwitchX64": "Forces host detection to x64 when acquiring artifacts",
  "ArtifactsSwitchX86": "Forces host detection to x86 when acquiring artifacts",
  "AssetCacheProviderAcceptsNoArguments": "unexpected arguments: '{value}' does not accept arguments",
  "_AssetCacheProviderAcceptsNoArguments.comment": "{value} is a asset caching provider name such as azurl, clear, or x-block-origin",
  "AssetSourcesArg": "Asset caching sources. See 'vcpkg help assetcaching'",
  "AttemptingToSetBuiltInBaseline": "attempting to set builtin-baseline in vcpkg.json while overriding the default-registry in vcpkg-configuration.json.\nthe default-registry from vcpkg-configuration.json will be used.",
  "AuthenticationMayRequireManualAction": "One or more {vendor} credential providers requested manual action. Add the binary source 'interactive' to allow interactivity.",
  "_AuthenticationMayRequireManualAction.comment": "An example of {vendor} is Azure.",
  "AutoSettingEnvVar": "-- Automatically setting {env_var} environment variables to \"{url}\".",
  "_AutoSettingEnvVar.comment": "An example of env_var is \"HTTP(S)_PROXY\"'--' at the beginning must be preserved An example of {env_var} is VCPKG_DEFAULT_TRIPLET. An example of {url} is https://github.com/microsoft/vcpkg.",
  "AutomaticLinkingForMSBuildProjects": "All MSBuild C++ projects can now #include any installed libraries. Linking will be handled automatically. Installing new libraries will make them instantly available.",
  "AutomaticLinkingForVS2017AndLater": "Visual Studio 2017 and later can now #include any installed libraries. Linking will be handled automatically. Installing new libraries will make them instantly available.",
  "AvailableHelpTopics": "Available help topics:",
  "AzUrlAssetCacheRequiresBaseUrl": "unexpected arguments: asset config 'azurl' requires a base url",
  "AzUrlAssetCacheRequiresLessThanFour": "unexpected arguments: asset config 'azurl' requires fewer than 4 arguments",
  "BaselineConflict": "Specifying vcpkg-configuration.default-registry in a manifest file conflicts with built-in baseline.\nPlease remove one of these conflicting settings.",
  "BaselineGitShowFailed": "while checking out baseline from commit '{commit_sha}', failed to `git show` versions/baseline.json. This may be fixed by fetching commits with `git fetch`.",
  "_BaselineGitShowFailed.comment": "An example of {commit_sha} is 7cfad47ae9f68b183983090afd6337cd60fd4949.",
  "BaselineMissing": "Baseline version not found. Run:\nvcpkg x-add-version {package_name}\ngit add versions\ngit commit -m \"Update version database\"\nto set {version} as the baseline version.",
  "_BaselineMissing.comment": "An example of {package_name} is zlib. An example of {version} is 1.3.8.",
  "BinarySourcesArg": "Binary caching sources. See 'vcpkg help binarycaching'",
  "_BinarySourcesArg.comment": "'vcpkg help binarycaching' is a command line and should not be localized",
  "BinaryWithInvalidArchitecture": "{path}\n Expected: {expected}, but was {actual}",
  "_BinaryWithInvalidArchitecture.comment": "{expected} and {actual} are architectures An example of {path} is /foo/bar.",
  "BuildAlreadyInstalled": "{spec} is already installed; please remove {spec} before attempting to build it.",
  "_BuildAlreadyInstalled.comment": "An example of {spec} is zlib:x64-windows.",
  "BuildDependenciesMissing": "The build command requires all dependencies to be already installed.\nThe following dependencies are missing:",
  "BuildResultBuildFailed": "BUILD_FAILED",
  "_BuildResultBuildFailed.comment": "Printed after the name of an installed entity to indicate that it failed to build.",
  "BuildResultCacheMissing": "CACHE_MISSING",
  "_BuildResultCacheMissing.comment": "Printed after the name of an installed entity to indicate that it was not present in the binary cache when the user has requested that things may only be installed from the cache rather than built.",
  "BuildResultCascadeDueToMissingDependencies": "CASCADED_DUE_TO_MISSING_DEPENDENCIES",
  "_BuildResultCascadeDueToMissingDependencies.comment": "Printed after the name of an installed entity to indicate that it could not attempt to be installed because one of its transitive dependencies failed to install.",
  "BuildResultDownloaded": "DOWNLOADED",
  "_BuildResultDownloaded.comment": "Printed after the name of an installed entity to indicate that it was successfully downloaded but no build or install was requested.",
  "BuildResultExcluded": "EXCLUDED",
  "_BuildResultExcluded.comment": "Printed after the name of an installed entity to indicate that the user explicitly requested it not be installed.",
  "BuildResultFileConflicts": "FILE_CONFLICTS",
  "_BuildResultFileConflicts.comment": "Printed after the name of an installed entity to indicate that it conflicts with something already installed",
  "BuildResultPostBuildChecksFailed": "POST_BUILD_CHECKS_FAILED",
  "_BuildResultPostBuildChecksFailed.comment": "Printed after the name of an installed entity to indicate that it built successfully, but that it failed post build checks.",
  "BuildResultRemoved": "REMOVED",
  "_BuildResultRemoved.comment": "Printed after the name of an uninstalled entity to indicate that it was successfully uninstalled.",
  "BuildResultSucceeded": "SUCCEEDED",
  "_BuildResultSucceeded.comment": "Printed after the name of an installed entity to indicate that it was built and installed successfully.",
  "BuildResultSummaryHeader": "SUMMARY FOR {triplet}",
  "_BuildResultSummaryHeader.comment": "Displayed before a list of a summary installation results. An example of {triplet} is x64-windows.",
  "BuildResultSummaryLine": "{build_result}: {count}",
  "_BuildResultSummaryLine.comment": "Displayed to show a count of results of a build_result in a summary. An example of {build_result} is One of the BuildResultXxx messages (such as BuildResultSucceeded/SUCCEEDED). An example of {count} is 42.",
  "BuildTreesRootDir": "Buildtrees directory (experimental)",
  "BuildTroubleshootingMessage1": "Please ensure you're using the latest port files with `git pull` and `vcpkg update`.\nThen check for known issues at:",
  "_BuildTroubleshootingMessage1.comment": "First part of build troubleshooting message, printed before the URI to look for existing bugs.",
  "BuildTroubleshootingMessage2": "You can submit a new issue at:",
  "_BuildTroubleshootingMessage2.comment": "Second part of build troubleshooting message, printed after the URI to look for existing bugs but before the URI to file one.",
  "BuildTroubleshootingMessage3": "Include '[{package_name}] Build error' in your bug report title, the following version information in your bug description, and attach any relevant failure logs from above.",
  "_BuildTroubleshootingMessage3.comment": "Third part of build troubleshooting message, printed after the URI to file a bug but before version information about vcpkg itself. An example of {package_name} is zlib.",
  "BuildTroubleshootingMessageGH": "You can also submit an issue by running (GitHub CLI must be installed):",
  "_BuildTroubleshootingMessageGH.comment": "Another part of build troubleshooting message, printed after the URI. An alternative version to create an issue in some cases.",
  "BuildingFromHead": "Building {spec} from HEAD...",
  "_BuildingFromHead.comment": "'HEAD' means the most recent version of source code An example of {spec} is zlib:x64-windows.",
  "BuildingPackage": "Building {spec}...",
  "_BuildingPackage.comment": "An example of {spec} is zlib:x64-windows.",
  "BuildingPackageFailed": "building {spec} failed with: {build_result}",
  "_BuildingPackageFailed.comment": "An example of {spec} is zlib:x64-windows. An example of {build_result} is One of the BuildResultXxx messages (such as BuildResultSucceeded/SUCCEEDED).",
  "BuildingPackageFailedDueToMissingDeps": "due to the following missing dependencies:",
  "_BuildingPackageFailedDueToMissingDeps.comment": "Printed after BuildingPackageFailed, and followed by a list of dependencies that were missing.",
  "BuiltInTriplets": "Built-in Triplets:",
  "BuiltWithIncorrectArchitecture": "The following files were built for an incorrect architecture:",
  "CISettingsExclude": "Comma-separated list of ports to skip",
  "CISettingsOptCIBase": "Path to the ci.baseline.txt file. Used to skip ports and detect regressions.",
  "CISettingsOptExclude": "Comma separated list of ports to skip",
  "CISettingsOptFailureLogs": "Directory to which failure logs will be copied",
  "CISettingsOptHostExclude": "Comma separated list of ports to skip for the host triplet",
  "CISettingsOptOutputHashes": "File to output all determined package hashes",
  "CISettingsOptParentHashes": "File to read package hashes for a parent CI state, to reduce the set of changed packages",
  "CISettingsOptXUnit": "File to output results in XUnit format",
  "CISettingsVerifyGitTree": "Verifies that each git tree object matches its declared version (this is very slow)",
  "CISettingsVerifyVersion": "Prints result for each port rather than only just errors",
  "CISkipInstallation": "The following packages are already installed and won't be built again:",
  "CISwitchOptAllowUnexpectedPassing": "Suppresses 'Passing, remove from fail list' results",
  "CISwitchOptDryRun": "Prints out plan without execution",
  "CISwitchOptRandomize": "Randomizes the install order",
  "CISwitchOptSkipFailures": "Skips ports marked `=fail` in ci.baseline.txt",
  "_CISwitchOptSkipFailures.comment": "=fail is an on-disk format and should not be localized",
  "CISwitchOptXUnitAll": "Reports unchanged ports in the XUnit output",
  "CMakePkgConfigTargetsUsage": "{package_name} provides pkg-config modules:",
  "_CMakePkgConfigTargetsUsage.comment": "An example of {package_name} is zlib.",
  "CMakeTargetsUsage": "{package_name} provides CMake targets:",
  "_CMakeTargetsUsage.comment": "'targets' are a CMake and Makefile concept An example of {package_name} is zlib.",
  "CMakeTargetsUsageHeuristicMessage": "# this is heuristically generated, and may not be correct",
  "_CMakeTargetsUsageHeuristicMessage.comment": "Displayed after CMakeTargetsUsage; the # must be kept at the beginning so that the message remains a comment.",
  "CMakeToolChainFile": "CMake projects should use: \"-DCMAKE_TOOLCHAIN_FILE={path}\"",
  "_CMakeToolChainFile.comment": "An example of {path} is /foo/bar.",
  "CMakeUsingExportedLibs": "To use exported libraries in CMake projects, add {value} to your CMake command line.",
  "_CMakeUsingExportedLibs.comment": "{value} is a CMake command line switch of the form -DFOO=BAR",
  "CheckedOutGitSha": "Checked out Git SHA: {commit_sha}",
  "_CheckedOutGitSha.comment": "An example of {commit_sha} is 7cfad47ae9f68b183983090afd6337cd60fd4949.",
  "CheckedOutObjectMissingManifest": "The checked-out object does not contain a CONTROL file or vcpkg.json file.",
  "ChecksFailedCheck": "vcpkg has crashed; no additional details are available.",
  "ChecksUnreachableCode": "unreachable code was reached",
  "ChecksUpdateVcpkg": "updating vcpkg by rerunning bootstrap-vcpkg may resolve this failure.",
  "CiBaselineAllowUnexpectedPassingRequiresBaseline": "--allow-unexpected-passing can only be used if a baseline is provided via --ci-baseline.",
  "CiBaselineDisallowedCascade": "REGRESSION: {spec} cascaded, but it is required to pass. ({path}).",
  "_CiBaselineDisallowedCascade.comment": "An example of {spec} is zlib:x64-windows. An example of {path} is /foo/bar.",
  "CiBaselineIndependentRegression": "REGRESSION: Independent {spec} failed with {build_result}.",
  "_CiBaselineIndependentRegression.comment": "An example of {spec} is zlib:x64-windows. An example of {build_result} is One of the BuildResultXxx messages (such as BuildResultSucceeded/SUCCEEDED).",
  "CiBaselineRegression": "REGRESSION: {spec} failed with {build_result}. If expected, add {spec}=fail to {path}.",
  "_CiBaselineRegression.comment": "An example of {spec} is zlib:x64-windows. An example of {build_result} is One of the BuildResultXxx messages (such as BuildResultSucceeded/SUCCEEDED). An example of {path} is /foo/bar.",
  "CiBaselineRegressionHeader": "REGRESSIONS:",
  "_CiBaselineRegressionHeader.comment": "Printed before a series of CiBaselineRegression and/or CiBaselineUnexpectedPass messages.",
  "CiBaselineUnexpectedFail": "REGRESSION: {spec} is marked as fail but not supported for {triplet}.",
  "_CiBaselineUnexpectedFail.comment": "An example of {spec} is zlib:x64-windows. An example of {triplet} is x64-windows.",
  "CiBaselineUnexpectedFailCascade": "REGRESSION: {spec} is marked as fail but one dependency is not supported for {triplet}.",
  "_CiBaselineUnexpectedFailCascade.comment": "An example of {spec} is zlib:x64-windows. An example of {triplet} is x64-windows.",
  "CiBaselineUnexpectedPass": "PASSING, REMOVE FROM FAIL LIST: {spec} ({path}).",
  "_CiBaselineUnexpectedPass.comment": "An example of {spec} is zlib:x64-windows. An example of {path} is /foo/bar.",
  "ClearingContents": "Clearing contents of {path}",
  "_ClearingContents.comment": "An example of {path} is /foo/bar.",
  "CmakeTargetsExcluded": "{count} additional targets are not displayed.",
  "_CmakeTargetsExcluded.comment": "An example of {count} is 42.",
  "CmdAcquireExample1": "vcpkg acquire <artifact>",
  "_CmdAcquireExample1.comment": "This is a command line, only the <>s part should be localized",
  "CmdAcquireProjectSynopsis": "Acquires all artifacts referenced by a manifest",
  "CmdAcquireSynopsis": "Acquires the named artifact",
  "CmdActivateSynopsis": "Activates artifacts from a manifest",
  "CmdAddExample1": "vcpkg add port <port name>",
  "CmdAddExample2": "vcpkg add artifact <artifact name>",
  "CmdAddSynopsis": "Adds dependency to manifest",
  "CmdAddVersionExample1": "vcpkg x-add-version <port name>",
  "_CmdAddVersionExample1.comment": "This is a command line, only the <>s part should be localized",
  "CmdAddVersionOptAll": "Processes versions for all ports",
  "CmdAddVersionOptOverwriteVersion": "Overwrites git-tree of an existing version",
  "CmdAddVersionOptSkipFormatChk": "Skips the formatting check of vcpkg.json files",
  "CmdAddVersionOptSkipVersionFormatChk": "Skips the version format check",
  "CmdAddVersionOptVerbose": "Prints success messages rather than only errors",
  "CmdAddVersionSynopsis": "Adds a version to the version database",
  "CmdBootstrapStandaloneSynopsis": "Bootstraps a vcpkg root from only a vcpkg binary",
  "CmdBuildExample1": "vcpkg build <port spec>",
  "_CmdBuildExample1.comment": "This is a command line, only the <>s part should be localized",
  "CmdBuildExternalExample1": "vcpkg build-external <port name> <source path>",
  "_CmdBuildExternalExample1.comment": "This is a command line, only the <>s part should be localized",
  "CmdBuildExternalExample2": "vcpkg build-external zlib2 C:\\path\\to\\dir\\with\\vcpkg.json",
  "_CmdBuildExternalExample2.comment": "This is a command line, only the path part should be changed to a path conveying the same idea",
  "CmdBuildExternalSynopsis": "Builds port from a path",
  "CmdBuildSynopsis": "Builds a port",
  "CmdCheckSupportExample1": "vcpkg x-check-support <port name>",
  "_CmdCheckSupportExample1.comment": "This is a command line, only the <>s part should be localized",
  "CmdCheckSupportSynopsis": "Tests whether a port is supported without building it",
  "CmdCiCleanSynopsis": "Clears all files to prepare for a CI run",
  "_CmdCiCleanSynopsis.comment": "CI is continuous integration (building everything together)",
  "CmdCiSynopsis": "Tries building all ports for CI testing",
  "_CmdCiSynopsis.comment": "CI is continuous integration (building everything together)",
  "CmdCiVerifyVersionsSynopsis": "Checks integrity of the version database",
  "CmdCreateExample1": "vcpkg create <port name> <uri>",
  "_CmdCreateExample1.comment": "This is a command line, only the <>s part should be localized",
  "CmdCreateExample2": "vcpkg create my-fancy-port https://example.com/sources.zip",
  "_CmdCreateExample2.comment": "This is a command line, 'my-fancy-port' and 'sources.zip' should probably be localized",
  "CmdCreateExample3": "vcpkg create <port name> <uri> <downloaded filename>",
  "_CmdCreateExample3.comment": "This is a command line, only the <>s part should be localized",
  "CmdDeactivateSynopsis": "Removes all artifact activations from the current shell",
  "CmdDependInfoExample1": "vcpkg depend-info <port name>",
  "_CmdDependInfoExample1.comment": "This is a command line, only the <>s part should be localized",
  "CmdDependInfoFormatConflict": "Conflicting formats specified. Only one of --format, --dgml, or --dot are accepted.",
  "CmdDependInfoFormatHelp": "Chooses output format, one of `list`, `tree`, `mermaid`, `dot`, or `dgml`",
  "_CmdDependInfoFormatHelp.comment": "The alternatives in ``s must not be localized.",
  "CmdDependInfoFormatInvalid": "--format={value} is not a recognized format. --format must be one of `list`, `tree`, `mermaid`, `dot`, or `dgml`.",
  "_CmdDependInfoFormatInvalid.comment": "The alternatives in ``s must not be localized. {value} is what the user specified.",
  "CmdDependInfoOptDepth": "Shows recursion depth in `list` output",
  "CmdDependInfoOptMaxRecurse": "Sets max recursion depth. Default is no limit",
  "CmdDependInfoOptSort": "Chooses sort order for the `list` format, one of `lexicographical`, `topological` (default), `reverse`",
  "_CmdDependInfoOptSort.comment": "The alternatives in ``s must not be localized, but the localized text can explain what each value means. The value `reverse` means 'reverse-topological'.",
  "CmdDependInfoShowDepthFormatMismatch": "--show-depth can only be used with `list` and `tree` formats.",
  "CmdDependInfoXtreeTree": "--sort=x-tree cannot be used with formats other than tree",
  "CmdDownloadExample1": "vcpkg x-download <filepath> <sha512> --url=https://...",
  "_CmdDownloadExample1.comment": "This is a command line, only the <filepath> part should be localized",
  "CmdDownloadExample2": "vcpkg x-download <filepath> --sha512=<sha512> --url=https://...",
  "_CmdDownloadExample2.comment": "This is a command line, only the <filepath> part should be localized",
  "CmdDownloadExample3": "vcpkg x-download <filepath> --skip-sha512 --url=https://...",
  "_CmdDownloadExample3.comment": "This is a command line, only the <filepath> part should be localized",
  "CmdDownloadSynopsis": "Downloads a file",
  "CmdEditExample1": "vcpkg edit <port name>",
  "_CmdEditExample1.comment": "This is a command line, only the <port name> part should be localized",
  "CmdEditOptAll": "Opens editor into the port as well as the port-specific buildtree subfolder",
  "CmdEditOptBuildTrees": "Opens editor into the port-specific buildtree subfolder",
  "CmdEnvOptions": "Adds installed {path} to {env_var}",
  "_CmdEnvOptions.comment": "An example of {path} is /foo/bar. An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "CmdExportEmptyPlan": "Refusing to create an export of zero packages. Install packages before exporting.",
  "CmdExportExample1": "vcpkg export <port names> [--nuget] [--directory=out_dir]",
  "_CmdExportExample1.comment": "This is a command line, only <port names> and the out_dir part should be localized",
  "CmdExportOpt7Zip": "Exports to a 7zip (.7z) file",
  "CmdExportOptChocolatey": "Exports a Chocolatey package (experimental)",
  "CmdExportOptDebug": "Enables prefab debug",
  "CmdExportOptDryRun": "Does not actually export",
  "CmdExportOptIFW": "Exports to an IFW-based installer",
  "CmdExportOptInstalled": "Exports all installed packages",
  "CmdExportOptMaven": "Enables Maven",
  "CmdExportOptNuget": "Exports a NuGet package",
  "CmdExportOptPrefab": "Exports to Prefab format",
  "CmdExportOptRaw": "Exports to an uncompressed directory",
  "CmdExportOptZip": "Exports to a zip file",
  "CmdExportSettingChocolateyMaint": "The maintainer for the exported Chocolatey package (experimental)",
  "CmdExportSettingChocolateyVersion": "The version suffix to add for the exported Chocolatey package (experimental)",
  "CmdExportSettingConfigFile": "The temporary file path for the installer configuration",
  "CmdExportSettingInstallerPath": "The file path for the exported installer",
  "CmdExportSettingNugetDesc": "Description for the exported NuGet package",
  "CmdExportSettingNugetID": "Id for the exported NuGet package (overrides --output)",
  "CmdExportSettingNugetVersion": "The version for the exported NuGet package",
  "CmdExportSettingOutput": "The output name (used to construct filename)",
  "CmdExportSettingOutputDir": "The output directory for produced artifacts",
  "CmdExportSettingPkgDir": "The temporary directory path for the repacked packages",
  "CmdExportSettingPrefabArtifactID": "Artifact Id is the name of the project according Maven specifications",
  "CmdExportSettingPrefabGroupID": "GroupId uniquely identifies your project according Maven specifications",
  "CmdExportSettingPrefabVersion": "Version is the name of the project according Maven specifications",
  "CmdExportSettingRepoDir": "The directory path for the exported repository",
  "CmdExportSettingRepoURL": "The remote repository URL for the online installer",
  "CmdExportSettingSDKMinVersion": "The Android minimum supported SDK version",
  "CmdExportSettingSDKTargetVersion": "The Android target sdk version",
  "CmdExportSynopsis": "Creates a standalone deployment of installed ports",
  "CmdFetchOptXStderrStatus": "Prints status/downloading messages to stderr rather than stdout (Errors/failures still go to stdout)",
  "CmdFetchSynopsis": "Fetches something from the system or the internet",
  "CmdFindExample1": "vcpkg find port <port name>",
  "_CmdFindExample1.comment": "This is a command line, only the <>s part should be localized",
  "CmdFindExample2": "vcpkg find artifact <artifact name>",
  "_CmdFindExample2.comment": "This is a command line, only the <>s part should be localized",
  "CmdFindSynopsis": "Finds a port or artifact that may be installed or activated",
  "CmdFormatManifestExample1": "vcpkg format-manifest <vcpkg.json path>",
  "_CmdFormatManifestExample1.comment": "This is a command line, only the <vcpkg.json path>s part should be localized",
  "CmdFormatManifestOptAll": "Formats all ports' manifest files",
  "CmdFormatManifestOptConvertControl": "Converts CONTROL files to manifest files",
  "CmdFormatManifestSynopsis": "Prettyfies vcpkg.json",
  "CmdGenerateMSBuildPropsExample1": "vcpkg generate-msbuild-props --msbuild-props <path>",
  "_CmdGenerateMSBuildPropsExample1.comment": "This is a command line, only the <path> part should be localized",
  "CmdGenerateMSBuildPropsExample2": "vcpkg generate-msbuild-props --msbuild-props out.props",
  "_CmdGenerateMSBuildPropsExample2.comment": "This is a command line, only the word 'out' should be localized",
  "CmdGenerateMSBuildPropsSynopsis": "Generates msbuild .props files as if activating a manifest's artifact dependencies, without acquiring them",
  "CmdGenerateMessageMapOptNoOutputComments": "Excludes comments when generating the message map (useful for generating the English localization file)",
  "CmdHashExample1": "vcpkg hash <path>",
  "_CmdHashExample1.comment": "This is a command line, only the <path> part should be localized",
  "CmdHashExample2": "vcpkg hash <path> SHA256",
  "_CmdHashExample2.comment": "This is a command line, only the <path> part should be localized",
  "CmdHashSynopsis": "Gets a file's SHA256 or SHA512",
  "CmdHelpCommandSynopsis": "Displays help detail for <command>",
  "CmdHelpCommands": "help <command>",
  "_CmdHelpCommands.comment": "This is a command line, only <command> should be localized.",
  "CmdHelpCommandsSynopsis": "Displays full list of commands, including rare ones not listed here",
  "CmdHelpTopic": "help <topic>",
  "_CmdHelpTopic.comment": "This is a command line, only <topic> should be localized.",
  "CmdInfoOptInstalled": "(experimental) Reports installed packages rather than available",
  "CmdInfoOptTransitive": "(experimental) Also reports dependencies of installed packages",
  "CmdInitRegistryExample1": "vcpkg x-init-registry <path>",
  "_CmdInitRegistryExample1.comment": "This is a command line, only the <path> part should be localized",
  "CmdInitRegistrySynopsis": "Creates a blank git registry",
  "CmdInstallExample1": "vcpkg install <port name> <port name>...",
  "_CmdInstallExample1.comment": "This is a command line, only the <> parts should be localized",
  "CmdIntegrateSynopsis": "Integrates vcpkg with machines, projects, or shells",
  "CmdListExample2": "vcpkg list <filter>",
  "_CmdListExample2.comment": "This is a command line, only the <filter> part should be localized",
  "CmdNewExample1": "vcpkg new --name=example --version=1.0",
  "_CmdNewExample1.comment": "This is a command line, only the word example should be localized",
  "CmdNewOptApplication": "Creates an application manifest (don't require name or version)",
  "CmdNewOptSingleFile": "Embeds vcpkg-configuration.json into vcpkg.json",
  "CmdNewOptVersionDate": "Interprets --version as an ISO 8601 date. (YYYY-MM-DD)",
  "CmdNewOptVersionRelaxed": "Interprets --version as a relaxed-numeric version (Nonnegative numbers separated by dots)",
  "CmdNewOptVersionString": "Interprets --version as a string with no ordering behavior",
  "CmdNewSettingName": "Name for the new manifest",
  "CmdNewSettingVersion": "Version for the new manifest",
  "CmdNewSynposis": "Creates a new manifest",
  "CmdOwnsExample1": "vcpkg owns <pattern>",
  "_CmdOwnsExample1.comment": "This is a command line, only the part <pattern> should be localized.",
  "CmdPackageInfoExample1": "vcpkg x-package-info <package name>...",
  "_CmdPackageInfoExample1.comment": "This is a command line, only the part <package name> should be localized.",
  "CmdPortsdiffExample1": "vcpkg portsdiff <branch name>",
  "_CmdPortsdiffExample1.comment": "This is a command line, only the <branch name> part should be localized",
  "CmdPortsdiffExample2": "vcpkg portsdiff <from> <to>",
  "_CmdPortsdiffExample2.comment": "This is a command line, only the parts in <>s should be localized",
  "CmdPortsdiffSynopsis": "Diffs changes in port versions between commits",
  "CmdRegenerateOptDryRun": "Does not actually perform the action, shows only what would be done",
  "CmdRegenerateOptForce": "Proceeds with the (potentially dangerous) action without confirmation",
  "CmdRegenerateOptNormalize": "Applies any deprecation fixes",
  "CmdRemoveExample1": "vcpkg remove <package name>...",
  "_CmdRemoveExample1.comment": "This is a command line, only the part <package name> should be localized.",
  "CmdRemoveOptDryRun": "Prints the packages to be removed, but does not remove them",
  "CmdRemoveOptOutdated": "Removes all packages with versions that do not match the built-in registry",
  "CmdRemoveOptRecurse": "Allows removal of dependent packages not explicitly specified",
  "CmdSearchExample1": "vcpkg search <pattern>",
  "_CmdSearchExample1.comment": "This is a command line, only the part <pattern> should be localized.",
  "CmdSetInstalledExample1": "vcpkg x-set-installed <package name> <package name>...",
  "_CmdSetInstalledExample1.comment": "This is a command line, only the part <package name> should be localized.",
  "CmdSetInstalledOptDryRun": "Does not actually build or install",
  "CmdSetInstalledOptNoUsage": "Does not print CMake usage information after install",
  "CmdSetInstalledOptWritePkgConfig": "Writes a NuGet packages.config-formatted file for use with external binary caching. See `vcpkg help binarycaching` for more information",
  "_CmdSetInstalledOptWritePkgConfig.comment": "'vcpkg help binarycaching' is a command line and should not be localized.",
  "CmdSetInstalledSynopsis": "Installs, upgrades, or removes packages such that that installed matches exactly those supplied",
  "CmdSettingCopiedFilesLog": "Path to the copied files log to create",
  "CmdSettingInstalledDir": "Path to the installed tree to use",
  "CmdSettingTLogFile": "Path to the tlog file to create",
  "CmdSettingTargetBin": "Path to the binary to analyze",
  "CmdUpdateBaselineOptDryRun": "Prints out plan without execution",
  "CmdUpdateBaselineOptInitial": "Adds a `builtin-baseline` to a vcpkg.json that doesn't already have it",
  "CmdUpdateBaselineSynopsis": "Updates baselines of git registries in a manifest to those registries' HEAD commit",
  "CmdUpdateRegistryAll": "Updates all known artifact registries",
  "CmdUpdateRegistryAllExcludesTargets": "Update registry --all cannot be used with a list of artifact registries",
  "CmdUpdateRegistryAllOrTargets": "Update registry requires either a list of artifact registry names or URiIs to update, or --all.",
  "CmdUpdateRegistryExample3": "vcpkg x-update-registry <artifact registry name>",
  "_CmdUpdateRegistryExample3.comment": "This is a command line, only the <artifact registry name> part should be localized.",
  "CmdUpdateRegistrySynopsis": "Re-downloads an artifact registry",
  "CmdUpgradeOptNoDryRun": "Actually upgrade",
  "CmdUpgradeOptNoKeepGoing": "Stop installing packages on failure",
  "CmdUseExample1": "vcpkg use <artifact name>",
  "_CmdUseExample1.comment": "This is a command line, only the <artifact name> part should be localized.",
  "CmdUseSynopsis": "Activate a single artifact in this shell",
  "CmdVSInstancesSynopsis": "Lists detected Visual Studio instances",
  "CmdXDownloadOptHeader": "Additional header to use when fetching from URLs",
  "CmdXDownloadOptSha": "The hash of the file to be downloaded",
  "CmdXDownloadOptSkipSha": "Skips check of SHA512 of the downloaded file",
  "CmdXDownloadOptStore": "Stores the the file should father than fetching it",
  "CmdXDownloadOptUrl": "URL to download and store if missing from cache",
  "CmdZApplocalSynopsis": "Copies a binary's dependencies from the installed tree to where that binary's location for app-local deployment",
  "CmdZExtractExample1": "vcpkg z-extract <archive path> <output directory>",
  "_CmdZExtractExample1.comment": "This is a command line, only the parts in <>s should be localized",
  "CmdZExtractExample2": "vcpkg z-extract source.zip source_dir --strip 2",
  "_CmdZExtractExample2.comment": "This is a command line, the example archive 'source.zip' and the example output directory 'source_dir' should be localized",
  "CmdZExtractOptStrip": "The number of leading directories to strip from all paths",
  "CommandEnvExample2": "vcpkg env \"ninja -C <path>\" --triplet x64-windows",
  "_CommandEnvExample2.comment": "This is a command line, only the <path> part should be localized",
  "CommandFailed": "command:\n{command_line}\nfailed with the following output:",
  "_CommandFailed.comment": "An example of {command_line} is vcpkg install zlib.",
  "CommandFailedCode": "command:\n{command_line}\nfailed with exit code {exit_code} and the following output:",
  "_CommandFailedCode.comment": "An example of {command_line} is vcpkg install zlib. An example of {exit_code} is 127.",
  "CommunityTriplets": "Community Triplets:",
  "CompilerPath": "Compiler found: {path}",
  "_CompilerPath.comment": "An example of {path} is /foo/bar.",
  "CompressFolderFailed": "Failed to compress folder \"{path}\":",
  "_CompressFolderFailed.comment": "An example of {path} is /foo/bar.",
  "ComputingInstallPlan": "Computing installation plan...",
  "ConfigurationErrorRegistriesWithoutBaseline": "The configuration defined in {path} is invalid.\n\nUsing registries requires that a baseline is set for the default registry or that the default registry is null.\n\nSee {url} for more details.",
  "_ConfigurationErrorRegistriesWithoutBaseline.comment": "An example of {path} is /foo/bar. An example of {url} is https://github.com/microsoft/vcpkg.",
  "ConfigurationNestedDemands": "[\"{json_field}\"] contains a nested `demands` object (nested `demands` have no effect)",
  "_ConfigurationNestedDemands.comment": "An example of {json_field} is identifer.",
  "ConflictingFiles": "The following files are already installed in {path} and are in conflict with {spec}",
  "_ConflictingFiles.comment": "An example of {path} is /foo/bar. An example of {spec} is zlib:x64-windows.",
  "ConsideredVersions": "The following executables were considered but discarded because of the version requirement of {version}:",
  "_ConsideredVersions.comment": "An example of {version} is 1.3.8.",
  "ConstraintViolation": "Found a constraint violation:",
  "ContinueCodeUnitInStart": "found continue code unit in start position",
  "ControlAndManifestFilesPresent": "Both a manifest file and a CONTROL file exist in port directory: {path}",
  "_ControlAndManifestFilesPresent.comment": "An example of {path} is /foo/bar.",
  "ControlCharacterInString": "Control character in string",
  "ControlSupportsMustBeAPlatformExpression": "\"Supports\" must be a platform expression",
  "CopyrightIsDir": "`{path}` being a directory is deprecated.",
  "_CopyrightIsDir.comment": "An example of {path} is /foo/bar.",
  "CorruptedDatabase": "vcpkg's installation database corrupted. This is either a bug in vcpkg or something else has modified the contents of the 'installed' directory in an unexpected way. You may be able to fix this by deleting the 'installed' directory and reinstalling what you want to use. If this problem happens consistently, please file a bug at https://github.com/microsoft/vcpkg .",
  "CorruptedInstallTree": "Your vcpkg 'installed' tree is corrupted.",
  "CouldNotDeduceNugetIdAndVersion": "Could not deduce nuget id and version from filename: {path}",
  "_CouldNotDeduceNugetIdAndVersion.comment": "An example of {path} is /foo/bar.",
  "CouldNotFindBaselineInCommit": "Couldn't find baseline in {url} at {commit_sha} for {package_name}.",
  "_CouldNotFindBaselineInCommit.comment": "An example of {url} is https://github.com/microsoft/vcpkg. An example of {commit_sha} is 7cfad47ae9f68b183983090afd6337cd60fd4949. An example of {package_name} is zlib.",
  "CouldNotFindGitTreeAtCommit": "could not find the git tree for `versions` in repo {package_name} at commit {commit_sha}",
  "_CouldNotFindGitTreeAtCommit.comment": "An example of {package_name} is zlib. An example of {commit_sha} is 7cfad47ae9f68b183983090afd6337cd60fd4949.",
  "CouldNotFindToolVersion": "Could not find <tools version=\"{version}\"> in {path}",
  "_CouldNotFindToolVersion.comment": "An example of {version} is 1.3.8. An example of {path} is /foo/bar.",
  "CouldNotFindVersionDatabaseFile": "Couldn't find the versions database file: {path}",
  "_CouldNotFindVersionDatabaseFile.comment": "An example of {path} is /foo/bar.",
  "CreateFailureLogsDir": "Creating failure logs output directory {path}.",
  "_CreateFailureLogsDir.comment": "An example of {path} is /foo/bar.",
  "CreatedNuGetPackage": "Created nupkg: {path}",
  "_CreatedNuGetPackage.comment": "An example of {path} is /foo/bar.",
  "Creating7ZipArchive": "Creating 7zip archive...",
  "CreatingNugetPackage": "Creating NuGet package...",
  "CreatingZipArchive": "Creating zip archive...",
  "CreationFailed": "Creating {path} failed.",
  "_CreationFailed.comment": "An example of {path} is /foo/bar.",
  "CurlFailedToPut": "curl failed to put file to {url} with exit code {exit_code}.",
  "_CurlFailedToPut.comment": "curl is the name of a program, see curl.se An example of {exit_code} is 127. An example of {url} is https://github.com/microsoft/vcpkg.",
  "CurlFailedToPutHttp": "curl failed to put file to {url} with exit code {exit_code} and http code {value}.",
  "_CurlFailedToPutHttp.comment": "curl is the name of a program, see curl.se. {value} is an HTTP status code An example of {exit_code} is 127. An example of {url} is https://github.com/microsoft/vcpkg.",
  "CurlResponseTruncatedRetrying": "curl returned a partial response; waiting {value} milliseconds and trying again",
  "_CurlResponseTruncatedRetrying.comment": "{value} is the number of milliseconds for which we are waiting this time",
  "CurlTimeout": "curl was unable to perform all requested HTTP operations, even after timeout and retries. The last command line was: {command_line}",
  "_CurlTimeout.comment": "An example of {command_line} is vcpkg install zlib.",
  "CurrentCommitBaseline": "You can use the current commit as a baseline, which is:\n\t\"builtin-baseline\": \"{commit_sha}\"",
  "_CurrentCommitBaseline.comment": "An example of {commit_sha} is 7cfad47ae9f68b183983090afd6337cd60fd4949.",
  "CycleDetectedDuring": "cycle detected during {spec}:",
  "_CycleDetectedDuring.comment": "An example of {spec} is zlib:x64-windows.",
  "DefaultBinaryCachePlatformCacheRequiresAbsolutePath": "Environment variable VCPKG_DEFAULT_BINARY_CACHE must be a directory (was: {path})",
  "_DefaultBinaryCachePlatformCacheRequiresAbsolutePath.comment": "An example of {path} is /foo/bar.",
  "DefaultBinaryCacheRequiresAbsolutePath": "Environment variable VCPKG_DEFAULT_BINARY_CACHE must be absolute (was: {path})",
  "_DefaultBinaryCacheRequiresAbsolutePath.comment": "An example of {path} is /foo/bar.",
  "DefaultBinaryCacheRequiresDirectory": "Environment variable VCPKG_DEFAULT_BINARY_CACHE must be a directory (was: {path})",
  "_DefaultBinaryCacheRequiresDirectory.comment": "An example of {path} is /foo/bar.",
  "DefaultFeatureCore": "the feature \"core\" turns off default features and thus can't be in the default features list",
  "_DefaultFeatureCore.comment": "The word \"core\" is an on-disk name that must not be localized.",
  "DefaultFeatureDefault": "the feature \"default\" refers to the set of default features and thus can't be in the default features list",
  "_DefaultFeatureDefault.comment": "The word \"default\" is an on-disk name that must not be localized.",
  "DefaultFeatureIdentifier": "the names of default features must be identifiers",
  "DefaultFlag": "Defaulting to --{option} being on.",
  "_DefaultFlag.comment": "An example of {option} is editable.",
  "DefaultRegistryIsArtifact": "The default registry cannot be an artifact registry.",
  "DeleteVcpkgConfigFromManifest": "-- Or remove \"vcpkg-configuration\" from the manifest file {path}.",
  "_DeleteVcpkgConfigFromManifest.comment": "An example of {path} is /foo/bar.",
  "DependencyFeatureCore": "the feature \"core\" cannot be in a dependency's feature list. To turn off default features, add \"default-features\": false instead.",
  "_DependencyFeatureCore.comment": "The word \"core\" is an on-disk name that must not be localized. The \"default-features\" part is JSON syntax that must be copied verbatim into the user's file.",
  "DependencyFeatureDefault": "the feature \"default\" cannot be in a dependency's feature list. To turn on default features, add \"default-features\": true instead.",
  "_DependencyFeatureDefault.comment": "The word \"default\" is an on-disk name that must not be localized. The \"default-features\" part is JSON syntax that must be copied verbatim into the user's file.",
  "DependencyGraphCalculation": "Dependency graph submission enabled.",
  "DependencyGraphFailure": "Dependency graph submission failed.",
  "DependencyGraphSuccess": "Dependency graph submission successful.",
  "DeprecatedPrefabDebugOption": "--prefab-debug is now deprecated.",
  "DetectCompilerHash": "Detecting compiler hash for triplet {triplet}...",
  "_DetectCompilerHash.comment": "An example of {triplet} is x64-windows.",
  "DocumentedFieldsSuggestUpdate": "If these are documented fields that should be recognized try updating the vcpkg tool.",
  "DownloadAvailable": "A downloadable copy of this tool is available and can be used by unsetting {env_var}.",
  "_DownloadAvailable.comment": "An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "DownloadFailedCurl": "{url}: curl failed to download with exit code {exit_code}",
  "_DownloadFailedCurl.comment": "An example of {url} is https://github.com/microsoft/vcpkg. An example of {exit_code} is 127.",
  "DownloadFailedHashMismatch": "File does not have the expected hash:\nurl: {url}\nFile: {path}\nExpected hash: {expected}\nActual hash: {actual}",
  "_DownloadFailedHashMismatch.comment": "{expected} and {actual} are SHA512 hashes in hex format. An example of {url} is https://github.com/microsoft/vcpkg. An example of {path} is /foo/bar.",
  "DownloadFailedRetrying": "Download failed -- retrying after {value}ms",
  "_DownloadFailedRetrying.comment": "{value} is a number of milliseconds",
  "DownloadFailedStatusCode": "{url}: failed: status code {value}",
  "_DownloadFailedStatusCode.comment": "{value} is an HTTP status code An example of {url} is https://github.com/microsoft/vcpkg.",
  "DownloadRootsDir": "Downloads directory (default: {env_var})",
  "_DownloadRootsDir.comment": "An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "DownloadWinHttpError": "{url}: {system_api} failed with exit code {exit_code}",
  "_DownloadWinHttpError.comment": "An example of {system_api} is CreateProcessW. An example of {exit_code} is 127. An example of {url} is https://github.com/microsoft/vcpkg.",
  "DownloadedSources": "Downloaded sources for {spec}",
  "_DownloadedSources.comment": "An example of {spec} is zlib:x64-windows.",
  "DownloadingPortableToolVersionX": "A suitable version of {tool_name} was not found (required v{version}) Downloading portable {tool_name} {version}...",
  "_DownloadingPortableToolVersionX.comment": "An example of {tool_name} is aria2. An example of {version} is 1.3.8.",
  "DownloadingTool": "Downloading {tool_name}...\n{url}->{path}",
  "_DownloadingTool.comment": "An example of {tool_name} is aria2. An example of {url} is https://github.com/microsoft/vcpkg. An example of {path} is /foo/bar.",
  "DownloadingUrl": "Downloading {url}",
  "_DownloadingUrl.comment": "An example of {url} is https://github.com/microsoft/vcpkg.",
  "DownloadingVcpkgStandaloneBundle": "Downloading standalone bundle {version}.",
  "_DownloadingVcpkgStandaloneBundle.comment": "An example of {version} is 1.3.8.",
  "DownloadingVcpkgStandaloneBundleLatest": "Downloading latest standalone bundle.",
  "DuplicatePackagePattern": "Package \"{package_name}\" is duplicated.",
  "_DuplicatePackagePattern.comment": "An example of {package_name} is zlib.",
  "DuplicatePackagePatternFirstOcurrence": "First declared in:",
  "DuplicatePackagePatternIgnoredLocations": "The following redeclarations will be ignored:",
  "DuplicatePackagePatternLocation": "location: {path}",
  "_DuplicatePackagePatternLocation.comment": "An example of {path} is /foo/bar.",
  "DuplicatePackagePatternRegistry": "registry: {url}",
  "_DuplicatePackagePatternRegistry.comment": "An example of {url} is https://github.com/microsoft/vcpkg.",
  "DuplicatedKeyInObj": "Duplicated key \"{value}\" in an object",
  "_DuplicatedKeyInObj.comment": "{value} is a json property/object",
  "ElapsedForPackage": "Elapsed time to handle {spec}: {elapsed}",
  "_ElapsedForPackage.comment": "An example of {spec} is zlib:x64-windows. An example of {elapsed} is 3.532 min.",
  "ElapsedTimeForChecks": "Time to determine pass/fail: {elapsed}",
  "_ElapsedTimeForChecks.comment": "An example of {elapsed} is 3.532 min.",
  "EmailVcpkgTeam": "Send an email to {url} with any feedback.",
  "_EmailVcpkgTeam.comment": "An example of {url} is https://github.com/microsoft/vcpkg.",
  "EmbeddingVcpkgConfigInManifest": "Embedding `vcpkg-configuration` in a manifest file is an EXPERIMENTAL feature.",
  "EmptyLicenseExpression": "SPDX license expression was empty.",
  "EndOfStringInCodeUnit": "found end of string in middle of code point",
  "EnvInvalidMaxConcurrency": "{env_var} is {value}, must be > 0",
  "_EnvInvalidMaxConcurrency.comment": "{value} is the invalid value of an environment variable An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "EnvPlatformNotSupported": "Build environment commands are not supported on this platform",
  "EnvStrFailedToExtract": "could not expand the environment string:",
  "EnvVarMustBeAbsolutePath": "{env_var} ({path}) was not an absolute path",
  "_EnvVarMustBeAbsolutePath.comment": "An example of {path} is /foo/bar. An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "ErrorDetectingCompilerInfo": "while detecting compiler information:\nThe log file content at \"{path}\" is:",
  "_ErrorDetectingCompilerInfo.comment": "An example of {path} is /foo/bar.",
  "ErrorIndividualPackagesUnsupported": "In manifest mode, `vcpkg install` does not support individual package arguments.\nTo install additional packages, edit vcpkg.json and then run `vcpkg install` without any package arguments.",
  "ErrorInvalidClassicModeOption": "The option --{option} is not supported in classic mode and no manifest was found.",
  "_ErrorInvalidClassicModeOption.comment": "An example of {option} is editable.",
  "ErrorInvalidExtractOption": "--{option} must be set to a nonnegative integer or 'AUTO'.",
  "_ErrorInvalidExtractOption.comment": "The keyword 'AUTO' should not be localized An example of {option} is editable.",
  "ErrorInvalidManifestModeOption": "The option --{option} is not supported in manifest mode.",
  "_ErrorInvalidManifestModeOption.comment": "An example of {option} is editable.",
  "ErrorMissingVcpkgRoot": "Could not detect vcpkg-root. If you are trying to use a copy of vcpkg that you've built, you must define the VCPKG_ROOT environment variable to point to a cloned copy of https://github.com/Microsoft/vcpkg.",
  "ErrorNoVSInstance": "in triplet {triplet}: Unable to find a valid Visual Studio instance",
  "_ErrorNoVSInstance.comment": "An example of {triplet} is x64-windows.",
  "ErrorNoVSInstanceAt": "at \"{path}\"",
  "_ErrorNoVSInstanceAt.comment": "An example of {path} is /foo/bar.",
  "ErrorNoVSInstanceFullVersion": "with toolset version prefix {version}",
  "_ErrorNoVSInstanceFullVersion.comment": "An example of {version} is 1.3.8.",
  "ErrorNoVSInstanceVersion": "with toolset version {version}",
  "_ErrorNoVSInstanceVersion.comment": "An example of {version} is 1.3.8.",
  "ErrorParsingBinaryParagraph": "while parsing the Binary Paragraph for {spec}",
  "_ErrorParsingBinaryParagraph.comment": "An example of {spec} is zlib:x64-windows.",
  "ErrorRequireBaseline": "this vcpkg instance requires a manifest with a specified baseline in order to interact with ports. Please add 'builtin-baseline' to the manifest or add a 'vcpkg-configuration.json' that redefines the default registry.",
  "ErrorRequirePackagesList": "`vcpkg install` requires a list of packages to install in classic mode.",
  "ErrorUnableToDetectCompilerInfo": "vcpkg was unable to detect the active compiler's information. See above for the CMake failure output.",
  "_ErrorUnableToDetectCompilerInfo.comment": "failure output will be displayed at the top of this",
  "ErrorVcvarsUnsupported": "in triplet {triplet}: Use of Visual Studio's Developer Prompt is unsupported on non-Windows hosts.\nDefine 'VCPKG_CMAKE_SYSTEM_NAME' or 'VCPKG_CHAINLOAD_TOOLCHAIN_FILE' in the triplet file.",
  "_ErrorVcvarsUnsupported.comment": "An example of {triplet} is x64-windows.",
  "ErrorVsCodeNotFound": "Visual Studio Code was not found and the environment variable {env_var} is not set or invalid.",
  "_ErrorVsCodeNotFound.comment": "An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "ErrorVsCodeNotFoundPathExamined": "The following paths were examined:",
  "ErrorWhileFetchingBaseline": "while fetching baseline `\"{value}\"` from repo {package_name}:",
  "_ErrorWhileFetchingBaseline.comment": "{value} is a commit sha. An example of {package_name} is zlib.",
  "ErrorWhileParsing": "Errors occurred while parsing {path}.",
  "_ErrorWhileParsing.comment": "An example of {path} is /foo/bar.",
  "ErrorWhileWriting": "Error occurred while writing {path}.",
  "_ErrorWhileWriting.comment": "An example of {path} is /foo/bar.",
  "ErrorsFound": "Found the following errors:",
  "ExamplesHeader": "Examples:",
  "_ExamplesHeader.comment": "Printed before a list of example command lines",
  "ExceededRecursionDepth": "Recursion depth exceeded.",
  "ExcludedPackage": "Excluded {spec}",
  "_ExcludedPackage.comment": "An example of {spec} is zlib:x64-windows.",
  "ExcludedPackages": "The following packages are excluded:",
  "ExpectedAnObject": "expected an object",
  "ExpectedAtMostOneSetOfTags": "Found {count} sets of {old_value}.*{new_value} but expected at most 1, in block:\n{value}",
  "_ExpectedAtMostOneSetOfTags.comment": "{old_value} is a left tag and {new_value} is the right tag. {value} is the input. An example of {count} is 42.",
  "ExpectedCharacterHere": "expected '{expected}' here",
  "_ExpectedCharacterHere.comment": "{expected} is a locale-invariant delimiter; for example, the ':' or '=' in 'zlib:x64-windows=skip'",
  "ExpectedDefaultFeaturesList": "expected ',' or end of text in default features list",
  "ExpectedDependenciesList": "expected ',' or end of text in dependencies list",
  "ExpectedDigitsAfterDecimal": "Expected digits after the decimal point",
  "ExpectedExplicitTriplet": "expected an explicit triplet",
  "ExpectedFailOrSkip": "expected 'fail', 'skip', or 'pass' here",
  "ExpectedFeatureListTerminal": "expected ',' or ']' in feature list",
  "ExpectedFeatureName": "expected feature name (must be lowercase, digits, '-')",
  "ExpectedOneSetOfTags": "Found {count} sets of {old_value}.*{new_value} but expected exactly 1, in block:\n{value}",
  "_ExpectedOneSetOfTags.comment": "{old_value} is a left tag and {new_value} is the right tag. {value} is the input. An example of {count} is 42.",
  "ExpectedOneVersioningField": "expected only one versioning field",
  "ExpectedPathToExist": "Expected {path} to exist after fetching",
  "_ExpectedPathToExist.comment": "An example of {path} is /foo/bar.",
  "ExpectedPortName": "expected a port name here (must be lowercase, digits, '-')",
  "ExpectedReadWriteReadWrite": "unexpected argument: expected 'read', readwrite', or 'write'",
  "ExpectedStatusField": "Expected 'status' field in status paragraph",
  "ExpectedTripletName": "expected a triplet name here (must be lowercase, digits, '-')",
  "ExportArchitectureReq": "Export prefab requires targeting at least one of the following architectures arm64-v8a, armeabi-v7a, x86_64, x86 to be present.",
  "ExportPrefabRequiresAndroidTriplet": "export prefab requires an Android triplet.",
  "Exported7zipArchive": "7zip archive exported at: {path}",
  "_Exported7zipArchive.comment": "An example of {path} is /foo/bar.",
  "ExportedZipArchive": "Zip archive exported at: {path}",
  "_ExportedZipArchive.comment": "An example of {path} is /foo/bar.",
  "ExportingAlreadyBuiltPackages": "The following packages are already built and will be exported:",
  "ExportingMaintenanceTool": "Exporting maintenance tool...",
  "ExportingPackage": "Exporting {package_name}...",
  "_ExportingPackage.comment": "An example of {package_name} is zlib.",
  "ExtendedDocumentationAtUrl": "Extended documentation available at '{url}'.",
  "_ExtendedDocumentationAtUrl.comment": "An example of {url} is https://github.com/microsoft/vcpkg.",
  "ExtractHelp": "Extracts an archive.",
  "ExtractingTool": "Extracting {tool_name}...",
  "_ExtractingTool.comment": "An example of {tool_name} is aria2.",
  "FailedPostBuildChecks": "Found {count} post-build check problem(s). To submit these ports to curated catalogs, please first correct the portfile: {path}",
  "_FailedPostBuildChecks.comment": "An example of {count} is 42. An example of {path} is /foo/bar.",
  "FailedToAcquireMutant": "failed to acquire mutant {path}",
  "_FailedToAcquireMutant.comment": "'mutant' is the Windows kernel object returned by CreateMutexW An example of {path} is /foo/bar.",
  "FailedToCheckoutRepo": "failed to check out `versions` from repo {package_name}",
  "_FailedToCheckoutRepo.comment": "An example of {package_name} is zlib.",
  "FailedToDeleteDueToFile": "failed to remove_all({value}) due to {path}: ",
  "_FailedToDeleteDueToFile.comment": "{value} is the parent path of {path} we tried to delete; the underlying Windows error message is printed after this An example of {path} is /foo/bar.",
  "FailedToDeleteInsideDueToFile": "failed to remove_all_inside({value}) due to {path}: ",
  "_FailedToDeleteInsideDueToFile.comment": "{value} is the parent path of {path} we tried to delete; the underlying Windows error message is printed after this An example of {path} is /foo/bar.",
  "FailedToDetermineCurrentCommit": "Failed to determine the current commit:",
  "FailedToDownloadFromMirrorSet": "Failed to download from mirror set",
  "FailedToExtract": "Failed to extract \"{path}\":",
  "_FailedToExtract.comment": "An example of {path} is /foo/bar.",
  "FailedToFetchRepo": "Failed to fetch {url}.",
  "_FailedToFetchRepo.comment": "An example of {url} is https://github.com/microsoft/vcpkg.",
  "FailedToFindPortFeature": "{package_name} has no feature named {feature}.",
  "_FailedToFindPortFeature.comment": "An example of {feature} is avisynthplus. An example of {package_name} is zlib.",
  "FailedToFormatMissingFile": "No files to format.\nPlease pass either --all, or the explicit files to format or convert.",
  "FailedToLoadInstalledManifest": "The control or manifest file for {package_name} could not be loaded due to the following error. Please remove {package_name} and try again.",
  "_FailedToLoadInstalledManifest.comment": "An example of {package_name} is zlib.",
  "FailedToLoadManifest": "Failed to load manifest from directory {path}",
  "_FailedToLoadManifest.comment": "An example of {path} is /foo/bar.",
  "FailedToLocateSpec": "Failed to locate spec in graph: {spec}",
  "_FailedToLocateSpec.comment": "An example of {spec} is zlib:x64-windows.",
  "FailedToObtainDependencyVersion": "Cannot find desired dependency version.",
  "FailedToObtainLocalPortGitSha": "Failed to obtain git SHAs for local ports.",
  "FailedToObtainPackageVersion": "Cannot find desired package version.",
  "FailedToOpenAlgorithm": "failed to open {value}",
  "_FailedToOpenAlgorithm.comment": "{value} is a crypto algorithm like SHA-1 or SHA-512",
  "FailedToParseBaseline": "Failed to parse baseline: {path}",
  "_FailedToParseBaseline.comment": "An example of {path} is /foo/bar.",
  "FailedToParseCMakeConsoleOut": "Failed to parse CMake console output to locate block start/end markers.",
  "FailedToParseConfig": "Failed to parse configuration: {path}",
  "_FailedToParseConfig.comment": "An example of {path} is /foo/bar.",
  "FailedToParseControl": "Failed to parse CONTROL file: {path}",
  "_FailedToParseControl.comment": "An example of {path} is /foo/bar.",
  "FailedToParseManifest": "Failed to parse manifest file: {path}",
  "_FailedToParseManifest.comment": "An example of {path} is /foo/bar.",
  "FailedToParseNoTopLevelObj": "Failed to parse {path}, expected a top-level object.",
  "_FailedToParseNoTopLevelObj.comment": "An example of {path} is /foo/bar.",
  "FailedToParseNoVersionsArray": "Failed to parse {path}, expected a 'versions' array.",
  "_FailedToParseNoVersionsArray.comment": "An example of {path} is /foo/bar.",
  "FailedToParseSerializedBinParagraph": "[sanity check] Failed to parse a serialized binary paragraph.\nPlease open an issue at https://github.com/microsoft/vcpkg, with the following output:\n{error_msg}\nSerialized Binary Paragraph:",
  "_FailedToParseSerializedBinParagraph.comment": "'{error_msg}' is the error message for failing to parse the Binary Paragraph. An example of {error_msg} is File Not Found.",
  "FailedToParseVersionXML": "Could not parse version for tool {tool_name}. Version string was: {version}",
  "_FailedToParseVersionXML.comment": "An example of {tool_name} is aria2. An example of {version} is 1.3.8.",
  "FailedToParseVersionsFile": "failed to parse versions file {path}",
  "_FailedToParseVersionsFile.comment": "An example of {path} is /foo/bar.",
  "FailedToReadParagraph": "Failed to read paragraphs from {path}",
  "_FailedToReadParagraph.comment": "An example of {path} is /foo/bar.",
  "FailedToRemoveControl": "Failed to remove control file {path}",
  "_FailedToRemoveControl.comment": "An example of {path} is /foo/bar.",
  "FailedToRunToolToDetermineVersion": "Failed to run \"{path}\" to determine the {tool_name} version.",
  "_FailedToRunToolToDetermineVersion.comment": "Additional information, such as the command line output, if any, will be appended on the line after this message An example of {tool_name} is aria2. An example of {path} is /foo/bar.",
  "FailedToStoreBackToMirror": "failed to store back to mirror:",
  "FailedToStoreBinaryCache": "Failed to store binary cache {path}",
  "_FailedToStoreBinaryCache.comment": "An example of {path} is /foo/bar.",
  "FailedToTakeFileSystemLock": "Failed to take the filesystem lock",
  "FailedToWriteManifest": "Failed to write manifest file {path}",
  "_FailedToWriteManifest.comment": "An example of {path} is /foo/bar.",
  "FailedVendorAuthentication": "One or more {vendor} credential providers failed to authenticate. See '{url}' for more details on how to provide credentials.",
  "_FailedVendorAuthentication.comment": "An example of {vendor} is Azure. An example of {url} is https://github.com/microsoft/vcpkg.",
  "FetchingBaselineInfo": "Fetching baseline information from {package_name}...",
  "_FetchingBaselineInfo.comment": "An example of {package_name} is zlib.",
  "FetchingRegistryInfo": "Fetching registry information from {url} ({value})...",
  "_FetchingRegistryInfo.comment": "{value} is a reference An example of {url} is https://github.com/microsoft/vcpkg.",
  "FieldKindDidNotHaveExpectedValue": "\"kind\" did not have an expected value: (expected one of: {expected}; found {actual})",
  "_FieldKindDidNotHaveExpectedValue.comment": "{expected} is a list of literal kinds the user must type, separated by commas, {actual} is what the user supplied",
  "FileIsNotExecutable": "this file does not appear to be executable",
  "FileNotFound": "{path}: file not found",
  "_FileNotFound.comment": "An example of {path} is /foo/bar.",
  "FileReadFailed": "Failed to read {count} bytes from {path} at offset {byte_offset}.",
  "_FileReadFailed.comment": "An example of {path} is /foo/bar. An example of {byte_offset} is 42. An example of {count} is 42.",
  "FileSeekFailed": "Failed to seek to position {byte_offset} in {path}.",
  "_FileSeekFailed.comment": "An example of {path} is /foo/bar. An example of {byte_offset} is 42.",
  "FilesContainAbsolutePath1": "There should be no absolute paths, such as the following, in an installed package:",
  "_FilesContainAbsolutePath1.comment": "This message is printed before a list of found absolute paths, followed by FilesContainAbsolutePath2, followed by a list of found files.",
  "FilesContainAbsolutePath2": "Absolute paths were found in the following files:",
  "FilesExported": "Files exported at: {path}",
  "_FilesExported.comment": "An example of {path} is /foo/bar.",
  "FindVersionArtifactsOnly": "--version can't be used with vcpkg search or vcpkg find port",
  "_FindVersionArtifactsOnly.comment": "'--version', 'vcpkg search', and 'vcpkg find port' are command lines that must not be localized",
  "FishCompletion": "vcpkg fish completion is already added at \"{path}\".",
  "_FishCompletion.comment": "An example of {path} is /foo/bar.",
  "FloatingPointConstTooBig": "Floating point constant too big: {count}",
  "_FloatingPointConstTooBig.comment": "An example of {count} is 42.",
  "FollowingPackagesMissingControl": "The following packages do not have a valid CONTROL or vcpkg.json:",
  "FollowingPackagesNotInstalled": "The following packages are not installed:",
  "FollowingPackagesUpgraded": "The following packages are up-to-date:",
  "ForMoreHelp": "For More Help",
  "_ForMoreHelp.comment": "Printed before a suggestion for the user to run `vcpkg help <topic>`",
  "ForceSystemBinariesOnWeirdPlatforms": "Environment variable VCPKG_FORCE_SYSTEM_BINARIES must be set on arm, s390x, ppc64le and riscv platforms.",
  "FormattedParseMessageExpressionPrefix": "on expression:",
  "GHAParametersMissing": "The GHA binary source requires the ACTIONS_RUNTIME_TOKEN and ACTIONS_CACHE_URL environment variables to be set. See {url} for details.",
  "_GHAParametersMissing.comment": "An example of {url} is https://github.com/microsoft/vcpkg.",
  "GeneratedConfiguration": "Generated configuration {path}.",
  "_GeneratedConfiguration.comment": "An example of {path} is /foo/bar.",
  "GeneratedInstaller": "{path} installer generated.",
  "_GeneratedInstaller.comment": "An example of {path} is /foo/bar.",
  "GeneratingConfiguration": "Generating configuration {path}...",
  "_GeneratingConfiguration.comment": "An example of {path} is /foo/bar.",
  "GeneratingInstaller": "Generating installer {path}...",
  "_GeneratingInstaller.comment": "An example of {path} is /foo/bar.",
  "GeneratingRepo": "Generating repository {path}...",
  "_GeneratingRepo.comment": "An example of {path} is /foo/bar.",
  "GetParseFailureInfo": "Use '--debug' to get more information about the parse failures.",
  "GitCommandFailed": "failed to execute: {command_line}",
  "_GitCommandFailed.comment": "An example of {command_line} is vcpkg install zlib.",
  "GitFailedToFetch": "failed to fetch ref {value} from repository {url}",
  "_GitFailedToFetch.comment": "{value} is a git ref like 'origin/main' An example of {url} is https://github.com/microsoft/vcpkg.",
  "GitFailedToInitializeLocalRepository": "failed to initialize local repository {path}",
  "_GitFailedToInitializeLocalRepository.comment": "An example of {path} is /foo/bar.",
  "GitRegistryMustHaveBaseline": "The git registry \"{url}\" must have a \"baseline\" field that is a valid git commit SHA (40 hexadecimal characters).\nTo use the current latest versions, set baseline to that repo's HEAD, \"{commit_sha}\".",
  "_GitRegistryMustHaveBaseline.comment": "An example of {url} is https://github.com/microsoft/vcpkg. An example of {commit_sha} is 7cfad47ae9f68b183983090afd6337cd60fd4949.",
  "GitStatusOutputExpectedFileName": "expected a file name",
  "GitStatusOutputExpectedNewLine": "expected new line",
  "GitStatusOutputExpectedRenameOrNewline": "expected renamed file or new lines",
  "GitStatusUnknownFileStatus": "unknown file status: {value}",
  "_GitStatusUnknownFileStatus.comment": "{value} is a single character indicating file status, for example: A, U, M, D",
  "GitUnexpectedCommandOutputCmd": "git produced unexpected output when running {command_line}",
  "_GitUnexpectedCommandOutputCmd.comment": "An example of {command_line} is vcpkg install zlib.",
  "GraphCycleDetected": "Cycle detected within graph at {package_name}:",
  "_GraphCycleDetected.comment": "A list of package names comprising the cycle will be printed after this message. An example of {package_name} is zlib.",
  "HashFileFailureToRead": "failed to read file \"{path}\" for hashing: ",
  "_HashFileFailureToRead.comment": "Printed after ErrorMessage and before the specific failing filesystem operation (like file not found) An example of {path} is /foo/bar.",
  "HashPortManyFiles": "The {package_name} contains {count} files. Hashing these contents may take a long time when determining the ABI hash for binary caching. Consider reducing the number of files. Common causes of this are accidentally checking out source or build files into a port's directory.",
  "_HashPortManyFiles.comment": "An example of {package_name} is zlib. An example of {count} is 42.",
  "HeaderOnlyUsage": "{package_name} is header-only and can be used from CMake via:",
  "_HeaderOnlyUsage.comment": "'header' refers to C/C++ .h files An example of {package_name} is zlib.",
  "HelpAssetCaching": "**Experimental feature: this may change or be removed at any time**\n\nvcpkg can use mirrors to cache downloaded assets, ensuring continued operation even if the original source changes or disappears.\n\nAsset caching can be configured either by setting the environment variable X_VCPKG_ASSET_SOURCES to a semicolon-delimited list of sources or by passing a sequence of --x-asset-sources=<source> command line options. Command line sources are interpreted after environment sources. Commas, semicolons, and backticks can be escaped using backtick (`).\n\nThe <rw> optional parameter for certain strings controls how they will be accessed. It can be specified as \"read\", \"write\", or \"readwrite\" and defaults to \"read\".\n\nValid sources:",
  "_HelpAssetCaching.comment": "The '<rw>' part references code in the following table and should not be localized. The matching values \"read\" \"write\" and \"readwrite\" are also fixed. After this block a table with each possible asset caching source is printed.",
  "HelpAssetCachingAzUrl": "Adds an Azure Blob Storage source, optionally using Shared Access Signature validation. URL should include the container path and be terminated with a trailing \"/\". <sas>, if defined, should be prefixed with a \"?\". Non-Azure servers will also work if they respond to GET and PUT requests of the form: \"<url><sha512><sas>\".",
  "_HelpAssetCachingAzUrl.comment": "This is printed as the 'definition' in a table for 'x-azurl,<url>[,<sas>[,<rw>]]', so <url>, <sas>, and <rw> should not be localized.",
  "HelpAssetCachingBlockOrigin": "Disables fallback to the original URLs in case the mirror does not have the file available.",
  "_HelpAssetCachingBlockOrigin.comment": "This is printed as the 'definition' in a table for 'x-block-origin'",
  "HelpAssetCachingScript": "Dispatches to an external tool to fetch the asset. Within the template, \"{{url}}\" will be replaced by the original url, \"{{sha512}}\" will be replaced by the SHA512 value, and \"{{dst}}\" will be replaced by the output path to save to. These substitutions will all be properly shell escaped, so an example template would be: \"curl -L {{url}} --output {{dst}}\". \"{{{{\" will be replaced by \"}}\" and \"}}}}\" will be replaced by \"}}\" to avoid expansion. Note that this will be executed inside the build environment, so the PATH and other environment variables will be modified by the triplet.",
  "_HelpAssetCachingScript.comment": "This is printed as the 'definition' in a table for 'x-script,<template>', so <template> should not be localized.",
  "HelpBinaryCaching": "vcpkg can cache compiled packages to accelerate restoration on a single machine or across the network. By default, vcpkg will save builds to a local machine cache. This can be disabled by passing \"--binarysource=clear\" as the last option on the command line.\n\nBinary caching can be further configured by either passing \"--binarysource=<source>\" options to every command line or setting the `VCPKG_BINARY_SOURCES` environment variable to a set of sources (Example: \"<source>;<source>;...\"). Command line sources are interpreted after environment sources.\n\nThe \"<rw>\" optional parameter for certain strings controls whether they will be consulted for downloading binaries and whether on-demand builds will be uploaded to that remote. It can be specified as \"read\", \"write\", or \"readwrite\".\n\nGeneral sources:",
  "_HelpBinaryCaching.comment": "The names in angle brackets like <rw> or in curly braces like {{sha512}} are 'code' and should not be localized. The matching values \"read\" \"write\" and \"readwrite\" are also fixed.",
  "HelpBinaryCachingAws": "**Experimental: will change or be removed without warning**\nAdds an AWS S3 source. Uses the aws CLI for uploads and downloads. Prefix should include s3:// scheme and be suffixed with a \"/\".",
  "_HelpBinaryCachingAws.comment": "Printed as the 'definition' for 'x-aws,<prefix>[,<rw>]', so '<prefix>' must be preserved verbatim.",
  "HelpBinaryCachingAwsConfig": "**Experimental: will change or be removed without warning**\nAdds an AWS S3 source. Adds an AWS configuration; currently supports only 'no-sign-request' parameter that is an equivalent to the --no-sign-request parameter of the AWS CLI.",
  "_HelpBinaryCachingAwsConfig.comment": "Printed as the 'definition' for 'x-aws-config,<parameter>'.",
  "HelpBinaryCachingAwsHeader": "Azure Web Services sources",
  "HelpBinaryCachingAzBlob": "**Experimental: will change or be removed without warning**\nAdds an Azure Blob Storage source. Uses Shared Access Signature validation. <url> should include the container path. <sas> must be be prefixed with a \"?\".",
  "_HelpBinaryCachingAzBlob.comment": "Printed as the 'definition' for 'x-azblob,<url>,<sas>[,<rw>]'.",
  "HelpBinaryCachingCos": "**Experimental: will change or be removed without warning**\nAdds an COS source. Uses the cos CLI for uploads and downloads. <prefix> should include the scheme 'cos://' and be suffixed with a \"/\".",
  "_HelpBinaryCachingCos.comment": "Printed as the 'definition' for 'x-cos,<prefix>[,<rw>]'.",
  "HelpBinaryCachingDefaults": "Adds the default file-based location. Based on your system settings, the default path to store binaries is \"{path}\". This consults %LOCALAPPDATA%/%APPDATA% on Windows and $XDG_CACHE_HOME or $HOME on other platforms.",
  "_HelpBinaryCachingDefaults.comment": "Printed as the 'definition' in a table for 'default[,<rw>]'. %LOCALAPPDATA%, %APPDATA%, $XDG_CACHE_HOME, and $HOME are 'code' and should not be localized. An example of {path} is /foo/bar.",
  "HelpBinaryCachingDefaultsError": "Adds the default file-based location.",
  "_HelpBinaryCachingDefaultsError.comment": "Printed as the 'definition' in a table for 'default[,<rw>]', when there was an error fetching the default for some reason.",
  "HelpBinaryCachingFiles": "Adds a custom file-based location.",
  "_HelpBinaryCachingFiles.comment": "Printed as the 'definition' for 'files,<path>[,<rw>]'",
  "HelpBinaryCachingGcs": "**Experimental: will change or be removed without warning**\nAdds a Google Cloud Storage (GCS) source. Uses the gsutil CLI for uploads and downloads. Prefix should include the gs:// scheme and be suffixed with a \"/\".",
  "_HelpBinaryCachingGcs.comment": "Printed as the 'definition' for 'x-gcs,<prefix>[,<rw>]'.",
  "HelpBinaryCachingHttp": "Adds a custom http-based location. GET, HEAD and PUT request are done to download, check and upload the binaries. You can use the variables {{name}}, {{version}}, {{sha}} and {{triplet}}. An example url would be'https://cache.example.com/{{triplet}}/{{name}}/{{version}}/{{sha}}'. Via the header field you can set a custom header to pass an authorization token.",
  "_HelpBinaryCachingHttp.comment": "Printed as the 'definition' of 'http,<url_template>[,<rw>[,<header>]]', so <url_template>, <rw> and <header> must be unlocalized. GET, HEAD, and PUT are HTTP verbs that should be not changed. Entries in {{curly braces}} also must be unlocalized.",
  "HelpBinaryCachingNuGet": "Adds a NuGet-based source; equivalent to the \"-Source\" parameter of the NuGet CLI.",
  "_HelpBinaryCachingNuGet.comment": "Printed as the 'definition' of 'nuget,<uri>[,<rw>]'.",
  "HelpBinaryCachingNuGetConfig": "Adds a NuGet-config-file-based source; equivalent to the \"-Config\" parameter of the NuGet CLI. This config should specify \"defaultPushSource\" for uploads.",
  "_HelpBinaryCachingNuGetConfig.comment": "Printed as the 'definition' of 'nugetconfig,<path>[,<rw>]'.",
  "HelpBinaryCachingNuGetFooter": "NuGet's cache is not used by default. To use it for every NuGet-based source, set the environment variable \"VCPKG_USE_NUGET_CACHE\" to \"true\" (case-insensitive) or \"1\".\nThe \"nuget\" and \"nugetconfig\" source providers respect certain environment variables while generating NuGet packages. If the appropriate environment variables are defined and non-empty, \"metadata.repository\" field will be generated like one of the following examples:",
  "_HelpBinaryCachingNuGetFooter.comment": "Printed after the 'nuget', 'nugetconfig', 'nugettimeout', and 'interactive' entries; those names must not be localized. Printed before an example XML snippet vcpkg generates when the indicated environment variables are set.",
  "HelpBinaryCachingNuGetHeader": "NuGet sources",
  "HelpBinaryCachingNuGetInteractive": "Enables NuGet interactive credential management; the opposite of the \"-NonInteractive\" parameter in the NuGet CLI.",
  "_HelpBinaryCachingNuGetInteractive.comment": "Printed as the 'definition' of 'interactive'.",
  "HelpBinaryCachingNuGetTimeout": "Specifies a NuGet timeout for NuGet network operations; equivalent to the \"-Timeout\" parameter of the NuGet CLI.",
  "_HelpBinaryCachingNuGetTimeout.comment": "Printed as the 'definition' of 'nugettimeout,<seconds>'",
  "HelpBuiltinBase": "The baseline references a commit within the vcpkg repository that establishes a minimum version on every dependency in the graph. For example, if no other constraints are specified (directly or transitively), then the version will resolve to the baseline of the top level manifest. Baselines of transitive dependencies are ignored.",
  "HelpCachingClear": "Removes all previous sources, including defaults.",
  "HelpContactCommand": "Displays contact information to send feedback",
  "HelpCreateCommand": "Creates a new port",
  "HelpDependInfoCommand": "Displays a list of dependencies for ports",
  "HelpEditCommand": "Edits a port, optionally with {env_var}, defaults to \"code\"",
  "_HelpEditCommand.comment": "\"code\" is the name of a program and should not be localized. An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "HelpEnvCommand": "Creates a clean shell environment for development or compiling",
  "HelpExampleCommand": "For more help (including examples) see https://learn.microsoft.com/vcpkg",
  "HelpExampleManifest": "Example manifest:",
  "HelpInstallCommand": "Installs a package",
  "HelpManifestConstraints": "Manifests can place three kinds of constraints upon the versions used",
  "HelpMinVersion": "Vcpkg will select the minimum version found that matches all applicable constraints, including the version from the baseline specified at top-level as well as any \"version>=\" constraints in the graph.",
  "HelpOverrides": "When used as the top-level manifest (such as when running `vcpkg install` in the directory), overrides allow a manifest to short-circuit dependency resolution and specify exactly the version to use. These can be used to handle version conflicts, such as with `version-string` dependencies. They will not be considered when transitively depended upon.",
  "HelpOwnsCommand": "Searches for the owner of a file in installed packages",
  "HelpPackagePublisher": "Additionally, package publishers can use \"version>=\" constraints to ensure that consumers are using at least a certain minimum version of a given dependency. For example, if a library needs an API added to boost-asio in 1.70, a \"version>=\" constraint will ensure transitive users use a sufficient version even in the face of individual version overrides or cross-registry references.",
  "HelpPortVersionScheme": "Each version additionally has a \"port-version\" which is a nonnegative integer. When rendered as text, the port version (if nonzero) is added as a suffix to the primary version text separated by a hash (#). Port-versions are sorted lexicographically after the primary version text, for example:\n1.0.0 < 1.0.0#1 < 1.0.1 < 1.0.1#5 < 2.0.0",
  "HelpRemoveCommand": "Uninstalls a package",
  "HelpResponseFileCommand": "Contains one argument per line expanded at that location",
  "_HelpResponseFileCommand.comment": "Describing what @response_file does on vcpkg's command line",
  "HelpSearchCommand": "Searches for packages available to be built",
  "HelpTextOptFullDesc": "Does not truncate long text",
  "HelpTopicCommand": "Displays specific help topic",
  "HelpTopicsCommand": "Displays full list of help topics",
  "HelpTxtOptAllowUnsupportedPort": "Continues with a warning on unsupported ports, rather than failing",
  "HelpTxtOptCleanAfterBuild": "Cleans buildtrees, packages and downloads after building each package",
  "HelpTxtOptCleanBuildTreesAfterBuild": "Cleans buildtrees after building each package",
  "HelpTxtOptCleanDownloadsAfterBuild": "Cleans downloads after building each package",
  "HelpTxtOptCleanPkgAfterBuild": "Cleans packages after building each package",
  "HelpTxtOptDryRun": "Does not actually build or install",
  "HelpTxtOptEditable": "Disables source re-extraction and binary caching for libraries on the command line (classic mode)",
  "HelpTxtOptEnforcePortChecks": "Fails install if a port has detected problems or attempts to use a deprecated feature",
  "HelpTxtOptKeepGoing": "Continues installing packages on failure",
  "HelpTxtOptManifestFeature": "Additional features from the top-level manifest to install (manifest mode)",
  "HelpTxtOptManifestNoDefault": "Does not install the default features from the top-level manifest (manifest mode)",
  "HelpTxtOptNoDownloads": "Does not download new sources",
  "HelpTxtOptNoUsage": "Does not print CMake usage information after install",
  "HelpTxtOptOnlyBinCache": "Fails if cached binaries are not available",
  "HelpTxtOptOnlyDownloads": "Makes best-effort attempt to download sources without building",
  "HelpTxtOptRecurse": "Allows removal of packages as part of installation",
  "HelpTxtOptUseAria2": "Uses aria2 to perform download tasks",
  "HelpTxtOptUseHeadVersion": "Installs the libraries on the command line using the latest upstream sources (classic mode)",
  "HelpTxtOptWritePkgConfig": "Writes a NuGet packages.config-formatted file for use with external binary caching. See `vcpkg help binarycaching` for more information",
  "_HelpTxtOptWritePkgConfig.comment": "'vcpkg help binarycaching' is a command line and should not be localized.",
  "HelpUpdateBaseline": "The best approach to keep your libraries up to date is to update your baseline reference. This will ensure all packages, including transitive ones, are updated. However if you need to update a package independently, you can use a \"version>=\" constraint.",
  "HelpUpdateCommand": "Lists packages that can be upgraded",
  "HelpUpgradeCommand": "Rebuilds all outdated packages",
  "HelpVersionCommand": "Displays version information",
  "HelpVersionDateScheme": "A date (2021-01-01.5)",
  "HelpVersionGreater": "Within the \"dependencies\" field, each dependency can have a minimum constraint listed. These minimum constraints will be used when transitively depending upon this library. A minimum port-version can additionally be specified with a '#' suffix.",
  "HelpVersionScheme": "A dot-separated sequence of numbers (1.2.3.4)",
  "HelpVersionSchemes": "The following versioning schemes are accepted.",
  "HelpVersionSemverScheme": "A Semantic Version 2.0 (2.1.0-rc2)",
  "HelpVersionStringScheme": "An exact, incomparable version (Vista)",
  "HelpVersioning": "Versioning allows you to deterministically control the precise revisions of dependencies used by your project from within your manifest file.",
  "IgnoringVcpkgRootEnvironment": "The vcpkg {value} is using detected vcpkg root {actual} and ignoring mismatched VCPKG_ROOT environment value {path}. To suppress this message, unset the environment variable or use the --vcpkg-root command line switch.",
  "_IgnoringVcpkgRootEnvironment.comment": "{actual} is the path we actually used, {value} is the path to vcpkg's binary An example of {path} is /foo/bar.",
  "IllegalFeatures": "List of features is not allowed in this context",
  "IllegalPlatformSpec": "Platform qualifier is not allowed in this context",
  "ImproperShaLength": "SHA512's must be 128 hex characters: {value}",
  "_ImproperShaLength.comment": "{value} is a sha.",
  "IncorrectArchiveFileSignature": "Incorrect archive file signature",
  "InfoSetEnvVar": "You can also set {env_var} to your editor of choice.",
  "_InfoSetEnvVar.comment": "In this context 'editor' means IDE An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "InitRegistryFailedNoRepo": "Could not create a registry at {path} because this is not a git repository root.\nUse `git init {command_line}` to create a git repository in this folder.",
  "_InitRegistryFailedNoRepo.comment": "An example of {path} is /foo/bar. An example of {command_line} is vcpkg install zlib.",
  "InstallCopiedFile": "{path_source} -> {path_destination} done",
  "_InstallCopiedFile.comment": "An example of {path_source} is /foo/bar. An example of {path_destination} is /foo/bar.",
  "InstallFailed": "failed: {path}: {error_msg}",
  "_InstallFailed.comment": "An example of {path} is /foo/bar. An example of {error_msg} is File Not Found.",
  "InstallPackageInstruction": "With a project open, go to Tools->NuGet Package Manager->Package Manager Console and paste:\n Install-Package \"{value}\" -Source \"{path}\"",
  "_InstallPackageInstruction.comment": "'{value}' is the nuget id. An example of {path} is /foo/bar.",
  "InstallRootDir": "Installed directory (experimental)",
  "InstallSkippedUpToDateFile": "{path_source} -> {path_destination} skipped, up to date",
  "_InstallSkippedUpToDateFile.comment": "An example of {path_source} is /foo/bar. An example of {path_destination} is /foo/bar.",
  "InstallWithSystemManager": "You may be able to install this tool via your system package manager.",
  "InstallWithSystemManagerMono": "Ubuntu 18.04 users may need a newer version of mono, available at {url}.",
  "_InstallWithSystemManagerMono.comment": "An example of {url} is https://github.com/microsoft/vcpkg.",
  "InstallWithSystemManagerPkg": "You may be able to install this tool via your system package manager ({command_line}).",
  "_InstallWithSystemManagerPkg.comment": "An example of {command_line} is vcpkg install zlib.",
  "InstalledBy": "Installed by {path}",
  "_InstalledBy.comment": "An example of {path} is /foo/bar.",
  "InstalledPackages": "The following packages are already installed:",
  "InstalledRequestedPackages": "All requested packages are currently installed.",
  "InstallingMavenFile": "{path} installing Maven file",
  "_InstallingMavenFile.comment": "Printed after a filesystem operation error An example of {path} is /foo/bar.",
  "InstallingOverlayPort": "installing overlay port from here",
  "InstallingPackage": "Installing {action_index}/{count} {spec}...",
  "_InstallingPackage.comment": "An example of {action_index} is 340. An example of {count} is 42. An example of {spec} is zlib:x64-windows.",
  "IntegrateBashHelp": "Enable bash tab-completion. Non-Windows only",
  "_IntegrateBashHelp.comment": "'bash' is a terminal program which should be unlocalized.",
  "IntegrateFishHelp": "Enable fish tab-completion. Non-Windows only",
  "_IntegrateFishHelp.comment": "'fish' is a terminal program which should be unlocalized.",
  "IntegrateInstallHelpLinux": "Makes installed packages available user-wide",
  "IntegrateInstallHelpWindows": "Makes installed packages available user-wide. Requires admin privileges on first use",
  "IntegrateNonWindowsOnly": "{command_line} is non-Windows-only and not supported on this system.",
  "_IntegrateNonWindowsOnly.comment": "An example of {command_line} is vcpkg install zlib.",
  "IntegratePowerShellHelp": "Enable PowerShell tab-completion. Windows-only",
  "IntegrateProjectHelp": "Generates a referencing NuGet package for individual Visual Studio project use. Windows-only",
  "IntegrateRemoveHelp": "Removes user-wide integration",
  "IntegrateWindowsOnly": "{command_line} is Windows-only and not supported on this system.",
  "_IntegrateWindowsOnly.comment": "An example of {command_line} is vcpkg install zlib.",
  "IntegrateZshHelp": "Enable zsh tab-completion. Non-Windows only",
  "_IntegrateZshHelp.comment": "'zsh' is a terminal program which should be unlocalized.",
  "IntegrationFailedVS2015": "Integration was not applied for Visual Studio 2015.",
  "InternalCICommand": "vcpkg ci is an internal command which will change incompatibly or be removed at any time.",
  "InternalErrorMessageContact": "Please open an issue at https://github.com/microsoft/vcpkg/issues/new?template=other-type-of-bug-report.md&labels=category:vcpkg-bug with detailed steps to reproduce the problem.",
  "InvalidArchitecture": "invalid architecture: {value}",
  "_InvalidArchitecture.comment": "{value} is what the user entered that we did not understand",
  "InvalidArgument": "invalid argument",
  "InvalidArgumentRequiresAbsolutePath": "invalid argument: binary config '{binary_source}' path arguments for binary config strings must be absolute",
  "_InvalidArgumentRequiresAbsolutePath.comment": "An example of {binary_source} is azblob.",
  "InvalidArgumentRequiresBaseUrl": "invalid argument: binary config '{binary_source}' requires a {base_url} base url as the first argument",
  "_InvalidArgumentRequiresBaseUrl.comment": "An example of {base_url} is azblob://. An example of {binary_source} is azblob.",
  "InvalidArgumentRequiresBaseUrlAndToken": "invalid argument: binary config '{binary_source}' requires at least a base-url and a SAS token",
  "_InvalidArgumentRequiresBaseUrlAndToken.comment": "An example of {binary_source} is azblob.",
  "InvalidArgumentRequiresNoWildcards": "cannot fix Windows path case for path containing wildcards: {path}",
  "_InvalidArgumentRequiresNoWildcards.comment": "An example of {path} is /foo/bar.",
  "InvalidArgumentRequiresNoneArguments": "invalid argument: binary config '{binary_source}' does not take arguments",
  "_InvalidArgumentRequiresNoneArguments.comment": "An example of {binary_source} is azblob.",
  "InvalidArgumentRequiresOneOrTwoArguments": "invalid argument: binary config '{binary_source}' requires 1 or 2 arguments",
  "_InvalidArgumentRequiresOneOrTwoArguments.comment": "An example of {binary_source} is azblob.",
  "InvalidArgumentRequiresPathArgument": "invalid argument: binary config '{binary_source}' requires at least one path argument",
  "_InvalidArgumentRequiresPathArgument.comment": "An example of {binary_source} is azblob.",
  "InvalidArgumentRequiresPrefix": "invalid argument: binary config '{binary_source}' requires at least one prefix",
  "_InvalidArgumentRequiresPrefix.comment": "An example of {binary_source} is azblob.",
  "InvalidArgumentRequiresSingleArgument": "invalid argument: binary config '{binary_source}' does not take more than 1 argument",
  "_InvalidArgumentRequiresSingleArgument.comment": "An example of {binary_source} is azblob.",
  "InvalidArgumentRequiresSingleStringArgument": "invalid argument: binary config '{binary_source}' expects a single string argument",
  "_InvalidArgumentRequiresSingleStringArgument.comment": "An example of {binary_source} is azblob.",
  "InvalidArgumentRequiresSourceArgument": "invalid argument: binary config '{binary_source}' requires at least one source argument",
  "_InvalidArgumentRequiresSourceArgument.comment": "An example of {binary_source} is azblob.",
  "InvalidArgumentRequiresTwoOrThreeArguments": "invalid argument: binary config '{binary_source}' requires 2 or 3 arguments",
  "_InvalidArgumentRequiresTwoOrThreeArguments.comment": "An example of {binary_source} is azblob.",
  "InvalidArgumentRequiresValidToken": "invalid argument: binary config '{binary_source}' requires a SAS token without a preceeding '?' as the second argument",
  "_InvalidArgumentRequiresValidToken.comment": "An example of {binary_source} is azblob.",
  "InvalidArgumentRequiresZeroOrOneArgument": "invalid argument: binary config '{binary_source}' requires 0 or 1 argument",
  "_InvalidArgumentRequiresZeroOrOneArgument.comment": "An example of {binary_source} is azblob.",
  "InvalidBuildInfo": "Invalid BUILD_INFO file for package: {error_msg}",
  "_InvalidBuildInfo.comment": "An example of {error_msg} is File Not Found.",
  "InvalidBuiltInBaseline": "the top-level builtin-baseline ({value}) was not a valid commit sha: expected 40 hexadecimal characters.",
  "_InvalidBuiltInBaseline.comment": "{value} is a git commit sha",
  "InvalidBundleDefinition": "Invalid bundle definition.",
  "InvalidCharacterInFeatureList": "invalid character in feature name (must be lowercase, digits, '-', or '*')",
  "InvalidCharacterInFeatureName": "invalid character in feature name (must be lowercase, digits, '-')",
  "InvalidCharacterInPortName": "invalid character in port name (must be lowercase, digits, '-')",
  "InvalidCodePoint": "Invalid code point passed to utf8_encoded_code_point_count",
  "InvalidCodeUnit": "invalid code unit",
  "InvalidCommandArgSort": "Value of --sort must be one of 'lexicographical', 'topological', 'reverse'.",
  "InvalidCommentStyle": "vcpkg does not support c-style comments, however most objects allow $-prefixed fields to be used as comments.",
  "InvalidCommitId": "Invalid commit id: {commit_sha}",
  "_InvalidCommitId.comment": "An example of {commit_sha} is 7cfad47ae9f68b183983090afd6337cd60fd4949.",
  "InvalidDefaultFeatureName": "'default' is a reserved feature name",
  "InvalidFeature": "features must be lowercase alphanumeric+hyphens, and not one of the reserved names",
  "InvalidFileType": "failed: {path} cannot handle file type",
  "_InvalidFileType.comment": "An example of {path} is /foo/bar.",
  "InvalidFilename": "Filename cannot contain invalid chars {value}, but was {path}",
  "_InvalidFilename.comment": "'{value}' is a list of invalid characters. I.e. \\/:*?<>| An example of {path} is /foo/bar.",
  "InvalidFloatingPointConst": "Invalid floating point constant: {count}",
  "_InvalidFloatingPointConst.comment": "An example of {count} is 42.",
  "InvalidFormatString": "invalid format string: {actual}",
  "_InvalidFormatString.comment": "{actual} is the provided format string",
  "InvalidHexDigit": "Invalid hex digit in unicode escape",
  "InvalidIntegerConst": "Invalid integer constant: {count}",
  "_InvalidIntegerConst.comment": "An example of {count} is 42.",
  "InvalidLibraryMissingLinkerMembers": "Library was invalid: could not find a linker member.",
  "InvalidLinkage": "Invalid {system_name} linkage type: [{value}]",
  "_InvalidLinkage.comment": "'{value}' is the linkage type vcpkg would did not understand. (Correct values would be static ofr dynamic) An example of {system_name} is Darwin.",
  "InvalidLogicExpressionUnexpectedCharacter": "invalid logic expression, unexpected character",
  "InvalidLogicExpressionUsePipe": "invalid logic expression, use '|' rather than 'or'",
  "InvalidNoVersions": "File contains no versions.",
  "InvalidOptionForRemove": "'remove' accepts either libraries or '--outdated'",
  "_InvalidOptionForRemove.comment": "'remove' is a command that should not be changed.",
  "InvalidPortVersonName": "Found invalid port version file name: `{path}`.",
  "_InvalidPortVersonName.comment": "An example of {path} is /foo/bar.",
  "InvalidSharpInVersion": "invalid character '#' in version text",
  "InvalidSharpInVersionDidYouMean": "invalid character '#' in version text. Did you mean \"port-version\": {value}?",
  "_InvalidSharpInVersionDidYouMean.comment": "{value} is an integer. `\"port-version\":' is JSON syntax and should be unlocalized",
  "InvalidString": "Invalid utf8 passed to Value::string(std::string)",
  "InvalidTriplet": "Invalid triplet: {triplet}",
  "_InvalidTriplet.comment": "An example of {triplet} is x64-windows.",
  "InvalidUri": "unable to parse uri: {value}",
  "_InvalidUri.comment": "{value} is the URI we attempted to parse.",
  "InvalidValueHashAdditionalFiles": "Variable VCPKG_HASH_ADDITIONAL_FILES contains invalid file path: '{path}'. The value must be an absolute path to an existent file.",
  "_InvalidValueHashAdditionalFiles.comment": "An example of {path} is /foo/bar.",
  "IrregularFile": "path was not a regular file: {path}",
  "_IrregularFile.comment": "An example of {path} is /foo/bar.",
  "JsonErrorMustBeAnObject": "Expected \"{path}\" to be an object.",
  "_JsonErrorMustBeAnObject.comment": "An example of {path} is /foo/bar.",
  "JsonFieldNotObject": "value of [\"{json_field}\"] must be an object",
  "_JsonFieldNotObject.comment": "An example of {json_field} is identifer.",
  "JsonFieldNotString": "value of [\"{json_field}\"] must be a string",
  "_JsonFieldNotString.comment": "An example of {json_field} is identifer.",
  "JsonFileMissingExtension": "the JSON file {path} must have a .json (all lowercase) extension",
  "_JsonFileMissingExtension.comment": "An example of {path} is /foo/bar.",
  "JsonSwitch": "Prints JSON rather than plain text",
  "JsonValueNotArray": "json value is not an array",
  "JsonValueNotObject": "json value is not an object",
  "JsonValueNotString": "json value is not a string",
  "LaunchingProgramFailed": "Launching {tool_name}:",
  "_LaunchingProgramFailed.comment": "A platform API call failure message is appended after this An example of {tool_name} is aria2.",
  "LibraryArchiveMemberTooSmall": "A library archive member was too small to contain the expected data type.",
  "LibraryFirstLinkerMemberMissing": "Could not find first linker member name.",
  "LicenseExpressionContainsExtraPlus": "SPDX license expression contains an extra '+'. These are only allowed directly after a license identifier.",
  "LicenseExpressionContainsInvalidCharacter": "SPDX license expression contains an invalid character (0x{value:02X} '{value}').",
  "_LicenseExpressionContainsInvalidCharacter.comment": "example of {value:02X} is '7B'\nexample of {value} is '{'",
  "LicenseExpressionContainsUnicode": "SPDX license expression contains a unicode character (U+{value:04X} '{pretty_value}'), but these expressions are ASCII-only.",
  "_LicenseExpressionContainsUnicode.comment": "example of {value:04X} is '22BB'\nexample of {pretty_value} is '⊻'",
  "LicenseExpressionDocumentRefUnsupported": "The current implementation does not support DocumentRef- SPDX references.",
  "LicenseExpressionExpectCompoundFoundParen": "Expected a compound or the end of the string, found a parenthesis.",
  "LicenseExpressionExpectCompoundFoundWith": "Expected either AND or OR, found WITH (WITH is only allowed after license names, not parenthesized expressions).",
  "_LicenseExpressionExpectCompoundFoundWith.comment": "AND, OR, and WITH are all keywords and should not be translated.",
  "LicenseExpressionExpectCompoundFoundWord": "Expected either AND or OR, found a license or exception name: '{value}'.",
  "_LicenseExpressionExpectCompoundFoundWord.comment": "Example of {value} is 'MIT'.\nAND and OR are both keywords and should not be translated.",
  "LicenseExpressionExpectCompoundOrWithFoundWord": "Expected either AND, OR, or WITH, found a license or exception name: '{value}'.",
  "_LicenseExpressionExpectCompoundOrWithFoundWord.comment": "example of {value} is 'MIT'.\nAND, OR, and WITH are all keywords and should not be translated.",
  "LicenseExpressionExpectExceptionFoundCompound": "Expected an exception name, found the compound {value}.",
  "_LicenseExpressionExpectExceptionFoundCompound.comment": "Example of {value} is 'AND'",
  "LicenseExpressionExpectExceptionFoundEof": "Expected an exception name, found the end of the string.",
  "LicenseExpressionExpectExceptionFoundParen": "Expected an exception name, found a parenthesis.",
  "LicenseExpressionExpectLicenseFoundCompound": "Expected a license name, found the compound {value}.",
  "_LicenseExpressionExpectLicenseFoundCompound.comment": "Example of {value} is 'AND'",
  "LicenseExpressionExpectLicenseFoundEof": "Expected a license name, found the end of the string.",
  "LicenseExpressionExpectLicenseFoundParen": "Expected a license name, found a parenthesis.",
  "LicenseExpressionImbalancedParens": "There was a close parenthesis without an opening parenthesis.",
  "LicenseExpressionString": "<license string>",
  "LicenseExpressionUnknownException": "Unknown license exception identifier '{value}'. Known values are listed at https://spdx.org/licenses/exceptions-index.html",
  "_LicenseExpressionUnknownException.comment": "Example of {value} is 'unknownexception'",
  "LicenseExpressionUnknownLicense": "Unknown license identifier '{value}'. Known values are listed at https://spdx.org/licenses/",
  "_LicenseExpressionUnknownLicense.comment": "Example of {value} is 'unknownlicense'",
  "LinkageDynamicDebug": "Dynamic Debug (/MDd)",
  "LinkageDynamicRelease": "Dynamic Release (/MD)",
  "LinkageStaticDebug": "Static Debug (/MTd)",
  "LinkageStaticRelease": "Static Release (/MT)",
  "ListHelp": "Lists installed libraries",
  "LoadedCommunityTriplet": "loaded community triplet from here. Community triplets are not built in the curated registry and are thus less likely to succeed.",
  "LoadedOverlayTriplet": "loaded overlay triplet from here",
  "LoadingDependencyInformation": "Loading dependency information for {count} packages...",
  "_LoadingDependencyInformation.comment": "An example of {count} is 42.",
  "LocalPortfileVersion": "Using local portfile versions. To update the local portfiles, use `git pull`.",
  "ManifestConflict": "Found both a manifest and CONTROL files in port \"{path}\"; please rename one or the other",
  "_ManifestConflict.comment": "An example of {path} is /foo/bar.",
  "ManifestFormatCompleted": "Succeeded in formatting the manifest files.",
  "MismatchedBinParagraphs": "The serialized binary paragraph was different from the original binary paragraph. Please open an issue at https://github.com/microsoft/vcpkg with the following output:",
  "MismatchedFiles": "file to store does not match hash",
  "MismatchedManifestAfterReserialize": "The serialized manifest was different from the original manifest. Please open an issue at https://github.com/microsoft/vcpkg, with the following output:",
  "_MismatchedManifestAfterReserialize.comment": "The original file output and generated output are printed after this line, in English as it's intended to be used in the issue submission and read by devs. This message indicates an internal error in vcpkg.",
  "MismatchedNames": "names did not match: '{package_name}' != '{actual}'",
  "_MismatchedNames.comment": "{actual} is the port name found An example of {package_name} is zlib.",
  "MismatchedSpec": "Mismatched spec in port {path}: expected {expected}, actual {actual}",
  "_MismatchedSpec.comment": "{expected} and {actual} are package specs like 'zlib:x64-windows' An example of {path} is /foo/bar.",
  "MismatchedType": "{json_field}: mismatched type: expected {json_type}",
  "_MismatchedType.comment": "An example of {json_field} is identifer. An example of {json_type} is an array of identifiers.",
  "Missing7zHeader": "Unable to find 7z header.",
  "MissingAndroidEnv": "ANDROID_NDK_HOME environment variable missing",
  "MissingAndroidHomeDir": "ANDROID_NDK_HOME directory does not exist: {path}",
  "_MissingAndroidHomeDir.comment": "An example of {path} is /foo/bar.",
  "MissingArgFormatManifest": "format-manifest was passed --convert-control without '--all'.\nThis doesn't do anything: control files passed explicitly are converted automatically.",
  "MissingClosingParen": "missing closing )",
  "MissingDependency": "Package {spec} is installed, but dependency {package_name} is not.",
  "_MissingDependency.comment": "An example of {spec} is zlib:x64-windows. An example of {package_name} is zlib.",
  "MissingExtension": "Missing '{extension}' extension.",
  "_MissingExtension.comment": "An example of {extension} is .exe.",
  "MissingOption": "This command requires --{option}",
  "_MissingOption.comment": "An example of {option} is editable.",
  "MissingOrInvalidIdentifer": "missing or invalid identifier",
  "MissingPortSuggestPullRequest": "If your port is not listed, please open an issue at and/or consider making a pull request.",
  "MissingRequiredField": "missing required field '{json_field}' ({json_type})",
  "_MissingRequiredField.comment": "Example completely formatted message:\nerror: missing required field 'dependencies' (an array of dependencies) An example of {json_field} is identifer. An example of {json_type} is an array of identifiers.",
  "MissingRequiredField2": "missing required field '{json_field}'",
  "_MissingRequiredField2.comment": "An example of {json_field} is identifer.",
  "MixingBooleanOperationsNotAllowed": "mixing & and | is not allowed; use () to specify order of operations",
  "MonoInstructions": "This may be caused by an incomplete mono installation. Full mono is available on some systems via `sudo apt install mono-complete`. Ubuntu 18.04 users may need a newer version of mono, available at https://www.mono-project.com/download/stable/",
  "MultiArch": "Multi-Arch must be 'same' but was {option}",
  "_MultiArch.comment": "An example of {option} is editable.",
  "MultipleFeatures": "{package_name} declares {feature} multiple times; please ensure that features have distinct names",
  "_MultipleFeatures.comment": "An example of {package_name} is zlib. An example of {feature} is avisynthplus.",
  "MutuallyExclusiveOption": "--{value} cannot be used with --{option}.",
  "_MutuallyExclusiveOption.comment": "{value} is a second {option} switch An example of {option} is editable.",
  "NewConfigurationAlreadyExists": "Creating a manifest would overwrite a vcpkg-configuration.json at {path}.",
  "_NewConfigurationAlreadyExists.comment": "An example of {path} is /foo/bar.",
  "NewManifestAlreadyExists": "A manifest is already present at {path}.",
  "_NewManifestAlreadyExists.comment": "An example of {path} is /foo/bar.",
  "NewNameCannotBeEmpty": "--name cannot be empty.",
  "NewOnlyOneVersionKind": "Only one of --version-relaxed, --version-date, or --version-string may be specified.",
  "NewSpecifyNameVersionOrApplication": "Either specify --name and --version to produce a manifest intended for C++ libraries, or specify --application to indicate that the manifest is not intended to be used as a port.",
  "NewVersionCannotBeEmpty": "--version cannot be empty.",
  "NoError": "no error",
  "NoInstalledPackages": "No packages are installed. Did you mean `search`?",
  "_NoInstalledPackages.comment": "The name 'search' is the name of a command that is not localized.",
  "NoOutdatedPackages": "There are no outdated packages.",
  "NoRegistryForPort": "no registry configured for port {package_name}",
  "_NoRegistryForPort.comment": "An example of {package_name} is zlib.",
  "NoUrlsAndHashSpecified": "No urls specified to download SHA: {sha}",
  "_NoUrlsAndHashSpecified.comment": "An example of {sha} is eb32643dd2164c72b8a660ef52f1e701bb368324ae461e12d70d6a9aefc0c9573387ee2ed3828037ed62bb3e8f566416a2d3b3827a3928f0bff7c29f7662293e.",
  "NoUrlsAndNoHashSpecified": "No urls specified and no hash specified.",
  "NonExactlyArgs": "the command '{command_name}' requires exactly {expected} arguments, but {actual} were provided",
  "_NonExactlyArgs.comment": "{expected} and {actual} are integers An example of {command_name} is install.",
  "NonOneRemainingArgs": "the command '{command_name}' requires exactly one argument",
  "_NonOneRemainingArgs.comment": "An example of {command_name} is install.",
  "NonRangeArgs": "the command '{command_name}' requires between {lower} and {upper} arguments, inclusive, but {actual} were provided",
  "_NonRangeArgs.comment": "{actual} is an integer An example of {command_name} is install. An example of {lower} is 42. An example of {upper} is 42.",
  "NonZeroOrOneRemainingArgs": "the command '{command_name}' requires zero or one arguments",
  "_NonZeroOrOneRemainingArgs.comment": "An example of {command_name} is install.",
  "NonZeroRemainingArgs": "the command '{command_name}' does not accept any additional arguments",
  "_NonZeroRemainingArgs.comment": "An example of {command_name} is install.",
  "NugetOutputNotCapturedBecauseInteractiveSpecified": "NuGet command failed and output was not captured because --interactive was specified",
  "NugetPackageFileSucceededButCreationFailed": "NuGet package creation succeeded, but no .nupkg was produced. Expected: \"{path}\"",
  "_NugetPackageFileSucceededButCreationFailed.comment": "An example of {path} is /foo/bar.",
  "NugetTimeoutExpectsSinglePositiveInteger": "unexpected arguments: binary config 'nugettimeout' expects a single positive integer argument",
  "OptionMustBeInteger": "Value of --{option} must be an integer.",
  "_OptionMustBeInteger.comment": "An example of {option} is editable.",
  "OptionRequired": "--{option} option is required.",
  "_OptionRequired.comment": "An example of {option} is editable.",
  "OptionRequiresANonDashesValue": "the option '{option}' requires a value; if you intended to set '{option}' to '{value}', use the equals form instead: {actual}={value}",
  "_OptionRequiresANonDashesValue.comment": "{value} is the value the user typed, {actual} is {option} potentially with prefixes like '--x-'. Full example: the option 'evil-option' requires a value; if you intended to set 'evil-option' to '--evil-value', use the equals form instead: --x-evil-option=--evil-value An example of {option} is editable.",
  "OptionRequiresAValue": "the option '{option}' requires a value",
  "_OptionRequiresAValue.comment": "An example of {option} is editable.",
  "OptionRequiresOption": "--{value} requires --{option}",
  "_OptionRequiresOption.comment": "{value} is a command line option. An example of {option} is editable.",
  "OptionUsedMultipleTimes": "the option '{option}' was specified multiple times",
  "_OptionUsedMultipleTimes.comment": "An example of {option} is editable.",
  "Options": "Options",
  "_Options.comment": "Printed just before a list of options for a command",
  "OriginalBinParagraphHeader": "\nOriginal Binary Paragraph",
  "OtherCommandsHeader": "Other",
  "OverlayPatchDir": "Overlay path \"{path}\" must exist and must be a directory.",
  "_OverlayPatchDir.comment": "An example of {path} is /foo/bar.",
  "OverlayPortsDirectoriesHelp": "Directories of overlay ports (also: {env_var})",
  "_OverlayPortsDirectoriesHelp.comment": "An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "OverlayTripletDirectoriesHelp": "Directories of overlay triplets (also: {env_var})",
  "_OverlayTripletDirectoriesHelp.comment": "An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "OverlayTriplets": "Overlay Triplets from \"{path}\":",
  "_OverlayTriplets.comment": "An example of {path} is /foo/bar.",
  "OverwritingFile": "File {path} was already present and will be overwritten",
  "_OverwritingFile.comment": "An example of {path} is /foo/bar.",
  "PECoffHeaderTooShort": "While parsing Portable Executable {path}, size of COFF header too small to contain a valid PE header.",
  "_PECoffHeaderTooShort.comment": "Portable executable is a term-of-art, see https://learn.microsoft.com/windows/win32/debug/pe-format An example of {path} is /foo/bar.",
  "PEConfigCrossesSectionBoundary": "While parsing Portable Executable {path}, image config directory crosses a section boundary.",
  "_PEConfigCrossesSectionBoundary.comment": "Portable executable is a term-of-art, see https://learn.microsoft.com/windows/win32/debug/pe-format An example of {path} is /foo/bar.",
  "PEImportCrossesSectionBoundary": "While parsing Portable Executable {path}, import table crosses a section boundary.",
  "_PEImportCrossesSectionBoundary.comment": "Portable executable is a term-of-art, see https://learn.microsoft.com/windows/win32/debug/pe-format An example of {path} is /foo/bar.",
  "PEPlusTagInvalid": "While parsing Portable Executable {path}, optional header was neither PE32 nor PE32+.",
  "_PEPlusTagInvalid.comment": "Portable executable is a term-of-art, see https://learn.microsoft.com/windows/win32/debug/pe-format An example of {path} is /foo/bar.",
  "PERvaNotFound": "While parsing Portable Executable {path}, could not find RVA {value:#X}.",
  "_PERvaNotFound.comment": "{value:#X} is the Relative Virtual Address sought. Portable executable is a term-of-art, see https://learn.microsoft.com/windows/win32/debug/pe-format An example of {path} is /foo/bar.",
  "PackageAbi": "{spec} package ABI: {package_abi}",
  "_PackageAbi.comment": "An example of {spec} is zlib:x64-windows. An example of {package_abi} is bb1c96759ac96102b4b18215db138daedd3eb16c2cd3302ae7bffab2b643eb87.",
  "PackageAlreadyRemoved": "unable to remove {spec}: already removed",
  "_PackageAlreadyRemoved.comment": "An example of {spec} is zlib:x64-windows.",
  "PackageDiscoveryHeader": "Package Discovery",
  "PackageFailedtWhileExtracting": "'{value}' failed while extracting {path}.",
  "_PackageFailedtWhileExtracting.comment": "'{value}' is either a tool name or a package name. An example of {path} is /foo/bar.",
  "PackageInfoHelp": "Display detailed information on packages",
  "PackageInstallationHeader": "Package Installation",
  "PackageManipulationHeader": "Package Manipulation",
  "PackageRootDir": "Packages directory (experimental)",
  "PackagesToInstall": "The following packages will be built and installed:",
  "PackagesToModify": "Additional packages (*) will be modified to complete this operation.",
  "PackagesToRebuild": "The following packages will be rebuilt:",
  "PackagesToRebuildSuggestRecurse": "If you are sure you want to rebuild the above packages, run the command with the --recurse option.",
  "PackagesToRemove": "The following packages will be removed:",
  "PackagesUpToDate": "No packages need updating.",
  "PackingVendorFailed": "Packing {vendor} failed. Use --debug for more information.",
  "_PackingVendorFailed.comment": "An example of {vendor} is Azure.",
  "PairedSurrogatesAreInvalid": "trailing surrogate following leading surrogate (paired surrogates are invalid)",
  "ParagraphDuplicateField": "duplicate field",
  "ParagraphExactlyOne": "There should be exactly one paragraph",
  "ParagraphExpectedColonAfterField": "expected ':' after field name",
  "ParagraphExpectedFieldName": "expected field name",
  "ParagraphUnexpectedEndOfLine": "unexpected end of line, to span a blank line use \"  .\"",
  "ParseFeatureNameError": "\"{package_name}\" is not a valid feature name. Feature names must be lowercase alphanumeric+hypens and not reserved (see {url} for more information).",
  "_ParseFeatureNameError.comment": "An example of {package_name} is zlib. An example of {url} is https://github.com/microsoft/vcpkg.",
  "ParseIdentifierError": "\"{value}\" is not a valid identifier. Identifiers must be lowercase alphanumeric+hypens and not reserved (see {url} for more information).",
  "_ParseIdentifierError.comment": "{value} is a lowercase identifier like 'boost' An example of {url} is https://github.com/microsoft/vcpkg.",
  "ParsePackageNameError": "\"{package_name}\" is not a valid package name. Package names must be lowercase alphanumeric+hypens and not reserved (see {url} for more information).",
  "_ParsePackageNameError.comment": "An example of {package_name} is zlib. An example of {url} is https://github.com/microsoft/vcpkg.",
  "ParsePackageNameNotEof": "expected the end of input parsing a package name; this usually means the indicated character is not allowed to be in a port name. Port names are all lowercase alphanumeric+hypens and not reserved (see {url} for more information).",
  "_ParsePackageNameNotEof.comment": "An example of {url} is https://github.com/microsoft/vcpkg.",
  "ParsePackagePatternError": "\"{package_name}\" is not a valid package pattern. Package patterns must use only one wildcard character (*) and it must be the last character in the pattern (see {url} for more information).",
  "_ParsePackagePatternError.comment": "An example of {package_name} is zlib. An example of {url} is https://github.com/microsoft/vcpkg.",
  "ParseQualifiedSpecifierNotEof": "expected the end of input parsing a package spec; this usually means the indicated character is not allowed to be in a package spec. Port, triplet, and feature names are all lowercase alphanumeric+hypens.",
  "ParseQualifiedSpecifierNotEofSquareBracket": "expected the end of input parsing a package spec; did you mean {version_spec} instead?",
  "_ParseQualifiedSpecifierNotEofSquareBracket.comment": "An example of {version_spec} is zlib:x64-windows@1.0.0.",
  "PathMustBeAbsolute": "Value of environment variable X_VCPKG_REGISTRIES_CACHE is not absolute: {path}",
  "_PathMustBeAbsolute.comment": "An example of {path} is /foo/bar.",
  "PerformingPostBuildValidation": "-- Performing post-build validation",
  "PortBugBinDirExists": "There should be no bin\\ directory in a static build, but {path} is present.",
  "_PortBugBinDirExists.comment": "An example of {path} is /foo/bar.",
  "PortBugDebugBinDirExists": "There should be no debug\\bin\\ directory in a static build, but {path} is present.",
  "_PortBugDebugBinDirExists.comment": "An example of {path} is /foo/bar.",
  "PortBugDebugShareDir": "/debug/share should not exist. Please reorganize any important files, then use\nfile(REMOVE_RECURSE \"${{CURRENT_PACKAGES_DIR}}/debug/share\")",
  "PortBugDllAppContainerBitNotSet": "The App Container bit must be set for Windows Store apps. The following DLLs do not have the App Container bit set:",
  "PortBugDllInLibDir": "The following dlls were found in /lib or /debug/lib. Please move them to /bin or /debug/bin, respectively.",
  "PortBugDuplicateIncludeFiles": "Include files should not be duplicated into the /debug/include directory. If this cannot be disabled in the project cmake, use\nfile(REMOVE_RECURSE \"${{CURRENT_PACKAGES_DIR}}/debug/include\")",
  "PortBugFoundCopyrightFiles": "The following files are potential copyright files:",
  "PortBugFoundDebugBinaries": "Found {count} debug binaries:",
  "_PortBugFoundDebugBinaries.comment": "An example of {count} is 42.",
  "PortBugFoundDllInStaticBuild": "DLLs should not be present in a static build, but the following DLLs were found:",
  "PortBugFoundEmptyDirectories": "There should be no empty directories in {path}. The following empty directories were found:",
  "_PortBugFoundEmptyDirectories.comment": "An example of {path} is /foo/bar.",
  "PortBugFoundExeInBinDir": "The following EXEs were found in /bin or /debug/bin. EXEs are not valid distribution targets.",
  "PortBugFoundReleaseBinaries": "Found {count} release binaries:",
  "_PortBugFoundReleaseBinaries.comment": "An example of {count} is 42.",
  "PortBugIncludeDirInCMakeHelperPort": "The folder /include exists in a cmake helper port; this is incorrect, since only cmake files should be installed",
  "PortBugInspectFiles": "To inspect the {extension} files, use:",
  "_PortBugInspectFiles.comment": "An example of {extension} is .exe.",
  "PortBugInvalidCrtLinkage": "The following binaries should use the {expected} CRT.",
  "_PortBugInvalidCrtLinkage.comment": "{expected} is one of LinkageDynamicDebug/LinkageDynamicRelease/LinkageStaticDebug/LinkageStaticRelease. Immediately after this message is a file by file list with what linkages they contain. 'CRT' is an acronym meaning C Runtime. See also: https://learn.microsoft.com/cpp/build/reference/md-mt-ld-use-run-time-library?view=msvc-170. This is complicated because a binary can link with more than one CRT.\nExample fully formatted message:\nThe following binaries should use the Dynamic Debug (/MDd) CRT.\n    C:\\some\\path\\to\\sane\\lib links with: Dynamic Release (/MD)\n    C:\\some\\path\\to\\lib links with:\n        Static Debug (/MTd)\n        Dynamic Release (/MD)\n    C:\\some\\different\\path\\to\\a\\dll links with:\n        Static Debug (/MTd)\n        Dynamic Debug (/MDd)\n",
  "PortBugInvalidCrtLinkageEntry": "{path} links with:",
  "_PortBugInvalidCrtLinkageEntry.comment": "See explanation in PortBugInvalidCrtLinkage An example of {path} is /foo/bar.",
  "PortBugKernel32FromXbox": "The selected triplet targets Xbox, but the following DLLs link with kernel32. These DLLs cannot be loaded on Xbox, where kernel32 is not present. This is typically caused by linking with kernel32.lib rather than a suitable umbrella library, such as onecore_apiset.lib or xgameplatform.lib.",
  "PortBugMergeLibCMakeDir": "The /lib/cmake folder should be merged with /debug/lib/cmake and moved to /share/{package_name}/cmake. Please use the helper function `vcpkg_cmake_config_fixup()` from the port vcpkg-cmake-config.`",
  "_PortBugMergeLibCMakeDir.comment": "An example of {package_name} is zlib.",
  "PortBugMismatchedNumberOfBinaries": "Mismatching number of debug and release binaries.",
  "PortBugMisplacedCMakeFiles": "The following cmake files were found outside /share/{spec}. Please place cmake files in /share/{spec}.",
  "_PortBugMisplacedCMakeFiles.comment": "An example of {spec} is zlib:x64-windows.",
  "PortBugMisplacedFiles": "The following files are placed in {path}:",
  "_PortBugMisplacedFiles.comment": "An example of {path} is /foo/bar.",
  "PortBugMisplacedFilesCont": "Files cannot be present in those directories.",
  "PortBugMisplacedPkgConfigFiles": "pkgconfig directories should be one of share/pkgconfig (for header only libraries only), lib/pkgconfig, or lib/debug/pkgconfig. The following misplaced pkgconfig files were found:",
  "PortBugMissingDebugBinaries": "Debug binaries were not found.",
  "PortBugMissingFile": "The /{path} file does not exist. This file must exist for CMake helper ports.",
  "_PortBugMissingFile.comment": "An example of {path} is /foo/bar.",
  "PortBugMissingImportedLibs": "Import libraries were not present in {path}.\nIf this is intended, add the following line in the portfile:\nset(VCPKG_POLICY_DLLS_WITHOUT_LIBS enabled)",
  "_PortBugMissingImportedLibs.comment": "An example of {path} is /foo/bar.",
  "PortBugMissingIncludeDir": "The folder /include is empty or not present. This indicates the library was not correctly installed.",
  "PortBugMissingLicense": "The software license must be available at ${{CURRENT_PACKAGES_DIR}}/share/{package_name}/copyright",
  "_PortBugMissingLicense.comment": "An example of {package_name} is zlib.",
  "PortBugMissingProvidedUsage": "The port provided \"usage\" but forgot to install to /share/{package_name}/usage, add the following linein the portfile:",
  "_PortBugMissingProvidedUsage.comment": "An example of {package_name} is zlib.",
  "PortBugMissingReleaseBinaries": "Release binaries were not found.",
  "PortBugMovePkgConfigFiles": "You can move the pkgconfig files with commands similar to:",
  "PortBugOutdatedCRT": "Detected outdated dynamic CRT in the following files:",
  "PortBugRemoveBinDir": "If the creation of bin\\ and/or debug\\bin\\ cannot be disabled, use this in the portfile to remove them",
  "PortBugRemoveEmptyDirectories": "If a directory should be populated but is not, this might indicate an error in the portfile.\nIf the directories are not needed and their creation cannot be disabled, use something like this in the portfile to remove them:",
  "PortBugRemoveEmptyDirs": "file(REMOVE_RECURSE empty directories left by the above renames)",
  "_PortBugRemoveEmptyDirs.comment": "Only the 'empty directories left by the above renames' part should be translated",
  "PortBugRestrictedHeaderPaths": "The following restricted headers can prevent the core C++ runtime and other packages from compiling correctly. In exceptional circumstances, this policy can be disabled by setting CMake variable VCPKG_POLICY_ALLOW_RESTRICTED_HEADERS in portfile.cmake.",
  "_PortBugRestrictedHeaderPaths.comment": "A list of restricted headers is printed after this message, one per line. ",
  "PortBugSetDllsWithoutExports": "DLLs without any exports are likely a bug in the build script. If this is intended, add the following line in the portfile:\nset(VCPKG_POLICY_DLLS_WITHOUT_EXPORTS enabled)\nThe following DLLs have no exports:",
  "_PortBugSetDllsWithoutExports.comment": "'exports' means an entry in a DLL's export table. After this message, one file path per line is printed listing each DLL with an empty export table.",
  "PortDependencyConflict": "Port {package_name} has the following unsupported dependencies:",
  "_PortDependencyConflict.comment": "An example of {package_name} is zlib.",
  "PortDoesNotExist": "{package_name} does not exist",
  "_PortDoesNotExist.comment": "An example of {package_name} is zlib.",
  "PortMissingManifest2": "{package_name} port manifest missing (no vcpkg.json or CONTROL file)",
  "_PortMissingManifest2.comment": "An example of {package_name} is zlib.",
  "PortNotInBaseline": "the baseline does not contain an entry for port {package_name}",
  "_PortNotInBaseline.comment": "An example of {package_name} is zlib.",
  "PortSupportsField": "(supports: \"{supports_expression}\")",
  "_PortSupportsField.comment": "An example of {supports_expression} is windows & !static.",
  "PortVersionConflict": "The following packages differ from their port versions:",
  "PortVersionControlMustBeANonNegativeInteger": "\"Port-Version\" must be a non-negative integer",
  "PortVersionMultipleSpecification": "\"port_version\" cannot be combined with an embedded '#' in the version",
  "PortsAdded": "The following {count} ports were added:",
  "_PortsAdded.comment": "An example of {count} is 42.",
  "PortsNoDiff": "There were no changes in the ports between the two commits.",
  "PortsRemoved": "The following {count} ports were removed:",
  "_PortsRemoved.comment": "An example of {count} is 42.",
  "PortsUpdated": "The following {count} ports were updated:",
  "_PortsUpdated.comment": "An example of {count} is 42.",
  "PrebuiltPackages": "There are packages that have not been built. To build them run:",
  "PreviousIntegrationFileRemains": "Previous integration file was not removed.",
  "ProgramReturnedNonzeroExitCode": "{tool_name} failed with exit code: ({exit_code}).",
  "_ProgramReturnedNonzeroExitCode.comment": "The program's console output is appended after this. An example of {tool_name} is aria2. An example of {exit_code} is 127.",
  "ProvideExportType": "At least one of the following options are required: --raw --nuget --ifw --zip --7zip --chocolatey --prefab.",
  "PushingVendorFailed": "Pushing {vendor} to \"{path}\" failed. Use --debug for more information.",
  "_PushingVendorFailed.comment": "An example of {vendor} is Azure. An example of {path} is /foo/bar.",
  "RegeneratesArtifactRegistry": "Regenerates an artifact registry",
  "RegistryCreated": "Successfully created registry at {path}",
  "_RegistryCreated.comment": "An example of {path} is /foo/bar.",
  "RegistryValueWrongType": "The registry value {path} was an unexpected type.",
  "_RegistryValueWrongType.comment": "An example of {path} is /foo/bar.",
  "RemoveDependencies": "To remove dependencies in manifest mode, edit your manifest (vcpkg.json) and run 'install'.",
  "RemovePackageConflict": "{spec} is not installed, but {package_name} is installed for {triplet}. Did you mean {package_name}:{triplet}?",
  "_RemovePackageConflict.comment": "An example of {package_name} is zlib. An example of {spec} is zlib:x64-windows. An example of {triplet} is x64-windows.",
  "RemovingPackage": "Removing {action_index}/{count} {spec}",
  "_RemovingPackage.comment": "An example of {action_index} is 340. An example of {count} is 42. An example of {spec} is zlib:x64-windows.",
  "ResponseFileCode": "@response_file",
  "_ResponseFileCode.comment": "Explains to the user that they can use response files on the command line, 'response_file' must have no spaces and be a legal file name.",
  "RestoredPackagesFromAWS": "Restored {count} package(s) from AWS in {elapsed}. Use --debug to see more details.",
  "_RestoredPackagesFromAWS.comment": "An example of {count} is 42. An example of {elapsed} is 3.532 min.",
  "RestoredPackagesFromCOS": "Restored {count} package(s) from COS in {elapsed}. Use --debug to see more details.",
  "_RestoredPackagesFromCOS.comment": "An example of {count} is 42. An example of {elapsed} is 3.532 min.",
  "RestoredPackagesFromFiles": "Restored {count} package(s) from {path} in {elapsed}. Use --debug to see more details.",
  "_RestoredPackagesFromFiles.comment": "An example of {count} is 42. An example of {elapsed} is 3.532 min. An example of {path} is /foo/bar.",
  "RestoredPackagesFromGCS": "Restored {count} package(s) from GCS in {elapsed}. Use --debug to see more details.",
  "_RestoredPackagesFromGCS.comment": "An example of {count} is 42. An example of {elapsed} is 3.532 min.",
  "RestoredPackagesFromGHA": "Restored {count} package(s) from GitHub Actions Cache in {elapsed}. Use --debug to see more details.",
  "_RestoredPackagesFromGHA.comment": "An example of {count} is 42. An example of {elapsed} is 3.532 min.",
  "RestoredPackagesFromHTTP": "Restored {count} package(s) from HTTP servers in {elapsed}. Use --debug to see more details.",
  "_RestoredPackagesFromHTTP.comment": "An example of {count} is 42. An example of {elapsed} is 3.532 min.",
  "RestoredPackagesFromNuGet": "Restored {count} package(s) from NuGet in {elapsed}. Use --debug to see more details.",
  "_RestoredPackagesFromNuGet.comment": "An example of {count} is 42. An example of {elapsed} is 3.532 min.",
  "ResultsHeader": "RESULTS",
  "_ResultsHeader.comment": "Displayed before a list of installation results.",
  "ScriptAssetCacheRequiresScript": "expected arguments: asset config 'x-script' requires exactly the exec template as an argument",
  "SecretBanner": "*** SECRET ***",
  "SeeURL": "See {url} for more information.",
  "_SeeURL.comment": "An example of {url} is https://github.com/microsoft/vcpkg.",
  "SerializedBinParagraphHeader": "\nSerialized Binary Paragraph",
  "SettingEnvVar": "-- Setting \"{env_var}\" environment variables to \"{url}\".",
  "_SettingEnvVar.comment": "An example of env_var is \"HTTP(S)_PROXY\"'--' at the beginning must be preserved An example of {env_var} is VCPKG_DEFAULT_TRIPLET. An example of {url} is https://github.com/microsoft/vcpkg.",
  "ShaPassedAsArgAndOption": "SHA512 passed as both an argument and as an option. Only pass one of these.",
  "ShaPassedWithConflict": "SHA512 passed, but --skip-sha512 was also passed; only do one or the other.",
  "ShallowRepositoryDetected": "vcpkg was cloned as a shallow repository in: {path}\nTry again with a full vcpkg clone.",
  "_ShallowRepositoryDetected.comment": "An example of {path} is /foo/bar.",
  "SkipClearingInvalidDir": "Skipping clearing contents of {path} because it was not a directory.",
  "_SkipClearingInvalidDir.comment": "An example of {path} is /foo/bar.",
  "SourceFieldPortNameMismatch": "The 'Source' field inside the CONTROL file, or \"name\" field inside the vcpkg.json file has the name {package_name} and does not match the port directory \"{path}\".",
  "_SourceFieldPortNameMismatch.comment": "{package_name} and \"{path}\" are both names of installable ports/packages. 'Source', 'CONTROL', 'vcpkg.json', and 'name' references are locale-invariant. An example of {package_name} is zlib. An example of {path} is /foo/bar.",
  "SpecifiedFeatureTurnedOff": "'{command_name}' feature specifically turned off, but --{option} was specified.",
  "_SpecifiedFeatureTurnedOff.comment": "An example of {command_name} is install. An example of {option} is editable.",
  "SpecifyHostArch": "Host triplet. See 'vcpkg help triplet' (default: {env_var})",
  "_SpecifyHostArch.comment": "'vcpkg help triplet' is a command line that should not be localized An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "SpecifyTargetArch": "Target triplet. See 'vcpkg help triplet' (default: {env_var})",
  "_SpecifyTargetArch.comment": "'vcpkg help triplet' is a command line that should not be localized An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "StartCodeUnitInContinue": "found start code unit in continue position",
  "StoreOptionMissingSha": "--store option is invalid without a sha512",
  "StoredBinariesToDestinations": "Stored binaries in {count} destinations in {elapsed}.",
  "_StoredBinariesToDestinations.comment": "An example of {count} is 42. An example of {elapsed} is 3.532 min.",
  "SuccessfulyExported": "Exported {package_name} to {path}",
  "_SuccessfulyExported.comment": "An example of {package_name} is zlib. An example of {path} is /foo/bar.",
  "SuggestGitPull": "The result may be outdated. Run `git pull` to get the latest results.",
  "SuggestResolution": "To attempt to resolve all errors at once, run:\nvcpkg {command_name} --{option}",
  "_SuggestResolution.comment": "An example of {command_name} is install. An example of {option} is editable.",
  "SuggestStartingBashShell": "Please make sure you have started a new bash shell for the change to take effect.",
  "SupportedPort": "Port {package_name} is supported.",
  "_SupportedPort.comment": "An example of {package_name} is zlib.",
  "SwitchUsedMultipleTimes": "the switch '{option}' was specified multiple times",
  "_SwitchUsedMultipleTimes.comment": "An example of {option} is editable.",
  "SynopsisHeader": "Synopsis:",
  "_SynopsisHeader.comment": "Printed before a description of what a command does",
  "SystemApiErrorMessage": "calling {system_api} failed with {exit_code} ({error_msg})",
  "_SystemApiErrorMessage.comment": "An example of {system_api} is CreateProcessW. An example of {exit_code} is 127. An example of {error_msg} is File Not Found.",
  "SystemRootMustAlwaysBePresent": "Expected the SystemRoot environment variable to be always set on Windows.",
  "SystemTargetsInstallFailed": "failed to install system targets file to {path}",
  "_SystemTargetsInstallFailed.comment": "An example of {path} is /foo/bar.",
  "ToRemovePackages": "To only remove outdated packages, run\n{command_name} remove --outdated",
  "_ToRemovePackages.comment": "An example of {command_name} is install.",
  "ToUpdatePackages": "To update these packages and all dependencies, run\n{command_name} upgrade'",
  "_ToUpdatePackages.comment": "An example of {command_name} is install.",
  "ToolFetchFailed": "Could not fetch {tool_name}.",
  "_ToolFetchFailed.comment": "An example of {tool_name} is aria2.",
  "ToolInWin10": "This utility is bundled with Windows 10 or later.",
  "ToolOfVersionXNotFound": "A suitable version of {tool_name} was not found (required v{version}) and unable to automatically download a portable one. Please install a newer version of {tool_name}",
  "_ToolOfVersionXNotFound.comment": "An example of {tool_name} is aria2. An example of {version} is 1.3.8.",
  "TotalInstallTime": "Total install time: {elapsed}",
  "_TotalInstallTime.comment": "An example of {elapsed} is 3.532 min.",
  "TrailingCommaInArray": "Trailing comma in array",
  "TrailingCommaInObj": "Trailing comma in an object",
  "TripletFileNotFound": "Triplet file {triplet}.cmake not found",
  "_TripletFileNotFound.comment": "An example of {triplet} is x64-windows.",
  "TripletLabel": "Triplet:",
  "TwoFeatureFlagsSpecified": "Both '{value}' and -'{value}' were specified as feature flags.",
  "_TwoFeatureFlagsSpecified.comment": "'{value}' is a feature flag.",
  "UnableToClearPath": "unable to delete {path}",
  "_UnableToClearPath.comment": "An example of {path} is /foo/bar.",
  "UnableToReadAppDatas": "both %LOCALAPPDATA% and %APPDATA% were unreadable",
  "UnableToReadEnvironmentVariable": "unable to read {env_var}",
  "_UnableToReadEnvironmentVariable.comment": "An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "UndeterminedToolChainForTriplet": "Unable to determine toolchain use for {triplet} with with CMAKE_SYSTEM_NAME {system_name}. Did you mean to use VCPKG_CHAINLOAD_TOOLCHAIN_FILE?",
  "_UndeterminedToolChainForTriplet.comment": "An example of {triplet} is x64-windows. An example of {system_name} is Darwin.",
  "UnexpectedArgument": "unexpected argument: {option}",
  "_UnexpectedArgument.comment": "Argument is literally what the user passed on the command line. An example of {option} is editable.",
  "UnexpectedAssetCacheProvider": "unknown asset provider type: valid source types are 'x-azurl', 'x-script', 'x-block-origin', and 'clear'",
  "UnexpectedByteSize": "Expected {expected} bytes to be written, but {actual} were written.",
  "_UnexpectedByteSize.comment": "{expected} is the expected byte size and {actual} is the actual byte size.",
  "UnexpectedCharExpectedCloseBrace": "Unexpected character; expected property or close brace",
  "UnexpectedCharExpectedColon": "Unexpected character; expected colon",
  "UnexpectedCharExpectedName": "Unexpected character; expected property name",
  "UnexpectedCharExpectedValue": "Unexpected character; expected value",
  "UnexpectedCharMidArray": "Unexpected character in middle of array",
  "UnexpectedCharMidKeyword": "Unexpected character in middle of keyword",
  "UnexpectedDigitsAfterLeadingZero": "Unexpected digits after a leading zero",
  "UnexpectedEOFAfterBacktick": "unexpected eof: trailing unescaped backticks (`) are not allowed",
  "UnexpectedEOFAfterEscape": "Unexpected EOF after escape character",
  "UnexpectedEOFAfterMinus": "Unexpected EOF after minus sign",
  "UnexpectedEOFExpectedChar": "Unexpected character; expected EOF",
  "UnexpectedEOFExpectedCloseBrace": "Unexpected EOF; expected property or close brace",
  "UnexpectedEOFExpectedColon": "Unexpected EOF; expected colon",
  "UnexpectedEOFExpectedName": "Unexpected EOF; expected property name",
  "UnexpectedEOFExpectedProp": "Unexpected EOF; expected property",
  "UnexpectedEOFExpectedValue": "Unexpected EOF; expected value",
  "UnexpectedEOFMidArray": "Unexpected EOF in middle of array",
  "UnexpectedEOFMidKeyword": "Unexpected EOF in middle of keyword",
  "UnexpectedEOFMidString": "Unexpected EOF in middle of string",
  "UnexpectedEOFMidUnicodeEscape": "Unexpected end of file in middle of unicode escape",
  "UnexpectedEscapeSequence": "Unexpected escape sequence continuation",
  "UnexpectedField": "unexpected field '{json_field}'",
  "_UnexpectedField.comment": "An example of {json_field} is identifer.",
  "UnexpectedFieldSuggest": "unexpected field '{json_field}', did you mean '{value}'?",
  "_UnexpectedFieldSuggest.comment": "{value} is a suggested field name to use in a JSON document An example of {json_field} is identifer.",
  "UnexpectedFormat": "Expected format is [{expected}], but was [{actual}].",
  "_UnexpectedFormat.comment": "{expected} is the expected format, {actual} is the actual format.",
  "UnexpectedOption": "unexpected option: {option}",
  "_UnexpectedOption.comment": "Option is a command line option like --option=value An example of {option} is editable.",
  "UnexpectedPortName": "the port {expected} is declared as {actual} in {path}",
  "_UnexpectedPortName.comment": "{expected} is the expected port and {actual} is the port declared by the user. An example of {path} is /foo/bar.",
  "UnexpectedPortversion": "unexpected \"port-version\" without a versioning field",
  "_UnexpectedPortversion.comment": "'field' means a JSON key/value pair here",
  "UnexpectedSwitch": "unexpected switch: {option}",
  "_UnexpectedSwitch.comment": "Switch is a command line switch like --switch An example of {option} is editable.",
  "UnexpectedToolOutput": "{tool_name} ({path}) produced unexpected output when attempting to determine the version:",
  "_UnexpectedToolOutput.comment": "The actual command line output will be appended after this message. An example of {tool_name} is aria2. An example of {path} is /foo/bar.",
  "UnexpectedWindowsArchitecture": "unexpected Windows host architecture: {actual}",
  "_UnexpectedWindowsArchitecture.comment": "{actual} is the CPU kind we observed like ARM or MIPS",
  "UnknownBaselineFileContent": "unrecognizable baseline entry; expected 'port:triplet=(fail|skip|pass)'",
  "UnknownBinaryProviderType": "unknown binary provider type: valid providers are 'clear', 'default', 'nuget', 'nugetconfig', 'nugettimeout', 'interactive', 'x-azblob', 'x-gcs', 'x-aws', 'x-aws-config', 'http', and 'files'",
  "UnknownBooleanSetting": "unknown boolean setting for {option}: \"{value}\". Valid values are '', '1', '0', 'ON', 'OFF', 'TRUE', and 'FALSE'.",
  "_UnknownBooleanSetting.comment": "{value} is what {option} is set to An example of {option} is editable.",
  "UnknownParameterForIntegrate": "Unknown parameter '{value}' for integrate.",
  "_UnknownParameterForIntegrate.comment": "'{value}' is a user-supplied command line option. For example, given vcpkg integrate frobinate, {value} would be frobinate.",
  "UnknownPolicySetting": "Unknown setting for policy '{value}': {option}",
  "_UnknownPolicySetting.comment": "'{value}' is the policy in question. These are unlocalized names that ports use to control post build checks. Some examples are VCPKG_POLICY_DLLS_WITHOUT_EXPORTS, VCPKG_POLICY_MISMATCHED_NUMBER_OF_BINARIES, or VCPKG_POLICY_ALLOW_OBSOLETE_MSVCRT An example of {option} is editable.",
  "UnknownSettingForBuildType": "Unknown setting for VCPKG_BUILD_TYPE {option}. Valid settings are '', 'debug', and 'release'.",
  "_UnknownSettingForBuildType.comment": "An example of {option} is editable.",
  "UnknownTool": "vcpkg does not have a definition of this tool for this platform.",
  "UnknownTopic": "unknown topic {value}",
  "_UnknownTopic.comment": "{value} the value a user passed to `vcpkg help` that we don't understand",
  "UnknownVariablesInTemplate": "invalid argument: url template '{value}' contains unknown variables: {list}",
  "_UnknownVariablesInTemplate.comment": "{value} is the value provided by the user and {list} a list of unknown variables seperated by comma",
  "UnrecognizedConfigField": "configuration contains the following unrecognized fields:",
  "UnrecognizedIdentifier": "Unrecognized identifer name {value}. Add to override list in triplet file.",
  "_UnrecognizedIdentifier.comment": "'{value}' is an expression identifier. For example, given an expression 'windows & x86', 'windows' and 'x86' are identifiers.",
  "UnsupportedFeature": "feature {feature} was passed, but that is not a feature supported by {package_name} supports.",
  "_UnsupportedFeature.comment": "An example of {feature} is avisynthplus. An example of {package_name} is zlib.",
  "UnsupportedFeatureSupportsExpression": "{feature_spec} is only supported on '{supports_expression}', which does not match {triplet}. This usually means that there are known build failures, or runtime problems, when building other platforms. To ignore this and attempt to build {package_name} anyway, rerun vcpkg with `--allow-unsupported`.",
  "_UnsupportedFeatureSupportsExpression.comment": "An example of {package_name} is zlib. An example of {feature_spec} is zlib[featurea,featureb]. An example of {supports_expression} is windows & !static. An example of {triplet} is x64-windows.",
  "UnsupportedFeatureSupportsExpressionWarning": "{feature_spec} is only supported on '{supports_expression}', which does not match {triplet}. This usually means that there are known build failures, or runtime problems, when building other platforms. Proceeding anyway due to `--allow-unsupported`.",
  "_UnsupportedFeatureSupportsExpressionWarning.comment": "An example of {feature_spec} is zlib[featurea,featureb]. An example of {supports_expression} is windows & !static. An example of {triplet} is x64-windows.",
  "UnsupportedPort": "Port {package_name} is not supported.",
  "_UnsupportedPort.comment": "An example of {package_name} is zlib.",
  "UnsupportedPortDependency": "- dependency {value} is not supported.",
  "_UnsupportedPortDependency.comment": "'{value}' is the name of a port dependency.",
  "UnsupportedSyntaxInCDATA": "]]> is not supported in CDATA block",
  "UnsupportedSystemName": "Could not map VCPKG_CMAKE_SYSTEM_NAME '{system_name}' to a vcvarsall platform. Supported system names are '', 'Windows' and 'WindowsStore'.",
  "_UnsupportedSystemName.comment": "An example of {system_name} is Darwin.",
  "UnsupportedToolchain": "in triplet {triplet}: Unable to find a valid toolchain for requested target architecture {arch}.\nThe selected Visual Studio instance is at: {path}\nThe available toolchain combinations are: {list}",
  "_UnsupportedToolchain.comment": "example for {list} is 'x86, arm64' An example of {triplet} is x64-windows. An example of {arch} is x64. An example of {path} is /foo/bar.",
  "UnsupportedUpdateCMD": "the update command does not currently support manifest mode. Instead, modify your vcpkg.json and run install.",
  "UpdateBaselineAddBaselineNoManifest": "the --{option} switch was passed, but there is no manifest file to add a `builtin-baseline` field to.",
  "_UpdateBaselineAddBaselineNoManifest.comment": "An example of {option} is editable.",
  "UpdateBaselineLocalGitError": "git failed to parse HEAD for the local vcpkg registry at \"{path}\"",
  "_UpdateBaselineLocalGitError.comment": "An example of {path} is /foo/bar.",
  "UpdateBaselineNoConfiguration": "neither `vcpkg.json` nor `vcpkg-configuration.json` exist to update.",
  "UpdateBaselineNoExistingBuiltinBaseline": "the manifest file currently does not contain a `builtin-baseline` field; in order to add one, pass the --{option} switch.",
  "_UpdateBaselineNoExistingBuiltinBaseline.comment": "An example of {option} is editable.",
  "UpdateBaselineNoUpdate": "registry '{url}' not updated: '{value}'",
  "_UpdateBaselineNoUpdate.comment": "example of {value} is '5507daa796359fe8d45418e694328e878ac2b82f' An example of {url} is https://github.com/microsoft/vcpkg.",
  "UpdateBaselineRemoteGitError": "git failed to fetch remote repository '{url}'",
  "_UpdateBaselineRemoteGitError.comment": "An example of {url} is https://github.com/microsoft/vcpkg.",
  "UpdateBaselineUpdatedBaseline": "updated registry '{url}': baseline '{old_value}' -> '{new_value}'",
  "_UpdateBaselineUpdatedBaseline.comment": "example of {old_value}, {new_value} is '5507daa796359fe8d45418e694328e878ac2b82f' An example of {url} is https://github.com/microsoft/vcpkg.",
  "UpgradeInManifest": "Upgrade upgrades a classic mode installation and thus does not support manifest mode. Consider updating your dependencies by updating your baseline to a current value with vcpkg x-update-baseline and running vcpkg install.",
  "_UpgradeInManifest.comment": "'vcpkg x-update-baseline' and 'vcpkg install' are command lines and should not be localized.",
  "UpgradeRunWithNoDryRun": "If you are sure you want to rebuild the above packages, run this command with the --no-dry-run option.",
  "UploadingBinariesToVendor": "Uploading binaries for '{spec}' to '{vendor}' source \"{path}\".",
  "_UploadingBinariesToVendor.comment": "An example of {spec} is zlib:x64-windows. An example of {vendor} is Azure. An example of {path} is /foo/bar.",
  "UseEnvVar": "-- Using {env_var} in environment variables.",
  "_UseEnvVar.comment": "An example of env_var is \"HTTP(S)_PROXY\"'--' at the beginning must be preserved An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "UserWideIntegrationDeleted": "User-wide integration is not installed.",
  "UserWideIntegrationRemoved": "User-wide integration was removed.",
  "UsingManifestAt": "Using manifest file at {path}.",
  "_UsingManifestAt.comment": "An example of {path} is /foo/bar.",
  "Utf8ConversionFailed": "Failed to convert to UTF-8",
  "VSExaminedInstances": "The following Visual Studio instances were considered:",
  "VSExaminedPaths": "The following paths were examined for Visual Studio instances:",
  "VSNoInstances": "Could not locate a complete Visual Studio instance",
  "VcpkgCeIsExperimental": "vcpkg-artifacts is experimental and may change at any time.",
  "_VcpkgCeIsExperimental.comment": "The name of the feature is 'vcpkg-artifacts' and should be singular despite ending in s",
  "VcpkgCompletion": "vcpkg {value} completion is already imported to your \"{path}\" file.\nThe following entries were found:",
  "_VcpkgCompletion.comment": "'{value}' is the subject for completion. i.e. bash, zsh, etc. An example of {path} is /foo/bar.",
  "VcpkgDisallowedClassicMode": "Could not locate a manifest (vcpkg.json) above the current working directory.\nThis vcpkg distribution does not have a classic mode instance.",
  "VcpkgHasCrashed": "vcpkg has crashed. Please create an issue at https://github.com/microsoft/vcpkg containing a brief summary of what you were trying to do and the following information.",
  "_VcpkgHasCrashed.comment": "Printed at the start of a crash report.",
  "VcpkgInVsPrompt": "vcpkg appears to be in a Visual Studio prompt targeting {value} but installing for {triplet}. Consider using --triplet {value}-windows or --triplet {value}-uwp.",
  "_VcpkgInVsPrompt.comment": "'{value}' is a VS prompt An example of {triplet} is x64-windows.",
  "VcpkgInvalidCommand": "invalid command: {command_name}",
  "_VcpkgInvalidCommand.comment": "An example of {command_name} is install.",
  "VcpkgRegistriesCacheIsNotDirectory": "Value of environment variable X_VCPKG_REGISTRIES_CACHE is not a directory: {path}",
  "_VcpkgRegistriesCacheIsNotDirectory.comment": "An example of {path} is /foo/bar.",
  "VcpkgRootRequired": "Setting VCPKG_ROOT is required for standalone bootstrap.",
  "VcpkgRootsDir": "The vcpkg root directory (default: {env_var})",
  "_VcpkgRootsDir.comment": "An example of {env_var} is VCPKG_DEFAULT_TRIPLET.",
  "VcpkgSendMetricsButDisabled": "passed --sendmetrics, but metrics are disabled.",
  "VcpkgUsage": "usage: vcpkg <command> [--switches] [--options=values] [arguments] @response_file",
  "_VcpkgUsage.comment": "This is describing a command line, everything should be localized except 'vcpkg'; symbols like <>s, []s, or --s should be preserved. @response_file should be localized to be consistent with the message named 'ResponseFileCode'.",
  "VcvarsRunFailed": "failed to run vcvarsall.bat to get a Visual Studio environment",
  "VcvarsRunFailedExitCode": "while trying to get a Visual Studio environment, vcvarsall.bat returned {exit_code}",
  "_VcvarsRunFailedExitCode.comment": "An example of {exit_code} is 127.",
  "VersionBaselineMismatch": "The latest version is {expected}, but the baseline file contains {actual}.\nRun:\nvcpkg x-add-version {package_name}\ngit add versions\ngit commit -m \"Update version database\"\nto update the baseline version.",
  "_VersionBaselineMismatch.comment": "{expected} and {actual} are versions An example of {package_name} is zlib.",
  "VersionBuiltinPortTreeEntryMissing": "no version database entry for {package_name} at {expected}; using the checked out ports tree version ({actual}).",
  "_VersionBuiltinPortTreeEntryMissing.comment": "{expected} and {actual} are versions like 1.0. An example of {package_name} is zlib.",
  "VersionCommandHeader": "vcpkg package management program version {version}\n\nSee LICENSE.txt for license information.",
  "_VersionCommandHeader.comment": "An example of {version} is 1.3.8.",
  "VersionConflictXML": "Expected {path} version: [{expected_version}], but was [{actual_version}]. Please re-run bootstrap-vcpkg.",
  "_VersionConflictXML.comment": "An example of {path} is /foo/bar. An example of {expected_version} is 1.3.8. An example of {actual_version} is 1.3.8.",
  "VersionConstraintPortVersionMustBePositiveInteger": "port-version (after the '#') in \"version>=\" must be a non-negative integer",
  "VersionConstraintViolated": "dependency {spec} was expected to be at least version {expected_version}, but is currently {actual_version}.",
  "_VersionConstraintViolated.comment": "An example of {spec} is zlib:x64-windows. An example of {expected_version} is 1.3.8. An example of {actual_version} is 1.3.8.",
  "VersionDatabaseEntryMissing": "no version entry for {package_name} at {version}.",
  "_VersionDatabaseEntryMissing.comment": "An example of {package_name} is zlib. An example of {version} is 1.3.8.",
  "VersionDatabaseFileMissing": "{package_name} is missing a version database file at {path}\nRun:\nvcpkg x-add-version {package_name}\nto create the versions file.",
  "_VersionDatabaseFileMissing.comment": "An example of {package_name} is zlib. An example of {path} is /foo/bar.",
  "VersionGitEntryMissing": "no version database entry for {package_name} at {version}.\nAvailable versions:",
  "_VersionGitEntryMissing.comment": "A list of versions, 1 per line, are printed after this message. An example of {package_name} is zlib. An example of {version} is 1.3.8.",
  "VersionInDeclarationDoesNotMatch": "The version declared in file does not match checked-out version: {version}",
  "_VersionInDeclarationDoesNotMatch.comment": "An example of {version} is 1.3.8.",
  "VersionIncomparable1": "version conflict on {spec}: {constraint_origin} required {expected}, which cannot be compared with the baseline version {actual}.",
  "_VersionIncomparable1.comment": "{expected} and {actual} are versions like 1.0 An example of {spec} is zlib:x64-windows. An example of {constraint_origin} is zlib:x64-windows@1.0.0.",
  "VersionIncomparable2": "{version_spec} has scheme {new_scheme}",
  "_VersionIncomparable2.comment": "An example of {version_spec} is zlib:x64-windows@1.0.0. An example of {new_scheme} is version.",
  "VersionIncomparable3": "This can be resolved by adding an explicit override to the preferred version. For example:",
  "_VersionIncomparable3.comment": "This precedes a JSON document describing the fix",
  "VersionIncomparable4": "See `vcpkg help versioning` or {url} for more information.",
  "_VersionIncomparable4.comment": "An example of {url} is https://github.com/microsoft/vcpkg.",
  "VersionIncomparableSchemeString": "Both versions have scheme string but different primary text.",
  "VersionIncomparableSchemes": "The versions have incomparable schemes:",
  "VersionInvalidDate": "`{version}` is not a valid date version. Dates must follow the format YYYY-MM-DD and disambiguators must be dot-separated positive integer values without leading zeroes.",
  "_VersionInvalidDate.comment": "An example of {version} is 1.3.8.",
  "VersionInvalidRelaxed": "`{version}` is not a valid relaxed version (semver with arbitrary numeric element count).",
  "_VersionInvalidRelaxed.comment": "An example of {version} is 1.3.8.",
  "VersionInvalidSemver": "`{version}` is not a valid semantic version, consult <https://semver.org>.",
  "_VersionInvalidSemver.comment": "An example of {version} is 1.3.8.",
  "VersionMissing": "expected a versioning field (one of version, version-date, version-semver, or version-string)",
  "_VersionMissing.comment": "The names version, version-date, version-semver, and version-string are code and must not be localized",
  "VersionMissingRequiredFeature": "{version_spec} does not have required feature {feature} needed by {constraint_origin}",
  "_VersionMissingRequiredFeature.comment": "An example of {version_spec} is zlib:x64-windows@1.0.0. An example of {feature} is avisynthplus. An example of {constraint_origin} is zlib:x64-windows@1.0.0.",
  "VersionNotFound": "{expected} not available, only {actual} is available",
  "_VersionNotFound.comment": "{expected} and {actual} are versions",
  "VersionNotFoundInVersionsFile": "Version {version} was not found in versions file for {package_name}.\nRun:\nvcpkg x-add-version {package_name}\nto add the new port version.",
  "_VersionNotFoundInVersionsFile.comment": "An example of {version} is 1.3.8. An example of {package_name} is zlib.",
  "VersionRejectedDueToBaselineMissing": "{path} was rejected because it uses \"{json_field}\" and does not have a \"builtin-baseline\". This can be fixed by removing the uses of \"{json_field}\" or adding a \"builtin-baseline\".\nSee `vcpkg help versioning` for more information.",
  "_VersionRejectedDueToBaselineMissing.comment": "An example of {path} is /foo/bar. An example of {json_field} is identifer.",
  "VersionRejectedDueToFeatureFlagOff": "{path} was rejected because it uses \"{json_field}\" and the `versions` feature flag is disabled. This can be fixed by removing \"{json_field}\" or enabling the `versions` feature flag.\nSee `vcpkg help versioning` for more information.",
  "_VersionRejectedDueToFeatureFlagOff.comment": "An example of {path} is /foo/bar. An example of {json_field} is identifer.",
  "VersionSchemeMismatch": "The version database declares {version} as {expected}, but {path} declares it as {actual}. Versions must be unique, even if they are declared with different schemes.\nRun:\nvcpkg x-add-version {package_name} --overwrite-version\nto overwrite the scheme declared in the version database with that declared in the port.",
  "_VersionSchemeMismatch.comment": "{expected} and {actual} are version schemes; it here refers to the {version} An example of {version} is 1.3.8. An example of {path} is /foo/bar. An example of {package_name} is zlib.",
  "VersionShaMismatch": "{version} is declared with {expected}, but the local port has a different SHA {actual}.\nPlease update the port's version fields and then run:\nvcpkg x-add-version {package_name}\ngit add versions\ngit commit -m \"Update version database\"\nto add the new version.",
  "_VersionShaMismatch.comment": "{expected} and {actual} are git commit SHAs An example of {version} is 1.3.8. An example of {package_name} is zlib.",
  "VersionShaMissing": "while validating {package_name}, missing Git SHA.\nRun:\ngit add \"{path}\"\ngit commit -m \"wip\"\nvcpkg x-add-version {package_name}\ngit add versions\ngit commit --amend -m \"[{package_name}] Add new port\"\nto commit the new port and create its version file.",
  "_VersionShaMissing.comment": "An example of {package_name} is zlib. An example of {path} is /foo/bar.",
  "VersionSharpMustBeFollowedByPortVersion": "'#' in version text must be followed by a port version",
  "VersionSharpMustBeFollowedByPortVersionNonNegativeInteger": "'#' in version text must be followed by a port version (a non-negative integer)",
  "VersionSpecMismatch": "Failed to load port because versions are inconsistent. The file \"{path}\" contains the version {actual_version}, but the version database indicates that it should be {expected_version}.",
  "_VersionSpecMismatch.comment": "An example of {path} is /foo/bar. An example of {expected_version} is 1.3.8. An example of {actual_version} is 1.3.8.",
  "VersionVerifiedOK": "{version_spec} is correctly in the version database ({git_tree_sha})",
  "_VersionVerifiedOK.comment": "An example of {version_spec} is zlib:x64-windows@1.0.0. An example of {git_tree_sha} is 7cfad47ae9f68b183983090afd6337cd60fd4949.",
  "WaitingForChildrenToExit": "Waiting for child processes to exit...",
  "WaitingToTakeFilesystemLock": "waiting to take filesystem lock on {path}...",
  "_WaitingToTakeFilesystemLock.comment": "An example of {path} is /foo/bar.",
  "WarnOnParseConfig": "Found the following warnings in configuration {path}:",
  "_WarnOnParseConfig.comment": "An example of {path} is /foo/bar.",
  "WarningsTreatedAsErrors": "previous warnings being interpreted as errors",
  "WhileCheckingOutBaseline": "while checking out baseline {commit_sha}",
  "_WhileCheckingOutBaseline.comment": "An example of {commit_sha} is 7cfad47ae9f68b183983090afd6337cd60fd4949.",
  "WhileCheckingOutPortTreeIsh": "while checking out port {package_name} with git tree {git_tree_sha}",
  "_WhileCheckingOutPortTreeIsh.comment": "An example of {package_name} is zlib. An example of {git_tree_sha} is 7cfad47ae9f68b183983090afd6337cd60fd4949.",
  "WhileGettingLocalTreeIshObjectsForPorts": "while getting local treeish objects for ports",
  "WhileLoadingLocalPort": "while attempting to load local port {package_name}",
  "_WhileLoadingLocalPort.comment": "An example of {package_name} is zlib.",
  "WhileLoadingPortFromGitTree": "while trying to load port from: {commit_sha}",
  "_WhileLoadingPortFromGitTree.comment": "An example of {commit_sha} is 7cfad47ae9f68b183983090afd6337cd60fd4949.",
  "WhileLoadingPortVersion": "while loading {version_spec}",
  "_WhileLoadingPortVersion.comment": "An example of {version_spec} is zlib:x64-windows@1.0.0.",
  "WhileLookingForSpec": "while looking for {spec}:",
  "_WhileLookingForSpec.comment": "An example of {spec} is zlib:x64-windows.",
  "WhileParsingVersionsForPort": "while parsing versions for {package_name} from {path}",
  "_WhileParsingVersionsForPort.comment": "An example of {package_name} is zlib. An example of {path} is /foo/bar.",
  "WhileValidatingVersion": "while validating version: {version}",
  "_WhileValidatingVersion.comment": "An example of {version} is 1.3.8.",
  "WindowsOnlyCommand": "This command only supports Windows.",
  "WroteNuGetPkgConfInfo": "Wrote NuGet package config information to {path}",
  "_WroteNuGetPkgConfInfo.comment": "An example of {path} is /foo/bar.",
  "FatalTheRootFolder$CannotBeCreated": "Fatal: The root folder '${p0}' cannot be created",
  "_FatalTheRootFolder$CannotBeCreated.comment": "\n'${p0}' (aka 'this.homeFolder.fsPath') is a parameter of type 'string'\n",
  "FatalTheGlobalConfigurationFile$CannotBeCreated": "Fatal: The global configuration file '${p0}' cannot be created",
  "_FatalTheGlobalConfigurationFile$CannotBeCreated.comment": "\n'${p0}' (aka 'this.globalConfig.fsPath') is a parameter of type 'string'\n",
  "VCPKGCOMMANDWasNotSet": "VCPKG_COMMAND was not set",
  "RunningVcpkgInternallyReturnedANonzeroExitCode$": "Running vcpkg internally returned a nonzero exit code: ${p0}",
  "_RunningVcpkgInternallyReturnedANonzeroExitCode$.comment": "\n'${p0}' is a parameter of type 'number'\n",
  "failedToDownloadFrom$": "failed to download from ${p0}",
  "_failedToDownloadFrom$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "failedToDownload$FromAnySource": "failed to download ${p0} from any source",
  "_failedToDownload$FromAnySource.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "ErrorParsingConditionalDemand$$": "Error parsing conditional demand '${p0}'- ${p1}",
  "_ErrorParsingConditionalDemand$$.comment": "\n'${p0}' is a parameter of type 'string'\n\n'${p1}' (aka 'query.error?.message') is a parameter of type 'string'\n",
  "MissingIdentity$": "Missing identity '${p0}'",
  "_MissingIdentity$.comment": "\n'${p0}' (aka ''info.id'') is a parameter of type 'string'\n",
  "infoidShouldBeOfTypestringFound$": "info.id should be of type 'string', found '${p0}'",
  "_infoidShouldBeOfTypestringFound$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "MissingVersion$": "Missing version '${p0}'",
  "_MissingVersion$.comment": "\n'${p0}' (aka ''info.version'') is a parameter of type 'string'\n",
  "infoversionShouldBeOfTypestringFound$": "info.version should be of type 'string', found '${p0}'",
  "_infoversionShouldBeOfTypestringFound$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "infosummaryShouldBeOfTypestringFound$": "info.summary should be of type 'string', found '${p0}'",
  "_infosummaryShouldBeOfTypestringFound$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "infodescriptionShouldBeOfTypestringFound$": "info.description should be of type 'string', found '${p0}'",
  "_infodescriptionShouldBeOfTypestringFound$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "infooptionsShouldBeASequenceFound$": "info.options should be a sequence, found '${p0}'",
  "_infooptionsShouldBeASequenceFound$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "TheInfoBlockIsDeprecatedForConsistencyWithVcpkgjsonMoveInfoMembersToTheOutside": "The info block is deprecated for consistency with vcpkg.json; move info members to the outside.",
  "idShouldBeOfTypestringFound$": "id should be of type 'string', found '${p0}'",
  "_idShouldBeOfTypestringFound$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "versionShouldBeOfTypestringFound$": "version should be of type 'string', found '${p0}'",
  "_versionShouldBeOfTypestringFound$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "summaryShouldBeOfTypestringFound$": "summary should be of type 'string', found '${p0}'",
  "_summaryShouldBeOfTypestringFound$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "descriptionShouldBeOfTypestringFound$": "description should be of type 'string', found '${p0}'",
  "_descriptionShouldBeOfTypestringFound$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "optionsShouldBeASequenceFound$": "options should be a sequence, found '${p0}'",
  "_optionsShouldBeASequenceFound$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "DuplicateKeysDetectedInManifest$": "Duplicate keys detected in manifest: '${p0}'",
  "_DuplicateKeysDetectedInManifest$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "noPostscriptFileRerunWithTheVcpkgShellFunctionRatherThanExecutable": "no postscript file: rerun with the vcpkg shell function rather than executable",
  "DuplicateDefine$DuringActivationNewValueWillReplaceOld": "Duplicate define ${p0} during activation. New value will replace old.",
  "_DuplicateDefine$DuringActivationNewValueWillReplaceOld.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "DuplicateToolDeclared$DuringActivationNewValueWillReplaceOld": "Duplicate tool declared ${p0} during activation.  New value will replace old.",
  "_DuplicateToolDeclared$DuringActivationNewValueWillReplaceOld.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "DuplicateAliasDeclared$DuringActivationNewValueWillReplaceOld": "Duplicate alias declared ${p0} during activation.  New value will replace old.",
  "_DuplicateAliasDeclared$DuringActivationNewValueWillReplaceOld.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "DuplicateLocationDeclared$DuringActivationNewValueWillReplaceOld": "Duplicate location declared ${p0} during activation. New value will replace old.",
  "_DuplicateLocationDeclared$DuringActivationNewValueWillReplaceOld.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "CircularVariableReferenceDetected$": "Circular variable reference detected: ${p0}",
  "_CircularVariableReferenceDetected$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "CircularVariableReferenceDetected$$": "Circular variable reference detected: ${p0} - ${p1}",
  "_CircularVariableReferenceDetected$$.comment": "\n'${p0}' is a parameter of type 'string'\n\n'${p1}' is a parameter of type 'string'\n",
  "VariableReferenceFound$$$ThatIsReferencingAnUnknownBaseObject": "Variable reference found '$${p0}.${p1}' that is referencing an unknown base object.",
  "_VariableReferenceFound$$$ThatIsReferencingAnUnknownBaseObject.comment": "\n'${p0}' is a parameter of type 'string'\n\n'${p1}' is a parameter of type 'string'\n",
  "UnresolvedVariableReferenceFound$$$DuringVariableSubstitution": "Unresolved variable reference found ($${p0}.${p1}) during variable substitution.",
  "_UnresolvedVariableReferenceFound$$$DuringVariableSubstitution.comment": "\n'${p0}' is a parameter of type 'string'\n\n'${p1}' is a parameter of type 'string'\n",
  "InvalidPathDoesNotExist$": "Invalid path - does not exist: ${p0}",
  "_InvalidPathDoesNotExist$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "Activating$": "Activating: ${p0}",
  "_Activating$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "Deactivating$": "Deactivating: ${p0}",
  "_Deactivating$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "nothingIsActivatedNoChangesHaveBeenMade": "nothing is activated, no changes have been made",
  "InvalidArtifactId$": "Invalid artifact id '${p0}'",
  "_InvalidArtifactId$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "UnknownInstallerType$": "Unknown installer type ${p0}",
  "_UnknownInstallerType$.comment": "\n'${p0}' (aka 'installInfo!.installerKind') is a parameter of type 'string'\n",
  "WhileResolvingDependenciesOf$$In$CouldNotBeResolvedToARegistry": "While resolving dependencies of ${p0}, ${p1} in ${p2} could not be resolved to a registry.",
  "_WhileResolvingDependenciesOf$$In$CouldNotBeResolvedToARegistry.comment": "\n'${p0}' is a parameter of type 'string'\n\n'${p1}' is a parameter of type 'string | undefined'\n\n'${p2}' is a parameter of type 'string'\n",
  "WhileResolvingDependenciesOfTheProjectFile$$DidNotSpecifyARegistry": "While resolving dependencies of the project file ${p0}, ${p1} did not specify a registry.",
  "_WhileResolvingDependenciesOfTheProjectFile$$DidNotSpecifyARegistry.comment": "\n'${p0}' is a parameter of type 'string'\n\n'${p1}' is a parameter of type 'string'\n",
  "UnableToResolveDependency$In$": "Unable to resolve dependency ${p0} in ${p1}.",
  "_UnableToResolveDependency$In$.comment": "\n'${p0}' is a parameter of type 'string'\n\n'${p1}' is a parameter of type 'string'\n",
  "Artifact": "Artifact",
  "Version": "Version",
  "Status": "Status",
  "Dependency": "Dependency",
  "Summary": "Summary",
  "progressUnknown": "(progress unknown)",
  "verifying": "verifying",
  "downloading$$": "downloading ${p0} -> ${p1}",
  "_downloading$$.comment": "\n'${p0}' is a parameter of type 'string'\n\n'${p1}' is a parameter of type 'string'\n",
  "unpacking$": "unpacking ${p0}",
  "_unpacking$.comment": "\n'${p0}' (aka 'archiveUri.fsPath') is a parameter of type 'string'\n",
  "Installing$": "Installing ${p0}...",
  "_Installing$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "$AlreadyInstalled": "${p0} already installed.",
  "_$AlreadyInstalled.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "Downloading$": "Downloading ${p0}...",
  "_Downloading$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "Unpacking$": "Unpacking ${p0}...",
  "_Unpacking$.comment": "\n'${p0}' (aka 'archiveUri.fsPath') is a parameter of type 'string'\n",
  "ErrorInstalling$$": "Error installing ${p0} - ${p1}",
  "_ErrorInstalling$$.comment": "\n'${p0}' is a parameter of type 'string'\n\n'${p1}' is a parameter of type 'any'\n",
  "error": "error:",
  "warning": "warning:",
  "ExpectedASingleValueFor$FoundMultiple": "Expected a single value for ${p0} - found multiple",
  "_ExpectedASingleValueFor$FoundMultiple.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "ExpectedASingleValueFor$": "Expected a single value for '--${p0}'.",
  "_ExpectedASingleValueFor$.comment": "\n'${p0}' (aka 'this.switch') is a parameter of type 'string'\n",
  "Assuming$IsCorrectSupplyAHashInTheArtifactMetadataToSuppressThisMessage": "Assuming '${p0}' is correct; supply a hash in the artifact metadata to suppress this message.",
  "_Assuming$IsCorrectSupplyAHashInTheArtifactMetadataToSuppressThisMessage.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "DownloadedFile$DidNotHaveTheCorrectHash$$": "Downloaded file '${p0}' did not have the correct hash (${p1}: ${p2}) ",
  "_DownloadedFile$DidNotHaveTheCorrectHash$$.comment": "\n'${p0}' (aka 'outputFile.fsPath') is a parameter of type 'string'\n\n'${p1}' (aka 'options.algorithm') is a parameter of type 'string'\n\n'${p2}' (aka 'options.value') is a parameter of type 'string'\n",
  "packageReference$IsNotAValidNugetPackageReferencenameversion": "package reference '${p0}' is not a valid nuget package reference ({name}/{version})",
  "_packageReference$IsNotAValidNugetPackageReferencenameversion.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "statsMayNotBeUndefined": "stats may not be undefined",
  "CannotRenameFilesAcrossFilesystems": "Cannot rename files across filesystems",
  "CopyFailedSource$IsAFolderTarget$IsAFile": "Copy failed: source (${p0}) is a folder, target (${p1}) is a file",
  "_CopyFailedSource$IsAFolderTarget$IsAFile.comment": "\n'${p0}' (aka 'source.fsPath') is a parameter of type 'string'\n\n'${p1}' (aka 'target.fsPath') is a parameter of type 'string'\n",
  "UriMayNotBeEmpty": "Uri may not be empty",
  "scheme$AlreadyRegistered": "scheme '${p0}' already registered",
  "_scheme$AlreadyRegistered.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "uri$HasNoScheme": "uri ${p0} has no scheme",
  "_uri$HasNoScheme.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "scheme$HasNoFilesystemAssociatedWithIt": "scheme ${p0} has no filesystem associated with it",
  "_scheme$HasNoFilesystemAssociatedWithIt.comment": "\n'${p0}' is a parameter of type 'string | undefined'\n",
  "mayNotRenameAcrossFilesystems": "may not rename across filesystems",
  "CouldNotActivateEspidfPythonWasNotFound": "Could not activate esp-idf: python was not found.",
  "GitIsNotInstalled": "Git is not installed",
  "InitializingRepositoryFolder": "Initializing repository folder",
  "FailedToInitializeGitRepositoryFolder$": "Failed to initialize git repository folder (${p0})",
  "_FailedToInitializeGitRepositoryFolder$.comment": "\n'${p0}' (aka 'targetDirectory.fsPath') is a parameter of type 'string'\n",
  "AddingRemote$ToGitRepositoryFolder": "Adding remote ${p0} to git repository folder",
  "_AddingRemote$ToGitRepositoryFolder.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "FailedToSetGitOrigin$InFolder$": "Failed to set git origin (${p0}) in folder (${p1})",
  "_FailedToSetGitOrigin$InFolder$.comment": "\n'${p0}' is a parameter of type 'string'\n\n'${p1}' (aka 'targetDirectory.fsPath') is a parameter of type 'string'\n",
  "FetchingRemote$ForGitRepositoryFolder": "Fetching remote ${p0} for git repository folder",
  "_FetchingRemote$ForGitRepositoryFolder.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "UnableToFetchGitDataFor$InFolder$": "Unable to fetch git data for (${p0}) in folder (${p1})",
  "_UnableToFetchGitDataFor$InFolder$.comment": "\n'${p0}' is a parameter of type 'string'\n\n'${p1}' (aka 'targetDirectory.fsPath') is a parameter of type 'string'\n",
  "CheckingOutCommit$For$ToGitRepositoryFolder": "Checking out commit ${p0} for ${p1} to git repository folder",
  "_CheckingOutCommit$For$ToGitRepositoryFolder.comment": "\n'${p0}' (aka 'install.commit') is a parameter of type 'string'\n\n'${p1}' is a parameter of type 'string'\n",
  "UnableToCheckoutDataFor$InFolder$": "Unable to checkout data for (${p0}) in folder (${p1})",
  "_UnableToCheckoutDataFor$InFolder$.comment": "\n'${p0}' is a parameter of type 'string'\n\n'${p1}' (aka 'targetDirectory.fsPath') is a parameter of type 'string'\n",
  "UpdatingSubmodulesForRepository$InTheGitRepositoryFolder": "Updating submodules for repository ${p0} in the git repository folder",
  "_UpdatingSubmodulesForRepository$InTheGitRepositoryFolder.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "UnableToSetSubmoduleShallowDataFor$InFolder$": "Unable to set submodule shallow data for (${p0}) in folder (${p1})",
  "_UnableToSetSubmoduleShallowDataFor$InFolder$.comment": "\n'${p0}' is a parameter of type 'string'\n\n'${p1}' (aka 'targetDirectory.fsPath') is a parameter of type 'string'\n",
  "UnableUpdateSubmodulesFor$InFolder$": "Unable update submodules for (${p0}) in folder (${p1})",
  "_UnableUpdateSubmodulesFor$InFolder$.comment": "\n'${p0}' is a parameter of type 'string'\n\n'${p1}' (aka 'targetDirectory.fsPath') is a parameter of type 'string'\n",
  "ExpectedCommaFound$": "Expected comma, found ${p0}",
  "_ExpectedCommaFound$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "ExpectedOneOfNumberBooleanIdentifierStringFoundToken$": "Expected one of {Number, Boolean, Identifier, String}, found token ${p0}",
  "_ExpectedOneOfNumberBooleanIdentifierStringFoundToken$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "ExpressionSpecifiedNOTTwice": "Expression specified NOT twice",
  "ExpectedCloseParenthesisForExpressionFound$": "Expected close parenthesis for expression, found ${p0}",
  "_ExpectedCloseParenthesisForExpressionFound$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "ExpectedExpressionFound$": "Expected expression, found ${p0}",
  "_ExpectedExpressionFound$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "ParseErrorDigitExpected": "ParseError: Digit expected (0-9)",
  "ParseErrorHexDigitExpectedFf": "ParseError: Hex Digit expected (0-F,0-f)",
  "ParseErrorBinaryDigitExpected": "ParseError: Binary Digit expected (0,1)",
  "UnexpectedEndOfFileWhileSearchingFor$": "Unexpected end of file while searching for '${p0}'",
  "_UnexpectedEndOfFileWhileSearchingFor$.comment": "\n'${p0}' is a parameter of type 'string | undefined'\n",
  "InvalidEscapeSequence": "Invalid escape sequence",
  "FailedToDeserializeIndex$": "Failed to deserialize index ${p0}",
  "_FailedToDeserializeIndex$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "$MatchedMoreThanOneResult$": "'${p0}' matched more than one result (${p1}).",
  "_$MatchedMoreThanOneResult$.comment": "\n'${p0}' is a parameter of type 'string'\n\n'${p1}' is a parameter of type 'string'\n",
  "UnsupportedRegistryScheme$": "Unsupported registry scheme '${p0}'",
  "_UnsupportedRegistryScheme$.comment": "\n'${p0}' (aka 'locationUri.scheme') is a parameter of type 'string'\n",
  "TriedToAdd$As$But$IsAlready$": "Tried to add ${p0} as ${p1}, but ${p2} is already ${p3}.",
  "_TriedToAdd$As$But$IsAlready$.comment": "\n'${p0}' is a parameter of type 'string'\n\n'${p1}' is a parameter of type 'string'\n\n'${p2}' is a parameter of type 'string'\n\n'${p3}' is a parameter of type 'string | undefined'\n",
  "UnknownRegistry$in$TheFollowingAreKnown$": "Unknown registry ${p0} (in ${p1}). The following are known: ${p2}",
  "_UnknownRegistry$in$TheFollowingAreKnown$.comment": "\n'${p0}' is a parameter of type 'string | undefined'\n\n'${p1}' is a parameter of type 'string'\n\n'${p2}' is a parameter of type 'string'\n",
  "UpdatingRegistryDataFrom$": "Updating registry data from ${p0}",
  "_UpdatingRegistryDataFrom$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "$MustBeAString": "${p0} must be a string",
  "_$MustBeAString.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "$MustBeABool": "${p0} must be a bool",
  "_$MustBeABool.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "$MustBeAnArrayOfStringsOrUnset": "${p0} must be an array of strings, or unset",
  "_$MustBeAnArrayOfStringsOrUnset.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "FoundAMismatched$In$ForALiteral$Use$$Instead": "Found a mismatched ${p0} in '${p1}'. For a literal ${p2}, use ${p3}${p4} instead.",
  "_FoundAMismatched$In$ForALiteral$Use$$Instead.comment": "\n'${p0}' is a parameter of type 'string'\n\n'${p1}' is a parameter of type 'string'\n\n'${p2}' is a parameter of type 'string'\n\n'${p3}' is a parameter of type 'string'\n\n'${p4}' is a parameter of type 'string'\n",
  "CouldNotFindAValueFor$In$ToWriteTheLiteralValueUse$Instead": "Could not find a value for {${p0}} in '${p1}'. To write the literal value, use '{{${p2}}}' instead.",
  "_CouldNotFindAValueFor$In$ToWriteTheLiteralValueUse$Instead.comment": "\n'${p0}' is a parameter of type 'string'\n\n'${p1}' is a parameter of type 'string'\n\n'${p2}' is a parameter of type 'string'\n",
  "MatchedMoreThanOneInstallBlock$": "Matched more than one install block [${p0}]",
  "_MatchedMoreThanOneInstallBlock$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "UnableToFindProjectInFolderorParentFoldersFor$": "Unable to find project in folder (or parent folders) for ${p0}",
  "_UnableToFindProjectInFolderorParentFoldersFor$.comment": "\n'${p0}' (aka 'session.currentDirectory.fsPath') is a parameter of type 'string'\n",
  "UnableToAcquireProject": "Unable to acquire project",
  "NoArtifactsSpecified": "No artifacts specified",
  "NoArtifactsAreAcquired": "No artifacts are acquired",
  "AllArtifactsAreAlreadyInstalled": "All artifacts are already installed",
  "$ArtifactsInstalledSuccessfully": "${p0} artifacts installed successfully",
  "_$ArtifactsInstalledSuccessfully.comment": "\n'${p0}' is a parameter of type 'number'\n",
  "InstallationFailedStopping": "Installation failed -- stopping",
  "MultipleArtifactsSpecifiedButNotAnEqualNumberOf$Switches": "Multiple artifacts specified, but not an equal number of ${p0} switches",
  "_MultipleArtifactsSpecifiedButNotAnEqualNumberOf$Switches.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "TriedToAddAnArtifact$$ButCouldNotDetermineTheRegistryToUse": "Tried to add an artifact [${p0}]:${p1} but could not determine the registry to use.",
  "_TriedToAddAnArtifact$$ButCouldNotDetermineTheRegistryToUse.comment": "\n'${p0}' is a parameter of type 'string'\n\n'${p1}' (aka 'artifact.id') is a parameter of type 'string'\n",
  "TriedToAddRegistry$As$ButItWasAlready$PleaseAdd$ToThisProjectManuallyAndReattempt": "Tried to add registry ${p0} as ${p1}, but it was already ${p2}. Please add ${p3} to this project manually and reattempt.",
  "_TriedToAddRegistry$As$ButItWasAlready$PleaseAdd$ToThisProjectManuallyAndReattempt.comment": "\n'${p0}' is a parameter of type 'string | undefined'\n\n'${p1}' is a parameter of type 'string'\n\n'${p2}' is a parameter of type 'string'\n\n'${p3}' is a parameter of type 'string'\n",
  "RunvcpkgActivateToApplyToTheCurrentTerminal": "Run \\`vcpkg activate\\` to apply to the current terminal",
  "DownloadsFolderCleared$": "Downloads folder cleared (${p0}) ",
  "_DownloadsFolderCleared$.comment": "\n'${p0}' (aka 'session.downloads.fsPath') is a parameter of type 'string'\n",
  "InstalledArtifactFolderCleared$": "Installed Artifact folder cleared (${p0}) ",
  "_InstalledArtifactFolderCleared$.comment": "\n'${p0}' (aka 'session.installFolder.fsPath') is a parameter of type 'string'\n",
  "CacheFolderCleared$": "Cache folder cleared (${p0}) ",
  "_CacheFolderCleared$.comment": "\n'${p0}' (aka 'session.downloads.fsPath') is a parameter of type 'string'\n",
  "DeletingArtifact$From$": "Deleting artifact ${p0} from ${p1}",
  "_DeletingArtifact$From$.comment": "\n'${p0}' is a parameter of type 'string'\n\n'${p1}' (aka 'folder.fsPath') is a parameter of type 'string'\n",
  "NoArtifactsFoundMatchingCriteria$": "No artifacts found matching criteria: ${p0}",
  "_NoArtifactsFoundMatchingCriteria$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "UnableToActivateProject": "Unable to activate project",
  "RegeneratingIndexFor$": "Regenerating index for ${p0}",
  "_RegeneratingIndexFor$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "RegenerationCompleteIndexContains$MetadataFiles": "Regeneration complete. Index contains ${p0} metadata files",
  "_RegenerationCompleteIndexContains$MetadataFiles.comment": "\n'${p0}' is a parameter of type 'number'\n",
  "Registry$ContainsNoArtifacts": "Registry: '${p0}' contains no artifacts.",
  "_Registry$ContainsNoArtifacts.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "error$": "error ${p0}: ",
  "_error$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "Removing$FromProjectManifest": "Removing ${p0} from project manifest",
  "_Removing$FromProjectManifest.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "unableToFindArtifact$InTheProjectManifest": "unable to find artifact ${p0} in the project manifest",
  "_unableToFindArtifact$InTheProjectManifest.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "Updated$ItContains$MetadataFiles": "Updated ${p0}. It contains ${p1} metadata files.",
  "_Updated$ItContains$MetadataFiles.comment": "\n'${p0}' is a parameter of type 'string'\n\n'${p1}' is a parameter of type 'string'\n",
  "UnableToDownload$": "Unable to download ${p0}.",
  "_UnableToDownload$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "$CouldNotBeUpdatedItCouldBeMalformed": "${p0} could not be updated; it could be malformed.",
  "_$CouldNotBeUpdatedItCouldBeMalformed.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "TheXupdateregistryCommandDownloadsNewRegistryInformationAndThusCannotBeUsedWithLocalRegistriesDidYouMeanXregenerate$": "The x-update-registry command downloads new registry information and thus cannot be used with local registries. Did you mean x-regenerate ${p0}?",
  "_TheXupdateregistryCommandDownloadsNewRegistryInformationAndThusCannotBeUsedWithLocalRegistriesDidYouMeanXregenerate$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "UnableToFindRegistry$": "Unable to find registry ${p0}.",
  "_UnableToFindRegistry$.comment": "\n'${p0}' is a parameter of type 'string'\n",
  "NoArtifactsAreBeingAcquired": "No artifacts are being acquired",
  "UnableToFindProjectEnvironment$": "Unable to find project environment ${p0}",
  "_UnableToFindProjectEnvironment$.comment": "\n'${p0}' is a parameter of type 'string'\n"
}
