{
  "AddArtifactOnlyOne": "\"{command_line}\" может добавлять только один артефакт за раз.",
  "AddCommandFirstArg": "Первым добавляемым параметром должен быть \"артефакт\" или \"порт\".",
  "AddFirstArgument": "Первым аргументом для \"{command_line}\" должен быть 'artifact' или 'port'.",
  "AddPortRequiresManifest": "\"{command_line}\" требуется активный файл манифеста.",
  "AddPortSucceeded": "Порты успешно добавлены в файл vcpkg.json.",
  "AddRecurseOption": "Если вы действительно хотите удалить их, выполните команду с параметром --recurse.",
  "AddTripletExpressionNotAllowed": "тройные выражения здесь не допускаются. Вы можете изменить `{package_name}:{triplet}` на `{package_name}`.",
  "AddVersionAddedVersionToFile": "добавлена версия {version} в {path}",
  "AddVersionCommitChangesReminder": "Вы не забыли зафиксировать изменения?",
  "AddVersionCommitResultReminder": "Не забудьте зафиксировать результат!",
  "AddVersionDetectLocalChangesError": "пропуск обнаружения локальных изменений из-за непредвиденного формата в выходных данных состояния git",
  "AddVersionFileNotFound": "не удалось найти необходимый файл {path}",
  "AddVersionFormatPortSuggestion": "Выполните \"{command_line}\", чтобы форматировать файл",
  "AddVersionIgnoringOptionAll": "пропуск --{option}, так как указан аргумент имени порта",
  "AddVersionLoadPortFailed": "не удалось загрузить порт {package_name}",
  "AddVersionNewFile": "(новый файл)",
  "AddVersionNewShaIs": "новый SHA: {value}",
  "AddVersionNoFilesUpdated": "Файлы не были обновлены",
  "AddVersionNoFilesUpdatedForPort": "Для {package_name} файлы не были обновлены",
  "AddVersionNoGitSha": "не удалось получить SHA для порта {package_name}",
  "AddVersionOldShaIs": "старый SHA: {value}",
  "AddVersionOverwriteOptionSuggestion": "Чтобы обойти эту проверку, используйте --{option}",
  "AddVersionPortDoesNotExist": "{package_name} не существует",
  "AddVersionPortFilesShaChanged": "зарегистрированные файлы для {package_name} изменились, но версия не обновлена",
  "AddVersionPortFilesShaUnchanged": "зарегистрированные файлы для {package_name} не изменялись с версии {version}",
  "AddVersionPortHasImproperFormat": "Неверный формат {package_name}",
  "AddVersionSuggestNewVersionScheme": "Используйте схему \"{new_scheme}\" вместо \"{old_scheme}\" в порте \"{package_name}\".\nЧтобы отключить эту проверку, используйте --{option}.",
  "AddVersionUnableToParseVersionsFile": "не удалось проанализировать файл версий {path}",
  "AddVersionUncommittedChanges": "для {package_name} есть незафиксированные изменения",
  "AddVersionUpdateVersionReminder": "Вы не забыли обновить версию или версию порта?",
  "AddVersionUseOptionAll": "Чтобы одновременно обновить все версии портов, для {command_name} без аргументов требуется передача параметра --{option}",
  "AddVersionVersionAlreadyInFile": "версия {version} уже находится в {path}",
  "AddVersionVersionIs": "версия: {version}",
  "AddingCompletionEntry": "Добавление записи завершения vcpkg в {path}.",
  "AdditionalPackagesToExport": "Для завершения этой операции необходимо экспортировать дополнительные пакеты.",
  "AdditionalPackagesToRemove": "Требуется удалить дополнительные пакеты (*) для завершения этой операции.",
  "AllFormatArgsRawArgument": "строка формата \"{value}\" содержит необработанный аргумент формата",
  "AllFormatArgsUnbalancedBraces": "несбалансированная фигурная скобка в строке формата \"{value}\"",
  "AllPackagesAreUpdated": "Все установленные пакеты обновлены с локальным профилем.",
  "AlreadyInstalled": "Уже установлено: {spec}",
  "AlreadyInstalledNotHead": "{spec} уже установлено -- сборка не выполняется из HEAD",
  "AmbiguousConfigDeleteConfigFile": "Неоднозначная конфигурация vcpkg, указанная как в манифесте, так и в файле конфигурации.\n-- Удалить {path} файла конфигурации",
  "AndroidHomeDirMissingProps": "В каталоге {env_var} отсутствует source.properties: {path}",
  "AnotherInstallationInProgress": "На машине выполняется другая установка, которая находится в спящем режиме в течение 6 секунд, прежде чем повторить попытку.",
  "AppliedUserIntegration": "Применена общепользовательская интеграция для этого корня vcpkg.",
  "ArtifactsOptionIncompatibility": "--{option} не влияет на поиск артефакта.",
  "AssetSourcesArg": "Добавление источников для кэширования ресурсов. См. раздел 'vcpkg help assetcaching'.",
  "AttemptingToFetchPackagesFromVendor": "Попытка получить {count} пакетов от {vendor}",
  "AttemptingToSetBuiltInBaseline": "попытка задать встроенный базовый план в vcpkg.json при переопределения default-registry в vcpkg-configuration.json.\nБудет использоваться default-registry из vcpkg-configuration.json.",
  "AuthenticationMayRequireManualAction": "Один или несколько поставщиков учетных данных {vendor} запросили действие вручную. Добавьте двоичный источник «интерактивный», чтобы обеспечить интерактивность.",
  "AutoSettingEnvVar": "-- Автоматическая установка переменных среды {env_var} в \"{url}\".",
  "AutomaticLinkingForMSBuildProjects": "Все проекты MSBuild C++ теперь могут #include любые установленные библиотеки. Связывание будет выполнено автоматически. Установка новых библиотек сделает их мгновенно доступными.",
  "AvailableArchitectureTriplets": "Доступные триплеты архитектуры:",
  "AvailableHelpTopics": "Доступные разделы справки:",
  "BaselineConflict": "Указание vcpkg-configuration.default-registry в файле манифеста конфликтует со встроенным базовым планом.\nУдалите один из этих конфликтующих параметров.",
  "BaselineFileNoDefaultField": "Базовый файл при фиксации {commit_sha} был недопустимым (нет поля \"по умолчанию\").",
  "BaselineMissingDefault": "Файл baseline.json из фиксации \"{commit_sha}\" в репозитории {url} был недопустимым (не содержал поля \"по умолчанию\").",
  "BinarySourcesArg": "Добавьте источники для бинарного кэширования. См. \"vcpkg help binarycaching\".",
  "BinaryWithInvalidArchitecture": "{path}\n Expected: {expected}, but was {actual}",
  "BothYesAndNoOptionSpecifiedError": "не может одновременно указывать параметры --no-{option} и --{option}.",
  "BuildAlreadyInstalled": "{spec} — уже установлено. Удалите {spec}, прежде чем выполнять сборку.",
  "BuildDependenciesMissing": "Для команды сборки необходимо установить все зависимости.\nОтсутствуют следующие зависимости:",
  "BuildResultBuildFailed": "BUILD_FAILED",
  "BuildResultCacheMissing": "CACHE_MISSING",
  "BuildResultCascadeDueToMissingDependencies": "CASCADED_DUE_TO_MISSING_DEPENDENCIES",
  "BuildResultDownloaded": "СКАЧАНО",
  "BuildResultExcluded": "ИСКЛЮЧЕНО",
  "BuildResultFileConflicts": "FILE_CONFLICTS",
  "BuildResultPostBuildChecksFailed": "POST_BUILD_CHECKS_FAILED",
  "BuildResultRemoved": "УДАЛЕНО",
  "BuildResultSucceeded": "УСПЕШНО",
  "BuildResultSummaryHeader": "СВОДКА ПО {triplet}",
  "BuildResultSummaryLine": "{build_result}: {count}",
  "BuildTreesRootDir": "(Экспериментально) Укажите корневой каталог buildtrees.",
  "BuildTroubleshootingMessage1": "Используйте последние файлы портов с \"git pull\" и \"vcpkg update\".\nЗатем проверьте наличие известных проблем в:",
  "BuildTroubleshootingMessage2": "Вы можете отправить новую проблему в:",
  "BuildTroubleshootingMessage3": "Добавьте \"Ошибка сборки [{package_name}]\" в название отчета об ошибке, следующие сведения о версии в описании ошибки и вложите любые релевантные журналы ошибок из раздела выше.",
  "BuildTroubleshootingMessage4": "Используйте предварительно заполненный шаблон из {path} при отправке сообщения о проблеме.",
  "BuildingFromHead": "Сборка {spec} из HEAD...",
  "BuildingPackage": "Сборка {spec}...",
  "BuildingPackageFailed": "сбой {spec} при построении: {build_result}",
  "BuildingPackageFailedDueToMissingDeps": "из-за следующих отсутствующих зависимостей:",
  "BuiltInTriplets": "Встроенные триплеты vcpkg:",
  "BuiltWithIncorrectArchitecture": "The following files were built for an incorrect architecture:",
  "CISettingsExclude": "Comma-separated list of ports to skip",
  "CISettingsOptCIBase": "Path to the ci.baseline.txt file. Used to skip ports and detect regressions.",
  "CISettingsOptExclude": "Comma separated list of ports to skip",
  "CISettingsOptFailureLogs": "Directory to which failure logs will be copied",
  "CISettingsOptHostExclude": "Comma separated list of ports to skip for the host triplet",
  "CISettingsOptOutputHashes": "File to output all determined package hashes",
  "CISettingsOptParentHashes": "File to read package hashes for a parent CI state, to reduce the set of changed packages",
  "CISettingsOptSkippedCascadeCount": "Asserts that the number of --exclude and supports skips exactly equal this number",
  "CISettingsOptXUnit": "File to output results in XUnit format (internal)",
  "CISettingsVerifyGitTree": "Verify that each git tree object matches its declared version (this is very slow)",
  "CISettingsVerifyVersion": "Print result for each port instead of just errors.",
  "CISwitchOptAllowUnexpectedPassing": "Indicates that 'Passing, remove from fail list' results should not be emitted.",
  "CISwitchOptDryRun": "Print out plan without execution",
  "CISwitchOptRandomize": "Randomize the install order",
  "CISwitchOptSkipFailures": "Indicates that ports marked `=fail` in ci.baseline.txt should be skipped.",
  "CISwitchOptXUnitAll": "Report also unchanged ports to the XUnit output (internal)",
  "CMakeTargetsUsage": "{package_name} предоставляет целевые объекты CMake:",
  "CMakeTargetsUsageHeuristicMessage": "# этот элемент создан эвристически и может быть неверным",
  "CMakeToolChainFile": "В проектах CMake следует использовать: \"-DCMAKE_TOOLCHAIN_FILE={path}\"",
  "CMakeUsingExportedLibs": "Чтобы использовать экспортированные библиотеки в проектах CMake, добавьте {value} в командную строку CMake.",
  "ChecksFailedCheck": "сбой vcpkg; дополнительные сведения недоступны.",
  "ChecksUnreachableCode": "достигнут недостижимый код",
  "ChecksUpdateVcpkg": "обновление vcpkg путем повторного запуска bootstrap-vcpkg может устранить этот сбой.",
  "CiBaselineAllowUnexpectedPassingRequiresBaseline": "--allow-unexpected-passing-passing можно использовать, только если указан базовый план с помощью --ci-baseline.",
  "CiBaselineDisallowedCascade": "Регрессия: значение {spec} является каскадным, но необходима его передача ({path}).",
  "CiBaselineRegression": "РЕГРЕССИЯ: {spec} с ошибкой {build_result}. Если требуется, добавьте {spec}=fail в {path}.",
  "CiBaselineRegressionHeader": "РЕГРЕССИИ:",
  "CiBaselineUnexpectedPass": "ПЕРЕДАЧА, УДАЛЕНИЕ ИЗ СПИСКА СБОЕВ: {spec} ({path}).",
  "ClearingContents": "Очистка содержимого {path}",
  "CmakeTargetsExcluded": "примечание. Дополнительные целевые объекты ({count}) не отображаются.",
  "CmdAddVersionOptAll": "Process versions for all ports.",
  "CmdAddVersionOptOverwriteVersion": "Overwrite `git-tree` of an existing version.",
  "CmdAddVersionOptSkipFormatChk": "Skips the formatting check of vcpkg.json files.",
  "CmdAddVersionOptSkipVersionFormatChk": "Skips the version format check.",
  "CmdAddVersionOptVerbose": "Print success messages instead of just errors.",
  "CmdContactOptSurvey": "Launch default browser to the current vcpkg survey",
  "CmdDependInfoOptDGML": "Creates graph on basis of dgml",
  "CmdDependInfoOptDepth": "Show recursion depth in output",
  "CmdDependInfoOptDot": "Creates graph on basis of dot",
  "CmdDependInfoOptMaxRecurse": "Set max recursion depth, a value of -1 indicates no limit",
  "CmdDependInfoOptSort": "Set sort order for the list of dependencies, accepted values are: lexicographical, topological (default), x-tree, reverse",
  "CmdEditOptAll": "Open editor into the port as well as the port-specific buildtree subfolder",
  "CmdEditOptBuildTrees": "Open editor into the port-specific buildtree subfolder",
  "CmdEnvOptions": "Add installed {path} to {env_var}",
  "CmdExportOpt7Zip": "Export to a 7zip (.7z) file",
  "CmdExportOptChocolatey": "Export a Chocolatey package (experimental feature)",
  "CmdExportOptDebug": "Enable prefab debug",
  "CmdExportOptDryRun": "Do not actually export.",
  "CmdExportOptIFW": "Export to an IFW-based installer",
  "CmdExportOptInstalled": "Export all installed packages",
  "CmdExportOptMaven": "Enable Maven",
  "CmdExportOptNuget": "Export a NuGet package",
  "CmdExportOptPrefab": "Export to Prefab format",
  "CmdExportOptRaw": "Export to an uncompressed directory",
  "CmdExportOptZip": "Export to a zip file",
  "CmdExportSettingChocolateyMaint": "Specify the maintainer for the exported Chocolatey package (experimental feature)",
  "CmdExportSettingChocolateyVersion": "Specify the version suffix to add for the exported Chocolatey package (experimental feature)",
  "CmdExportSettingConfigFile": "Specify the temporary file path for the installer configuration",
  "CmdExportSettingInstallerPath": "Specify the file path for the exported installer",
  "CmdExportSettingNugetDesc": "Specify a description for the exported NuGet package",
  "CmdExportSettingNugetID": "Specify the id for the exported NuGet package (overrides --output)",
  "CmdExportSettingNugetVersion": "Specify the version for the exported NuGet package",
  "CmdExportSettingOutput": "Specify the output name (used to construct filename)",
  "CmdExportSettingOutputDir": "Specify the output directory for produced artifacts",
  "CmdExportSettingPkgDir": "Specify the temporary directory path for the repacked packages",
  "CmdExportSettingPrefabArtifactID": "Artifact Id is the name of the project according Maven specifications",
  "CmdExportSettingPrefabGroupID": "GroupId uniquely identifies your project according Maven specifications",
  "CmdExportSettingPrefabVersion": "Version is the name of the project according Maven specifications",
  "CmdExportSettingRepoDir": "Specify the directory path for the exported repository",
  "CmdExportSettingRepoURL": "Specify the remote repository URL for the online installer",
  "CmdExportSettingSDKMinVersion": "Android minimum supported SDK version",
  "CmdExportSettingSDKTargetVersion": "Android target sdk version",
  "CmdFetchOptXStderrStatus": "Direct status/downloading messages to stderr rather than stdout. (Errors/failures still go to stdout)",
  "CmdFormatManifestOptAll": "Format all ports' manifest files.",
  "CmdFormatManifestOptConvertControl": "Convert CONTROL files to manifest files.",
  "CmdGenerateMessageMapOptNoOutputComments": "When generating the message map, exclude comments (useful for generating the English localization file)",
  "CmdGenerateMessageMapOptOutputComments": "When generating the message map, include comments (the default)",
  "CmdInfoOptInstalled": "(experimental) Report on installed packages instead of available",
  "CmdInfoOptTransitive": "(experimental) Also report on dependencies of installed packages",
  "CmdNewOptApplication": "Create an application manifest (don't require name or version).",
  "CmdNewOptSingleFile": "Embed vcpkg-configuration.json into vcpkg.json.",
  "CmdNewOptVersionDate": "Interpret --version as an ISO 8601 date. (YYYY-MM-DD)",
  "CmdNewOptVersionRelaxed": "Interpret --version as a relaxed-numeric version. (Nonnegative numbers separated by dots)",
  "CmdNewOptVersionString": "Interpret --version as a string with no ordering behavior.",
  "CmdNewSettingName": "Name for the new manifest.",
  "CmdNewSettingVersion": "Version for the new manifest.",
  "CmdRegenerateOptDryRun": "does not actually perform the action, shows only what would be done",
  "CmdRegenerateOptForce": "proceeds with the (potentially dangerous) action without confirmation",
  "CmdRegenerateOptNormalize": "apply any deprecation fixups",
  "CmdRemoveOptDryRun": "Print the packages to be removed, but do not remove them",
  "CmdRemoveOptOutdated": "Select all packages with versions that do not match the portfiles",
  "CmdRemoveOptRecurse": "Allow removal of packages not explicitly specified on the command line",
  "CmdSetInstalledOptDryRun": "Do not actually build or install",
  "CmdSetInstalledOptNoUsage": "Don't print CMake usage information after install.",
  "CmdSetInstalledOptWritePkgConfig": "Writes out a NuGet packages.config-formatted file for use with external binary caching.\nSee `vcpkg help binarycaching` for more information.",
  "CmdUpdateBaselineOptDryRun": "Print out plan without execution",
  "CmdUpdateBaselineOptInitial": "add a `builtin-baseline` to a vcpkg.json that doesn't already have it",
  "CmdUpgradeOptAllowUnsupported": "Instead of erroring on an unsupported port, continue with a warning.",
  "CmdUpgradeOptNoDryRun": "Actually upgrade",
  "CmdUpgradeOptNoKeepGoing": "Stop installing packages on failure",
  "CmdXDownloadOptHeader": "Additional header to use when fetching from URLs",
  "CmdXDownloadOptSha": "The hash of the file to be downloaded",
  "CmdXDownloadOptSkipSha": "Do not check the SHA512 of the downloaded file",
  "CmdXDownloadOptStore": "Indicates the file should be stored instead of fetched",
  "CmdXDownloadOptUrl": "URL to download and store if missing from cache",
  "CommandFailed": "команда:\n{command_line}\nсбой со следующими результатами:",
  "CommunityTriplets": "Триплеты сообщества VCPKG:",
  "ComparingUtf8Decoders": "Сравнение Utf8Decoders с разным происхождением — это всегда ошибка",
  "CompressFolderFailed": "Сбой сжатия папки \"{path}\":",
  "ComputingInstallPlan": "Вычисление плана установки...",
  "ConflictingFiles": "Следующие файлы уже установлены в {path} и конфликтуют с {spec}",
  "ConflictingValuesForOption": "Для \"--{option}\" указаны конфликтующие щначения.",
  "ConstraintViolation": "Обнаружено нарушение ограничения:",
  "ContinueCodeUnitInStart": "найдена единица кода продолжения в начальной позиции",
  "ControlAndManifestFilesPresent": "Файл манифеста и файл CONTROL существуют в каталоге порта: {path}",
  "ControlCharacterInString": "Управляющий символ в строке",
  "CopyrightIsDir": "\"{path}\", являющийся каталогом, не рекомендуется.",
  "CorruptedDatabase": "База данных повреждена.",
  "CorruptedInstallTree": "Дерево vcpkg \"installed\" повреждено.",
  "CouldNotDeduceNugetIdAndVersion": "Не удалось определить идентификатор nuget и версию по имени файла: {path}",
  "CouldNotFindBaseline": "Не удалось найти явно указанный базовый план \"{commit_sha}\" в базовом файле {path}",
  "CouldNotFindBaselineForRepo": "Не удалось найти базовый план \"{commit_sha}\" для репозитория {package_name}",
  "CouldNotFindBaselineInCommit": "Не удалось найти базовый план в фиксации\"{commit_sha}\" из репозитория {package_name}:",
  "CouldNotFindGitTreeAtCommit": "не удалось найти дерево Git для \"versions\" в репозитории {package_name} фиксации {commit_sha}",
  "CouldNotFindToolVersion": "Не удалось найти <tools version=\"{version}\"> в {path}",
  "CreateFailureLogsDir": "Создание выходного каталога для журналов сбоев: {path}.",
  "CreatedNuGetPackage": "Создан пакет nupkg: {path}",
  "Creating7ZipArchive": "Создание архива 7zip...",
  "CreatingNugetPackage": "Создание пакета NuGet...",
  "CreatingZipArchive": "Создание архива Zip...",
  "CreationFailed": "Не удалось создать {path}.",
  "CurlFailedToExecute": "curl не удалось выполнить с кодом выхода {exit_code}.",
  "CurlReportedUnexpectedResults": "Служба curl сообщила о неожиданных результатах для vcpkg и что vcpkg не может продолжить работу.\nПожалуйста, обратитесь к следующему тексту для получения конфиденциальной информации и откройте на GitHub Microsoft/vcpkg проблему, чтобы решить этот вопрос!\n: {command_line}\n=== curl output ===\n{actual}\n=== end curl output ===",
  "CurlReturnedUnexpectedResponseCodes": "curl вернул другое количество кодов ответа, чем ожидалось для данного запроса ({фактический} против ожидаемого {ожидаемого}).",
  "CurrentCommitBaseline": "Текущую фиксацию можно использовать в качестве базового плана:\n\t\"builtin-baseline\": \"{value}\"",
  "DateTableHeader": "Дата",
  "DefaultBrowserLaunched": "Браузер по умолчанию запущен на {url}.",
  "DefaultFlag": "По умолчанию включено --{option}.",
  "DefaultPathToBinaries": "В соответствии с настройками вашей системы путь по умолчанию для хранения двоичных файлов — \"{path}\". Это консультируется с %LOCALAPPDATA%/%APPDATA% в Windows и $XDG_CACHE_HOME или $HOME на других платформах.",
  "DeleteVcpkgConfigFromManifest": "-- Или удалите \"vcpkg-configuration\" из {path} файла манифеста.",
  "DeprecatedPrefabDebugOption": "Параметр --prefab-debug упразднен.",
  "DetectCompilerHash": "Обнаружение хэша компилятора для триплета {triplet}...",
  "DocumentedFieldsSuggestUpdate": "Если это задокументированные поля, которые следует распознать, попробуйте обновить средство VCPKG.",
  "DownloadAvailable": "Доступна загружаемая копия этого инструмента, которую можно использовать, отключив {env_var}.",
  "DownloadRootsDir": "Укажите корневой каталог загрузки.\n(по умолчанию: {env_var})",
  "DownloadedSources": "Скачанные источники для {spec}",
  "DownloadingPortableToolVersionX": "Не найдена подходящая версия {tool_name} (требуется v{version}) Скачивание переносимой версии {tool_name} {version}...",
  "DownloadingTool": "Скачивание {tool_name}...\n{url}->{path}",
  "DownloadingVcpkgCeBundle": "Скачивание пакета vcpkg-ce {version}...",
  "DownloadingVcpkgCeBundleLatest": "Скачивание последнего пакета vcpkg-ce...",
  "DownloadingVcpkgStandaloneBundle": "Скачивание изолированного пакета {version}.",
  "DownloadingVcpkgStandaloneBundleLatest": "Скачивание новейшего изолированного пакета.",
  "DuplicateCommandOption": "Параметр --{option} можно передать только один раз.",
  "DuplicateOptions": "'--{value}' указано несколько раз.",
  "DuplicatedKeyInObj": "Дублированный ключ \"{value}\" в объекте",
  "ElapsedForPackage": "Затраченное время на обработку {spec}: {elapsed}",
  "ElapsedInstallTime": "Общее затраченное время: {count}",
  "ElapsedTimeForChecks": "Время определения успешного выполнения или сбоя: {elapsed}",
  "EmailVcpkgTeam": "Отправьте электронное письмо с любым отзывом на адрес {url}.",
  "EmbeddingVcpkgConfigInManifest": "Внедрение \"vcpkg-configuration\" в файл манифеста является ЭКСПЕРИМЕНТАЛЬНОЙ возможностью.",
  "EmptyArg": "Параметр --{option} должен быть передан непустым аргументом.",
  "EmptyLicenseExpression": "Выражение лицензии SPDX было пустым.",
  "EndOfStringInCodeUnit": "найден конец строки в середине кодовой точки",
  "EnvInvalidMaxConcurrency": "{env_var} имеет значение {value}, но должно быть > 0",
  "EnvStrFailedToExtract": "не удалось развернуть строку среды:",
  "ErrorDetectingCompilerInfo": "при обнаружении сведений о компиляторе:\nсодержимое файла журнала в \"{path}\":",
  "ErrorIndividualPackagesUnsupported": "В режиме манифеста \"установка vcpkg\" не поддерживает отдельные аргументы пакета. \nЧтобы установить дополнительные пакеты, отредактируете vcpkg.json и запустите \"vcpkg install\" без аргументов пакета.",
  "ErrorInvalidClassicModeOption": "Параметр --{option} не поддерживается в классическом режиме, и манифест не найден.",
  "ErrorInvalidManifestModeOption": "Параметр --{option} не поддерживается в режиме манифеста.",
  "ErrorMessage": "ошибка: ",
  "ErrorMessageMustUsePrintError": "Сообщение с именем {value} начинается с ошибки: вместо этого его необходимо изменить на prepend ErrorMessage в коде.",
  "ErrorMissingVcpkgRoot": "Не удалось обнаружить vcpkg-root. Если вы пытаетесь использовать созданную копию VCPKG, необходимо определить переменную среду VCPKG_ROOT, чтобы она указывала на клонированную копию https://github.com/Microsoft/vcpkg.",
  "ErrorNoVSInstance": "в триплете {triplet}: Не удается найти допустимый экземпляр Visual Studio",
  "ErrorNoVSInstanceAt": "в \"{path}\"",
  "ErrorNoVSInstanceFullVersion": "с префиксом версии набора инструментов {version}",
  "ErrorNoVSInstanceVersion": "с версией набора инструментов {version}",
  "ErrorParsingBinaryParagraph": "при анализе абзаца двоичного файла для {spec}",
  "ErrorRequireBaseline": "для взаимодействия с портами для этого экземпляра vcpkg требуется манифест с указанным базовым показателем. Пожалуйста, добавьте \"builtin-baseline\" или \"vcpkg-configuration.json\" в манифест, который переопределяет реестр по умолчанию.",
  "ErrorRequirePackagesList": "Для установки vcpkg требуется список пакетов для установки в классическом режиме.",
  "ErrorUnableToDetectCompilerInfo": "vcpkg не удалось обнаружить сведения об активном компиляторе. См. выше вывод об ошибке CMake.",
  "ErrorVcvarsUnsupported": "в триплете {triplet}: Использование запроса разработчика Visual Studio не поддерживается на узлах, отличных от Windows. \nОпределите \"VCPKG_CMAKE_SYSTEM_NAME\" или \"VCPKG_CHAINLOAD_TOOLCHAIN_FILE\" в файле триплета.",
  "ErrorVsCodeNotFound": "Visual Studio Code не найден, а переменная среды {env_var} не задана или недействительна.",
  "ErrorVsCodeNotFoundPathExamined": "Рассмотрены следующие пути:",
  "ErrorWhileFetchingBaseline": "при получении базового плана \"{value}\" из репозитория {package_name}:",
  "ErrorWhileParsing": "При анализе {path} возникли ошибки.",
  "ErrorWhileWriting": "Произошла ошибка при записи {path}",
  "ErrorsFound": "Обнаружены следующие ошибки:",
  "ExceededRecursionDepth": "Превышена глубина рекурсии.",
  "ExcludedPackage": "Исключено: {spec}",
  "ExcludedPackages": "Исключены следующие пакеты:",
  "ExpectedAtMostOneSetOfTags": "Найдено {count} наборов {old_value}.*{new_value}, но ожидается не более 1, в блоке:\n{value}",
  "ExpectedCascadeFailure": "Ожидаемое количество каскадных сбоев: {expected}, фактическое количество: {actual}.",
  "ExpectedCharacterHere": "здесь ожидается \"{expected}\"",
  "ExpectedDigitsAfterDecimal": "Ожидаемые цифры после десятичной запятой",
  "ExpectedExtension": "The file extension was not {extension}: {path}",
  "ExpectedFailOrSkip": "Ожидалось значение fail, skip или pass.",
  "ExpectedOneSetOfTags": "Найдено {count} наборов {old_value}.*{new_value}, но ожидается ровно 1, в блоке:\n{value}",
  "ExpectedPathToExist": "Ожидается, что {path} будет существовать после получения",
  "ExpectedPortName": "здесь ожидается имя порта",
  "ExpectedStatusField": "В абзаце состояния ожидалось поле \"status\"",
  "ExpectedTripletName": "здесь ожидается имя триплета",
  "ExpectedValueForOption": "Ожидаемое значение после --{option}.",
  "ExportArchitectureReq": "Для экспорта prefab требуется выбор хотя бы одной из следующих целевых архитектур: arm64-v8a, armeabi-v7a, x86_64, x86.",
  "ExportPrefabRequiresAndroidTriplet": "Для экспорта prefab требуется триплет Android.",
  "ExportUnsupportedInManifest": "Экспорт vcpkg не поддерживает режим манифеста в соответствии с соображениями перспективного проектирования. Можно использовать экспорт в классическом режиме, запустив vcpkg вне проекта на основе манифеста.",
  "Exported7zipArchive": "Архив 7zip экспортирован в папку: {path}",
  "ExportedZipArchive": "Архив Zip экспортирован в папку: {path}",
  "ExportingAlreadyBuiltPackages": "Следующие пакеты уже созданы и будут экспортированы:",
  "ExportingMaintenanceTool": "Экспорт средства обслуживания...",
  "ExportingPackage": "Экспорт {package_name}...",
  "ExtendedDocumentationAtUrl": "Расширенная документация доступна по адресу '{url}'.",
  "ExtractingTool": "Извлечение {tool_name}...",
  "FailedPostBuildChecks": "Found {count} post-build check problem(s). To submit these ports to curated catalogs, please first correct the portfile: {path}",
  "FailedToCheckoutRepo": "не удалось извлечь \"versions\" из репозитория {package_name}",
  "FailedToDetermineArchitecture": "unable to determine the architecture of {path}.\n{command_line}",
  "FailedToDetermineCurrentCommit": "Не удалось определить текущую фиксацию:",
  "FailedToDownloadFromMirrorSet": "Не удалось скачать из зеркального набора",
  "FailedToExtract": "Сбой извлечения \" {path}\":",
  "FailedToFetchError": "{error_msg}\nНе удалось получить {package_name}:",
  "FailedToFindBaseline": "Не удалось найти baseline.json",
  "FailedToFindPortFeature": "Не удалось найти {feature} в {spec}.",
  "FailedToFormatMissingFile": "Нет файлов для форматирования.\nПередайте либо --all, либо явные файлы для форматирования или преобразования.",
  "FailedToLoadInstalledManifest": "Не удалось загрузить файл управления или манифеста для {spec} из-за следующей ошибки. Удалите {spec} и повторите попытку.",
  "FailedToLoadManifest": "Не удалось загрузить манифест из {path} каталога",
  "FailedToLoadPort": "Не удалось загрузить порт {package_name} из {path}",
  "FailedToLoadPortFrom": "Не удалось загрузить порт из {path}",
  "FailedToLoadUnnamedPortFromPath": "Не удалось загрузить порт из {path}",
  "FailedToLocateSpec": "Сбой поиска спецификации в графе: {spec}",
  "FailedToObtainDependencyVersion": "Не удается найти нужную версию зависимостей.",
  "FailedToObtainLocalPortGitSha": "Не удалось получить Git SHA для локальных портов.",
  "FailedToObtainPackageVersion": "Не удается найти нужную версию пакета.",
  "FailedToParseCMakeConsoleOut": "Сбой анализа выходных данных консоли CMake для поиска маркеров начала или конца блока.",
  "FailedToParseConfig": "Не удалось проанализировать {path} конфигурации",
  "FailedToParseControl": "Не удалось проанализировать управляющий файл: {path}",
  "FailedToParseJson": "Не удалось проанализировать файл JSON: {path}",
  "FailedToParseManifest": "Не удалось проанализировать файл манифеста: {path}",
  "FailedToParseNoTopLevelObj": "Не удалось проанализировать {path}, ожидался объект верхнего уровня.",
  "FailedToParseSerializedBinParagraph": "[проверка работоспособности] Не удалось проанализировать абзац сериализованного двоичного файла.\nОткройте проблему на странице https://github.com/microsoft/vcpkg со следующими выходными данными:\n{error_msg}\nАбзац сериализованного двоичного файла:",
  "FailedToParseVersionXML": "Не удалось проанализировать версию инструмента {tool_name}. Строка версии: {version}",
  "FailedToProvisionCe": "Не удалось подготовить vcpkg-ce.",
  "FailedToRead": "Не удалось прочитать {path}: {error_msg}",
  "FailedToReadParagraph": "Не удалось прочитать абзацы из {path}",
  "FailedToRemoveControl": "Не удалось удалить файл управления {path}",
  "FailedToRunToolToDetermineVersion": "Сбой запуска \"{path}\" для определения версии {tool_name}.",
  "FailedToStoreBackToMirror": "не удалось сохранить обратно в зеркале:",
  "FailedToStoreBinaryCache": "Сбой сохранения двоичного кэша {path}",
  "FailedToTakeFileSystemLock": "Не удалось заблокировать файловую систему в {path}",
  "FailedToWriteManifest": "Не удалось записать файл манифеста {path}",
  "FailedVendorAuthentication": "Одному или нескольким поставщикам учетных данных {vendor} не удалось пройти аутентификацию. См. «{url}» для получения дополнительной информации о том, как предоставить учетные данные.",
  "FeedbackAppreciated": "Спасибо за отзыв!",
  "FetchingBaselineInfo": "Извлечение базовой информации из {package_name}...",
  "FetchingRegistryInfo": "Получение сведений реестра из {url} ({value})...",
  "FileNotFound": "{path}: файл не найден",
  "FileSystemOperationFailed": "Сбой операции файловой системы:",
  "FilesExported": "Файлы экспортированы в папку: {path}",
  "FishCompletion": "Завершение vcpkg fish уже полностью добавлено в \"{path}\".",
  "FloatingPointConstTooBig": "Слишком большая константа с плавающей запятой: {count}",
  "FollowingPackagesMissingControl": "Следующие пакеты не содержат допустимый CONTROL или vcpkg.json.",
  "FollowingPackagesNotInstalled": "Следующие пакеты не установлены.",
  "FollowingPackagesUpgraded": "Следующие пакеты обновлены.",
  "ForceSystemBinariesOnWeirdPlatforms": "Переменная среды VCPKG_FORCE_SYSTEM_BINARIES должна быть задана на платформах ARM, s390x и ppc64le.",
  "FormattedParseMessageExpression": "в выражении: {value}",
  "GenerateMsgErrorParsingFormatArgs": "строка формата синтаксического анализа для {value}:",
  "GenerateMsgIncorrectComment": "сообщение {value} содержит неправильный комментарий:",
  "GenerateMsgNoArgumentValue": "{{{value}}} указано в комментарии, но не использовалось в сообщении.",
  "GenerateMsgNoCommentValue": "{{{value}}} использовалось в сообщении, но не прокомментировано.",
  "GeneratedConfiguration": "Созданная конфигурация {path}.",
  "GeneratedInstaller": "Установщик {path} создан.",
  "GeneratingConfiguration": "Создание конфигурации {path}...",
  "GeneratingInstaller": "Создание установщика {path}...",
  "GeneratingRepo": "Создание репозитория {path}...",
  "GetParseFailureInfo": "Используйте \"--debug\", чтобы получить дополнительные сведения о сбоях анализа.",
  "GitCommandFailed": "не удалось выполнить: {command_line}",
  "GitRegistryMustHaveBaseline": "Запись реестра Git для \"{package_name}\" должна иметь поле \"baseline\", которое является допустимым SHA фиксации Git (40 шестнадцатеричных символов).\nТекущим HEAD этого репозитория является \"{value}\".",
  "GitStatusOutputExpectedFileName": "требуется имя файла",
  "GitStatusOutputExpectedNewLine": "ожидалась новая строка",
  "GitStatusOutputExpectedRenameOrNewline": "ожидался переименованный файл или новые строки",
  "GitStatusUnknownFileStatus": "неизвестное состояние файла: {value}",
  "GitUnexpectedCommandOutput": "непредвиденные выходные данные git",
  "GraphCycleDetected": "Обнаружен цикл в графе в {package_name}:",
  "HashFileFailureToRead": "сбой при чтении файла \"{path}\" для хеширования: ",
  "HeaderOnlyUsage": "{package_name} является заголовочным и может использоваться из CMake через:",
  "HelpBuiltinBase": "Базовый план ссылается на фиксацию в репозитории vcpkg, устанавливающую минимальную версию для каждой зависимости в графе. Например, если никакие другие ограничения не указаны (напрямую или транзитивно), версия будет разрешаться в базовый план манифеста верхнего уровня. Базовые линии транзитивных зависимостей игнорируются.",
  "HelpContactCommand": "Отображение контактных данных для отправки отзыва.",
  "HelpCreateCommand": "Создайте новый порт.",
  "HelpDependInfoCommand": "Отобразить список зависимостей для портов.",
  "HelpEditCommand": "Откройте порт для редактирования (используйте переменную среды \"{env_var}\", чтобы установить программу-редактор, по умолчанию 'code').",
  "HelpEnvCommand": "Создает среду чистой оболочки для разработки или компиляции.",
  "HelpExampleCommand": "Дополнительную справку (включая примеры) см. в прилагаемой папке README.md и docs.",
  "HelpExampleManifest": "Пример манифеста:",
  "HelpExportCommand": "Экспортирует пакет.",
  "HelpFormatManifestCommand": "Форматирует все файлы vcpkg.json. Запустите это перед фиксацией в vcpkg.",
  "HelpHashCommand": "Хешировать файл по определенному алгоритму, по умолчанию SHA512.",
  "HelpInitializeRegistryCommand": "Инициализирует реестр в каталоге <path>.",
  "HelpInstallCommand": "Установка пакета",
  "HelpListCommand": "Список установленных пакетов.",
  "HelpManifestConstraints": "Манифесты могут накладывать три типа ограничений на используемые версии.",
  "HelpMinVersion": "Vcpkg выберет минимальную найденную версию, соответствующую всем применимым ограничениям, включая версию из базовой линии, указанной на верхнем уровне, а также любые ограничения \"version>=\" в графе.",
  "HelpOverrides": "При использовании в качестве манифеста верхнего уровня (например, при запуске \"vcpkg install\" в каталоге) переопределения позволяют манифесту сократить разрешение зависимостей и точно указать используемую версию. Их можно использовать для обработки конфликтов версий, например, с зависимостями \"version-string\". Они не будут рассматриваться, когда от них зависит транзитивно.",
  "HelpOwnsCommand": "Поиск файлов в установленных пакетах.",
  "HelpPackagePublisher": "Кроме того, издатели пакетов могут использовать ограничения \"version>=\" для обеспечения использования потребителями хотя бы некоторой минимальной версии данной зависимости. Например, если библиотеке требуется API, добавленный в boost-asio в версии 1.70, ограничение \"version>=\" гарантирует, что переходные пользователи будут использовать достаточную версию даже при переопределении отдельных версий или перекрестных ссылках реестра.",
  "HelpPortVersionScheme": "Каждая версия дополнительно содержит \"версию порта\", представляющую собой неотрицательное целое число. При отображении в виде текста версия порта (если она не равна нулю) добавляется как суффикс к тексту основной версии, разделенному решеткой (#). Порт-версии сортируются лексографически после текста основной версии, например:\n1.0.0 < 1.0.0#1 < 1.0.1 < 1.0.1#5 < 2.0.0",
  "HelpRemoveCommand": "Удалить пакет.",
  "HelpRemoveOutdatedCommand": "Удалите все устаревшие пакеты.",
  "HelpResponseFileCommand": "Укажите файл отклика для предоставления дополнительных параметров.",
  "HelpSearchCommand": "Поиск пакетов, доступных для сборки.",
  "HelpTextOptFullDesc": "Do not truncate long text",
  "HelpTopicCommand": "Отображение справки по определенной теме.",
  "HelpTopicsCommand": "Показать список разделов справки.",
  "HelpTxtOptAllowUnsupportedPort": "Instead of erroring on an unsupported port, continue with a warning.",
  "HelpTxtOptCleanAfterBuild": "Clean buildtrees, packages and downloads after building each package",
  "HelpTxtOptCleanBuildTreesAfterBuild": "Clean buildtrees after building each package",
  "HelpTxtOptCleanDownloadsAfterBuild": "Clean downloads after building each package",
  "HelpTxtOptCleanPkgAfterBuild": "Clean packages after building each package",
  "HelpTxtOptDryRun": "Do not actually build or install.",
  "HelpTxtOptEditable": "Disable source re-extraction and binary caching for libraries on the command line (classic mode)",
  "HelpTxtOptEnforcePortChecks": "Fail install if a port has detected problems or attempts to use a deprecated feature",
  "HelpTxtOptKeepGoing": "Continue installing packages on failure",
  "HelpTxtOptManifestFeature": "Additional feature from the top-level manifest to install (manifest mode).",
  "HelpTxtOptManifestNoDefault": "Don't install the default features from the top-level manifest (manifest mode).",
  "HelpTxtOptNoDownloads": "Do not download new sources",
  "HelpTxtOptNoUsage": "Don't print CMake usage information after install.",
  "HelpTxtOptOnlyBinCache": "Fail if cached binaries are not available",
  "HelpTxtOptOnlyDownloads": "Download sources but don't build packages",
  "HelpTxtOptRecurse": "Allow removal of packages as part of installation",
  "HelpTxtOptUseAria2": "Use aria2 to perform download tasks",
  "HelpTxtOptUseHeadVersion": "Install the libraries on the command line using the latest upstream sources (classic mode)",
  "HelpTxtOptWritePkgConfig": "Writes out a NuGet packages.config-formatted file for use with external binary caching.\nSee `vcpkg help binarycaching` for more information.",
  "HelpUpdateBaseline": "Лучший способ поддержания библиотек в актуальном состоянии — обновление базового эталона. Это обеспечит обновление всех пакетов, включая транзитивные. Но если вам нужно обновить пакет независимо, вы можете использовать ограничение \"version>=\".",
  "HelpUpdateCommand": "Список пакетов, которые можно обновить.",
  "HelpUpgradeCommand": "Пересоберите все устаревшие пакеты.",
  "HelpVersionCommand": "Отображение сведений о версии.",
  "HelpVersionDateScheme": "Дата (2021-01-01.5)",
  "HelpVersionGreater": "В поле \"зависимости\" для каждой зависимости может быть указано минимальное ограничение. Эти минимальные ограничения будут использоваться при транзитивной зависимости от этой библиотеки. Минимальная версия порта может быть дополнительно указана с суффиксом \"#\".",
  "HelpVersionScheme": "Последовательность чисел, разделенных точками (1.2.3.4)",
  "HelpVersionSchemes": "Принимаются следующие схемы управления версиями.",
  "HelpVersionSemverScheme": "Семантическая версия 2.0 (2.1.0-rc2)",
  "HelpVersionStringScheme": "Точная несовместимая версия (Vista)",
  "HelpVersioning": "Управление версиями позволяет вам детерминированно управлять точными версиями зависимостей, используемых вашим проектом, из своего файла манифеста.",
  "IgnoringVcpkgRootEnvironment": "vcpkg {value} использует обнаруженный корень vcpkg {actual} и пропускает несовпадающее значение среды VCPKG_ROOT {path}. Чтобы скрыть это сообщение, удалите переменную среды или воспользуйтесь переключателем командной строки --vcpkg-root.",
  "IllegalFeatures": "Список функций не разрешен в этом контексте",
  "IllegalPlatformSpec": "Квалификатор платформы не разрешен в этом контексте",
  "ImproperShaLength": "Длина SHA512 должна составлять 128 шестнадцатеричных символов: {value}",
  "IncorrectArchiveFileSignature": "Неверная подпись файла архива",
  "IncorrectLibHeaderEnd": "Неправильный конец заголовка библиотеки",
  "IncorrectNumberOfArgs": "'{command_name}' требует '{ожидаемых}' аргументов, но были предоставлены '{actual}'.",
  "IncorrectPESignature": "Неверная подпись PE",
  "IncrementedUtf8Decoder": "Добавочный Utf8Decoder в конце строки",
  "InfoSetEnvVar": "Вы также можете задать переменную среды '{env_var}' в выбранном редакторе.",
  "InitRegistryFailedNoRepo": "Не удалось создать реестр в {path}: это не корневой каталог репозитория Git.\nИспользуйте команду \"git init {command_line}\", чтобы создать репозиторий Git в этой папке.",
  "InstallFailed": "сбой: {path}: {error_msg}",
  "InstallPackageInstruction": "Открыв проект, перейдите в Инструменты->Диспетчер пакетов NuGet->Консоль диспетчера пакетов и вставьте:\n Install-Package \"{value}\" -Source \"{path}\"",
  "InstallRootDir": "(Экспериментально) Укажите корневой каталог установки.",
  "InstallWithSystemManager": "Этот инструмент можно установить с помощью системного диспетчера пакетов.",
  "InstallWithSystemManagerMono": "Пользователям Ubuntu 18.04 может потребоваться более новая версия Mono, доступная по адресу {url}.",
  "InstallWithSystemManagerPkg": "Этот инструмент можно установить с помощью диспетчера системных пакетов ({command_line}).",
  "InstalledBy": "Установлено посредством {path}",
  "InstalledPackages": "Следующие пакеты уже установлены:",
  "InstalledRequestedPackages": "Все запрашиваемые пакеты сейчас установлены.",
  "InstallingFromLocation": "-- Установка порта из расположения: {путь}",
  "InstallingMavenFile": "{path} installing Maven file",
  "InstallingPackage": "Выполняется установка {action_index}/{count} {spec}…",
  "IntegrationFailed": "Интеграция не применена.",
  "InternalCICommand": "vcpkg ci — внутренняя команда, она может измениться несовместимым образом или может быть удалена в любое время.",
  "InternalErrorMessage": "внутренняя ошибка: ",
  "InternalErrorMessageContact": "Откройте проблему на странице https://github.com/microsoft/vcpkg/issues/new?template=other-type-of-bug-report.md&labels=category:vcpkg-bug с подробными инструкциями по ее воспроизведению.",
  "InvalidArgMustBeAnInt": "Значение --{option} должно быть целым числом.",
  "InvalidArgMustBePositive": "Значение --{option} должно быть неотрицательным.",
  "InvalidArgument": "недопустимый аргумент.",
  "InvalidArgumentRequiresAbsolutePath": "недопустимый аргумент: аргументы пути двоичной config \"{binary_source}\" для двоичных строк config должны быть абсолютными",
  "InvalidArgumentRequiresBaseUrl": "недопустимый аргумент: для двоичной config \"{binary_source}\" в качестве первого аргумента требуется базовый URL-адрес {base_url}",
  "InvalidArgumentRequiresBaseUrlAndToken": "недопустимый аргумент: для двоичной config \"{binary_source}\" требуется по крайней мере базовый URL-адрес и маркер SAS",
  "InvalidArgumentRequiresNoneArguments": "недопустимый аргумент: двоичная config \"{binary_source}\" не принимает аргументы",
  "InvalidArgumentRequiresOneOrTwoArguments": "недопустимый аргумент: для двоичной config \"{binary_source}\" требуется 1 или 2 аргумента",
  "InvalidArgumentRequiresPathArgument": "недопустимый аргумент: двоичная конфигурация '{binary_source}' требует по крайней мере один аргумент пути",
  "InvalidArgumentRequiresPrefix": "недопустимый аргумент: двоичная конфигурация '{binary_source}' требует по крайней мере один префикс",
  "InvalidArgumentRequiresSingleArgument": "недопустимый аргумент: двоичная config \"{binary_source}\" не принимает более 1 аргумента",
  "InvalidArgumentRequiresSingleStringArgument": "недопустимый аргумент: двоичная config \"{binary_source}\" ожидает однострочного аргумента",
  "InvalidArgumentRequiresSourceArgument": "недопустимый аргумент: двоичная конфигурация '{binary_source}' требует по крайней мере один исходный аргумент",
  "InvalidArgumentRequiresTwoOrThreeArguments": "недопустимый аргумент: для двоичной config \"{binary_source}\" требуется 2 или 3 аргумента",
  "InvalidArgumentRequiresValidToken": "недопустимый аргумент: для двоичной config \"{binary_source}\" требуется маркер SAS без предварительного значения \"?\" в качестве второго аргумента",
  "InvalidBuildInfo": "Недопустимый файл BUILD_INFO для пакета: {error_msg}",
  "InvalidBuiltInBaseline": "встроенный базовый план верхнего уровня ({value}) не является допустимым SHA фиксации: ожидалось 40 шестнадцатеричных символов.",
  "InvalidBundleDefinition": "Недопустимое определение пакета.",
  "InvalidCodePoint": "Недопустимая кодовая точка передана в utf8_encoded_code_point_count",
  "InvalidCodeUnit": "недопустимая кодовая единица",
  "InvalidCommandArgSort": "Значением --sort должен быть один из следующих вариантов: \"lexicographical\", \"topographical\", \"reverse\".",
  "InvalidCommentStyle": "vcpkg не поддерживает комментарии в стиле C, однако большинство объектов позволяют использовать в качестве комментариев поля с префиксом $.",
  "InvalidCommitId": "Недопустимый ИД фиксации: {commit_sha}",
  "InvalidFileType": "сбой: {path} не может обработать тип файла",
  "InvalidFilename": "Имя файла не может содержать недопустимые символы {value}, но использовалось имя {path}",
  "InvalidFloatingPointConst": "Недопустимые константы с плавающей точкой: {count}",
  "InvalidFormatString": "Недопустимая строка формата: {actual}",
  "InvalidHexDigit": "Недопустимая шестнадцатеричная цифра в escape-коде Юникода",
  "InvalidIntegerConst": "Недопустимая целая константа: {count}",
  "InvalidLinkage": "Недопустимый тип связи {system_name}: [{value}]",
  "InvalidOptionForRemove": "\"remove\" принимает библиотеки или \"--outdated\"",
  "InvalidPortVersonName": "Обнаружено недопустимое имя файла версии порта: \"{path}\".",
  "InvalidString": "Недопустимый utf8 передается значению Value::string(std::string)",
  "InvalidTriplet": "Недопустимая триада: {triplet}",
  "IrregularFile": "путь не является обычным файлом: {path}",
  "JsonErrorMustBeAnObject": "Ожидается, что \"{path}\" будет объектом.",
  "JsonFileMissingExtension": "файл JSON {path} должен иметь расширение .json (все строчные буквы)",
  "JsonSwitch": "(Экспериментально) Запрос вывода JSON.",
  "JsonValueNotArray": "значение json не является массивом",
  "JsonValueNotObject": "Значение JSON не является объектом",
  "JsonValueNotString": "значение json не является строкой",
  "LaunchingProgramFailed": "Запуск средства {tool_name}:",
  "LicenseExpressionContainsExtraPlus": "Выражение лицензии SPDX содержит дополнительный знак \"+\". Они разрешены только непосредственно после идентификатора лицензии.",
  "LicenseExpressionContainsInvalidCharacter": "Выражение лицензии SPDX содержит недопустимый символ (0x{value:02X} '{value}').",
  "LicenseExpressionContainsUnicode": "Выражение лицензии SPDX содержит символ Юникода (U+{value:04X} '{pretty_value}'), но эти выражения предназначены только для ASCII.",
  "LicenseExpressionDocumentRefUnsupported": "Текущая реализация не поддерживает ссылки DocumentRef-SPDX.",
  "LicenseExpressionExpectCompoundFoundParen": "Ожидался составной элемент или конец строки, обнаружена круглая скобка.",
  "LicenseExpressionExpectCompoundFoundWith": "Ожидается либо AND, либо OR, найдено WITH (WITH допускается только после имен лицензий, а не выражений в скобках).",
  "LicenseExpressionExpectCompoundFoundWord": "Ожидается операция AND или OR, обнаружена лицензия или имя исключения: \"{value}\".",
  "LicenseExpressionExpectCompoundOrWithFoundWord": "Ожидается операция AND, OR или WITH, обнаружена лицензия или имя исключения: \"{value}\".",
  "LicenseExpressionExpectExceptionFoundCompound": "Ожидалось имя исключения, обнаружено составное {value}.",
  "LicenseExpressionExpectExceptionFoundEof": "Ожидалось имя исключения, обнаружен конец строки.",
  "LicenseExpressionExpectExceptionFoundParen": "Ожидалось имя исключения, обнаружена скобка.",
  "LicenseExpressionExpectLicenseFoundCompound": "Ожидалось имя лицензии, обнаружено составное {value}.",
  "LicenseExpressionExpectLicenseFoundEof": "Ожидалось имя лицензии, обнаружен конец строки.",
  "LicenseExpressionExpectLicenseFoundParen": "Ожидалось имя лицензии, обнаружена круглая скобка.",
  "LicenseExpressionImbalancedParens": "Закрывающая круглая скобка без открывающей скобки.",
  "LicenseExpressionUnknownException": "Неизвестный идентификатор исключения лицензии \"{value}\". Известные значения перечислены по ссылке https://spdx.org/licenses/exceptions-index.html",
  "LicenseExpressionUnknownLicense": "Неизвестный идентификатор лицензии \"{value}\". Известные значения перечислены по адресу https://spdx.org/licenses/",
  "ListOfValidFieldsForControlFiles": "Список допустимых полей для файлов CONTROL (с учетом регистра):",
  "LoadingCommunityTriplet": "-- [СООБЩЕСТВО] Загрузка тройной конфигурации из: {путь}",
  "LoadingDependencyInformation": "Загрузка сведений о зависимостях для пакетов {count}...",
  "LoadingOverlayTriplet": "-- [OVERLAY] Загрузка тройной конфигурации из: {path}",
  "LocalPortfileVersion": "Использование локальных версий файлов портов. Чтобы обновить локальные файлы портов, используйте \"git pull\".",
  "LocalizedMessageMustNotContainIndents": "Сообщение с именем {value} содержит отступ, который необходимо изменить, чтобы вместо этого использовать LocalizedString::append_indent.",
  "LocalizedMessageMustNotEndWithNewline": "Сообщение с именем {value} заканчивается новой строкой, которая должна быть добавлена форматированием, а не локализацией.",
  "ManifestConflict": "Обнаружен файл манифеста и файл CONTROL в порте \"{path}\". Переименуйте один из них",
  "ManifestFormatCompleted": "Файлы манифеста отформатированы успешно.",
  "MismatchedFiles": "файл для хранения не соответствует хэшу",
  "MismatchedManifestAfterReserialize": "The serialized manifest was different from the original manifest. Please open an issue at https://github.com/microsoft/vcpkg, with the following output:",
  "MismatchedNames": "имена не совпадают: \"{package_name}\" != \"{actual}\"",
  "Missing7zHeader": "Не удалось найти заголовок 7z.",
  "MissingAndroidEnv": "Отсутствует переменная среды ANDROID_NDK_HOME",
  "MissingAndroidHomeDir": "Каталог ANDROID_NDK_HOME не существует: {path}",
  "MissingArgFormatManifest": "манифест формата был передан --convert-control без '--all'.\nЭто ничего не делает: явно переданные управляющие файлы преобразуются автоматически.",
  "MissingDependency": "Пакет {spec} установлен, но зависимость {package_name} не установлена.",
  "MissingExtension": "Отсутствует расширение \"{extension}\".",
  "MissingOption": "Для этой команды требуется --{option}",
  "MissingPortSuggestPullRequest": "Если вашего порта нет в списке, откройте вопрос и рассмотрите возможность размещения запроса на вытягивание.",
  "MissmatchedBinParagraphs": "Абзац сериализованного двоичного файла отличался от абзаца исходного двоичного файла. Откройте проблему на странице https://github.com/microsoft/vcpkg со следующими выходными данными:",
  "MonoInstructions": "Это может быть вызвано неполной установкой Mono. Полная версия Mono доступна в некоторых системах по команде \"sudo apt install mono-complete\". Пользователям Ubuntu 18.04 может потребоваться более новая версия Mono, доступная по адресу https://www.mono-project.com/download/stable/",
  "MsiexecFailedToExtract": "сбой msiexec при извлечении \"{path}\" с кодом запуска или выхода {exit_code} и сообщением:",
  "MultiArch": "Значение Multi-Arch должно быть \"то же\", но было {option}",
  "MutuallyExclusiveOption": "--{value} нельзя использовать с --{option}.",
  "NavigateToNPS": "Пожалуйста, перейдите на {url} в предпочитаемом вами браузере.",
  "NewConfigurationAlreadyExists": "При создании манифеста файл vcpkg-configuration.json по адресу {path} будет перезаписан.",
  "NewManifestAlreadyExists": "Манифест уже присутствует в {path}.",
  "NewNameCannotBeEmpty": "--name не может быть пустым.",
  "NewOnlyOneVersionKind": "Можно указать только одно из --version-relaxed, --version-date или --version-string.",
  "NewSpecifyNameVersionOrApplication": "Чтобы указать, что манифест не предназначен для использования в качестве порта, определите --name и --version для создания манифеста, предназначенного для библиотек C++, или укажите --application.",
  "NewVersionCannotBeEmpty": "--version не может быть пустой.",
  "NoArgumentsForOption": "Параметр --{option} не принимает аргумент.",
  "NoCachedPackages": "Никакие пакеты не кэшируются.",
  "NoError": "нет ошибок",
  "NoInstalledPackages": "Нет установленных пакетов. Вы имели в виду \"search\"?",
  "NoLocalizationForMessages": "Нет локализованных сообщений для следующего: ",
  "NoOutdatedPackages": "Нет устаревших пакетов.",
  "NoRegistryForPort": "Не настроен реестр для порта {package_name}.",
  "NoteMessage": "примечание. ",
  "NugetPackageFileSucceededButCreationFailed": "Создание пакета NuGet выполнено успешно, но .nupkg не создан. Ожидается: \"{path}\"",
  "OptionMustBeInteger": "Значение --{option} должно быть целым числом.",
  "OptionRequired": "Требуется параметр --{option}.",
  "OptionRequiresOption": "Для значения --{value} требуется --{option}",
  "OriginalBinParagraphHeader": "\nАбзац исходного двоичного файла",
  "OverlayPatchDir": "Путь наложения \"{path}\" должен существовать и быть каталогом.",
  "OverlayTriplets": "Триплеты наложения из {path}:",
  "OverwritingFile": "Файл {path} уже существует и будет перезаписан",
  "PackageAlreadyRemoved": "не удается удалить пакет {spec}: уже удалено",
  "PackageFailedtWhileExtracting": "Сбой \"{value}\" при извлечении {path}.",
  "PackageRootDir": "(Экспериментально) Укажите корневой каталог пакетов.",
  "PackagesToInstall": "Будут собраны и установлены следующие пакеты:",
  "PackagesToInstallDirectly": "Следующие пакеты будут непосредственно установлены:",
  "PackagesToModify": "Дополнительные пакеты (*) будут изменены для завершения этой операции.",
  "PackagesToRebuild": "Будут повторно собраны следующие пакеты:",
  "PackagesToRebuildSuggestRecurse": "Если вы действительно хотите повторно собрать перечисленные выше пакеты, запустите команду с параметром --recurse.",
  "PackagesToRemove": "Будут удалены следующие пакеты:",
  "PackagesUpToDate": "Нет пакетов, которые требуется обновить.",
  "PackingVendorFailed": "Сбой упаковки {vendor}. Используйте --debug для получения дополнительной информации.",
  "PairedSurrogatesAreInvalid": "конечный суррогат, следующий за ведущим суррогатом (парные суррогаты недействительны)",
  "ParseControlErrorInfoInvalidFields": "Не ожидались следующие поля:",
  "ParseControlErrorInfoMissingFields": "Отсутствуют следующие поля:",
  "ParseControlErrorInfoTypesEntry": "{value} ожидалось {expected}",
  "ParseControlErrorInfoWhileLoading": "при загрузке {path}:",
  "ParseControlErrorInfoWrongTypeFields": "Следующие поля имели неправильные типы:",
  "PathMustBeAbsolute": "Значение переменной среды X_VCPKG_REGISTRIES_CACHE не является абсолютным: {path}",
  "PerformingPostBuildValidation": "-- Performing post-build validation",
  "PortBugAllowRestrictedHeaders": "In exceptional circumstances, this policy can be disabled via {env_var}",
  "PortBugBinDirExists": "There should be no bin\\ directory in a static build, but {path} is present.",
  "PortBugDebugBinDirExists": "There should be no debug\\bin\\ directory in a static build, but {path} is present.",
  "PortBugDebugShareDir": "/debug/share should not exist. Please reorganize any important files, then use\nfile(REMOVE_RECURSE \"${{CURRENT_PACKAGES_DIR}}/debug/share\")",
  "PortBugDllAppContainerBitNotSet": "The App Container bit must be set for Windows Store apps. The following DLLs do not have the App Container bit set:",
  "PortBugDllInLibDir": "The following dlls were found in /lib or /debug/lib. Please move them to /bin or /debug/bin, respectively.",
  "PortBugDuplicateIncludeFiles": "Include files should not be duplicated into the /debug/include directory. If this cannot be disabled in the project cmake, use\nfile(REMOVE_RECURSE \"${{CURRENT_PACKAGES_DIR}}/debug/include\")",
  "PortBugFoundCopyrightFiles": "The following files are potential copyright files:",
  "PortBugFoundDebugBinaries": "Found {count} debug binaries:",
  "PortBugFoundDllInStaticBuild": "DLLs should not be present in a static build, but the following DLLs were found:",
  "PortBugFoundEmptyDirectories": "There should be no empty directories in {path}. The following empty directories were found:",
  "PortBugFoundExeInBinDir": "The following EXEs were found in /bin or /debug/bin. EXEs are not valid distribution targets.",
  "PortBugFoundReleaseBinaries": "Found {count} release binaries:",
  "PortBugIncludeDirInCMakeHelperPort": "The folder /include exists in a cmake helper port; this is incorrect, since only cmake files should be installed",
  "PortBugInspectFiles": "To inspect the {extension} files, use:",
  "PortBugInvalidCrtLinkage": "Invalid crt linkage. Expected {expected}, but the following libs had:",
  "PortBugMergeLibCMakeDir": "The /lib/cmake folder should be merged with /debug/lib/cmake and moved to /share/{spec}/cmake. Please use the helper function `vcpkg_cmake_config_fixup()` from the port vcpkg-cmake-config.`",
  "PortBugMismatchedNumberOfBinaries": "Mismatching number of debug and release binaries.",
  "PortBugMisplacedCMakeFiles": "The following cmake files were found outside /share/{spec}. Please place cmake files in /share/{spec}.",
  "PortBugMisplacedFiles": "The following files are placed in {path}:",
  "PortBugMisplacedFilesCont": "Files cannot be present in those directories.",
  "PortBugMisplacedPkgConfigFiles": "pkgconfig directories should be one of share/pkgconfig (for header only libraries only), lib/pkgconfig, or lib/debug/pkgconfig. The following misplaced pkgconfig files were found:",
  "PortBugMissingDebugBinaries": "Debug binaries were not found.",
  "PortBugMissingFile": "The /{path} file does not exist. This file must exist for CMake helper ports.",
  "PortBugMissingImportedLibs": "Import libraries were not present in {path}.\nIf this is intended, add the following line in the portfile:\nset(VCPKG_POLICY_DLLS_WITHOUT_LIBS enabled)",
  "PortBugMissingIncludeDir": "The folder /include is empty or not present. This indicates the library was not correctly installed.",
  "PortBugMissingLicense": "The software license must be available at ${CURRENT_PACKAGES_DIR}/share/{spec}/copyright",
  "PortBugMissingReleaseBinaries": "Release binaries were not found.",
  "PortBugMovePkgConfigFiles": "You can move the pkgconfig files with commands similar to:",
  "PortBugOutdatedCRT": "Detected outdated dynamic CRT in the following files:",
  "PortBugRemoveBinDir": "If the creation of bin\\ and/or debug\\bin\\ cannot be disabled, use this in the portfile to remove them",
  "PortBugRemoveEmptyDirectories": "If a directory should be populated but is not, this might indicate an error in the portfile.\nIf the directories are not needed and their creation cannot be disabled, use something like this in the portfile to remove them:",
  "PortBugRemoveEmptyDirs": "vcpkg_fixup_pkgconfig()\nfile(REMOVE_RECURSE empty directories left by the above renames)",
  "PortBugRestrictedHeaderPaths": "The following restricted headers can prevent the core C++ runtime and other packages from compiling correctly. In exceptional circumstances, this policy can be disabled via {env_var}.",
  "PortBugSetDllsWithoutExports": "DLLs without any exports are likely a bug in the build script. If this is intended, add the following line in the portfile:\nset(VCPKG_POLICY_DLLS_WITHOUT_EXPORTS enabled)\nThe following DLLs have no exports:",
  "PortDependencyConflict": "Порт {package_name} имеет следующие неподдерживаемые зависимости:",
  "PortNotInBaseline": "В базовом плане нет записи для порта {package_name}.",
  "PortSupportsField": "(поддерживает: \"{supports_expression}\")",
  "PortTypeConflict": "Тип порта {spec} в установленном файле порта отличается от доступного.\nУдалите {spec} вручную и повторно выполните эту команду.",
  "PortVersionConflict": "Следующие пакеты отличаются от версий портов:",
  "PortsAdded": "Добавлены следующие порты ({count}):",
  "PortsNoDiff": "Порты между двумя фиксациями не изменились.",
  "PortsRemoved": "Удалены следующие порты ({count}):",
  "PortsUpdated": "\nОбновлены следующие порты ({count}):",
  "PrebuiltPackages": "Существуют несобранные пакеты. Чтобы собрать их, выполните:",
  "PreviousIntegrationFileRemains": "Предыдущий файл интеграции не был удален.",
  "ProgramReturnedNonzeroExitCode": "Сбой средства {tool_name} с кодом завершения {exit_code}.",
  "ProvideExportType": "Требуется хотя бы один из следующих параметров: --raw --nuget --ifw --zip --7zip --chocolatey --prefab.",
  "PushingVendorFailed": "Сбой отправки {vendor} в \"{path}\". Для получения дополнительных сведений, используйте --debug.",
  "RegistryCreated": "Реестр успешно создан в {path}",
  "RemoveDependencies": "Чтобы удалить зависимости в режиме манифеста, измените манифест (vcpkg.json) и выполните команду \"install\".",
  "RemovePackageConflict": "Другой установленный пакет совпадает с именем несоответствующего запроса. Вы имели в виду {spec}?",
  "RemovingPackage": "Выполняется удаление {action_index}/{count} {spec}",
  "RestoredPackage": "Восстановлен пакет из \"{path}\"",
  "RestoredPackagesFromVendor": "Восстановлено {count} пакетов из {value} за {elapsed}. Используйте --debug, чтобы увидеть больше деталей.",
  "ResultsHeader": "РЕЗУЛЬТАТЫ",
  "SeeURL": "Дополнительные сведения см. в {url}.",
  "SerializedBinParagraphHeader": "\nАбзац сериализованного двоичного файла",
  "SettingEnvVar": "-- Установка переменных среды \"{env_var}\" в \"{url}\".",
  "ShaPassedAsArgAndOption": "SHA512 передан как аргумент и как параметр. Передайте только один из этих вариантов.",
  "ShaPassedWithConflict": "Передано SHA512, но также передан параметр --skip-sha512. Выберите только один из этих вариантов.",
  "ShallowRepositoryDetected": "VCPKG-файл клонирован как неполный репозиторий в: {path}\nПовторите попытку с полным клонированием vcpkg.",
  "SkipClearingInvalidDir": "Очистка содержимого {path} пропущена: это не каталог.",
  "SourceFieldPortNameMismatch": "Поле \"Source\" в файле CONTROL или поле \"name\" в файле vcpkg.json содержит имя {package_name} и не соответствует каталогу порта {path}.",
  "SpecifiedFeatureTurnedOff": "Функция '{command_name}' специально отключена, но указан --{option}.",
  "SpecifyDirectoriesContaining": "Указывает каталоги, содержащие файлы триплетов.\n(также: '{env_var}')",
  "SpecifyDirectoriesWhenSearching": "Укажите каталоги для использования при поиске портов.\n(также: '{env_var}')",
  "SpecifyHostArch": "Укажите триплет архитектуры узла. См. 'vcpkg help triplet'.\n(по умолчанию: '{env_var}')",
  "SpecifyTargetArch": "Укажите триплет целевой архитектуры. См. 'vcpkg help triplet'.\n(по умолчанию: '{env_var}')",
  "StartCodeUnitInContinue": "найдена единица начального кода в позиции продолжения",
  "StoreOptionMissingSha": "Параметр --store недопустим без sha512",
  "StoredBinaryCache": "Сохраненный двоичный кэш: \"{path}\"",
  "SuccessfulyExported": "Пакет {package_name} экспортирован в папку {path}",
  "SuggestGitPull": "Результат может быть устаревшим. Чтобы получить последние результаты, запустите \"git pull\".",
  "SuggestResolution": "Чтобы попытаться устранить все ошибки сразу, запустите: \nvcpkg {command_name} --{option}",
  "SuggestStartingBashShell": "Чтобы изменения вступили в силу, пожалуйста, проверьте, запустили ли вы новую оболочку bash,",
  "SuggestUpdateVcpkg": "Возможно, нужно обновить двоичный файл vcpkg; попробуйте запустить {command_line} для обновления.",
  "SupportedPort": "Порт {package_name} поддерживается.",
  "SystemApiErrorMessage": "Сбой вызова API {system_api} с кодом завершения {exit_code} ({error_msg})",
  "ToRemovePackages": "Чтобы удалить только устаревшие пакеты, запустите команду\n{command_name} remove --outdated",
  "ToUpdatePackages": "Чтобы обновить эти пакеты и все зависимости, запустите команду обновления\n{command_name}",
  "ToolFetchFailed": "Не удалось получить {tool_name}.",
  "ToolInWin10": "Эта служебная программа поставляется в комплекте с Windows 10 и более поздней версии.",
  "ToolOfVersionXNotFound": "Подходящая версия {tool_name} не найдена (требуется v{version}) и не может автоматически загрузить портативную версию. Установите более новую версию {tool_name}",
  "TotalInstallTime": "Общее время установки: {elapsed}",
  "TrailingCommaInArray": "Конечная запятая в массиве",
  "TrailingCommaInObj": "Конечная запятая в объекте",
  "TripletFileNotFound": "Файл Triplet {triplet}.cmake не найден",
  "TwoFeatureFlagsSpecified": "И '{value}', и -'{value}' были указаны как флаги функций.",
  "UndeterminedToolChainForTriplet": "Не удалось определить использование цепочки инструментов для {triplet} с CMAKE_SYSTEM_NAME {system_name}. Вы хотели использовать VCPKG_CHAINLOAD_TOOLCHAIN_FILE?",
  "UnexpectedByteSize": "Ожидалась запись: {expected}, записано: {actual}.",
  "UnexpectedCharExpectedCloseBrace": "Непредвиденный символ; требуется свойство или закрывающая фигурная скобка",
  "UnexpectedCharExpectedColon": "Непредвиденный символ; ожидается двоеточие",
  "UnexpectedCharExpectedComma": "Непредвиденный символ; ожидается запятая или закрывающая фигурная скобка",
  "UnexpectedCharExpectedName": "Непредвиденный символ; ожидается имя свойства",
  "UnexpectedCharExpectedValue": "Непредвиденный символ; ожидаемое значение",
  "UnexpectedCharMidArray": "Непредвиденный символ в середине массива",
  "UnexpectedCharMidKeyword": "Непредвиденный символ в середине ключевого слова",
  "UnexpectedDigitsAfterLeadingZero": "Непредвиденные цифры после начального нуля",
  "UnexpectedEOFAfterEscape": "Непредвиденный EOF после escape-символа",
  "UnexpectedEOFAfterMinus": "Непредвиденный EOF после знака минуса",
  "UnexpectedEOFExpectedChar": "Непредвиденный символ; ожидается EOF",
  "UnexpectedEOFExpectedCloseBrace": "Непредвиденный EOF; ожидается свойство или закрывающая фигурная скобка",
  "UnexpectedEOFExpectedColon": "Непредвиденный EOF; ожидается двоеточие",
  "UnexpectedEOFExpectedName": "Непредвиденный EOF; ожидается имя свойства",
  "UnexpectedEOFExpectedProp": "Непредвиденный EOF; ожидается свойство",
  "UnexpectedEOFExpectedValue": "Непредвиденный EOF; ожидаемое значение",
  "UnexpectedEOFMidArray": "Непредвиденный EOF в середине массива",
  "UnexpectedEOFMidKeyword": "Непредвиденный EOF в середине ключевого слова",
  "UnexpectedEOFMidString": "Непредвиденный EOF в середине строки",
  "UnexpectedEOFMidUnicodeEscape": "Непредвиденный конец файла в середине escape-кода Юникода",
  "UnexpectedErrorDuringBulkDownload": "произошла неожиданная ошибка при массовом скачивании.",
  "UnexpectedEscapeSequence": "Непредвиденное продолжение escape-последовательности",
  "UnexpectedExtension": "Неожиданное расширение архива: \"{extension}\".",
  "UnexpectedFormat": "Ожидается формат [{expected}], а был [{actual}].",
  "UnexpectedPortName": "порт {expected} объявлен как {actual} в {path}",
  "UnexpectedToolOutput": "Средство {tool_name} ({path}) отобразило непредвиденные выходные данные при попытке определить версию:",
  "UnknownBaselineFileContent": "Базовая запись не распознана; ожидалось \"port:triplet=(fail|skip|pass)\".",
  "UnknownBinaryProviderType": "неизвестный тип бинарного провайдера: допустимыми провайдерами являются «clear», «default», «nuget», «nugetconfig», «nugettimeout», «interactive», «x-azblob», «x-gcs», «x-aws», «x-aws-config», «http» и «файлы»",
  "UnknownMachineCode": "Неизвестный код типа компьютера {value}",
  "UnknownOptions": "Неизвестные параметры для команды '{command_namнеизвестныйe}':",
  "UnknownParameterForIntegrate": "Неизвестный параметр \"{value}\" для интеграции.",
  "UnknownPolicySetting": "Неизвестный параметр политики '{value}': {option}",
  "UnknownSettingForBuildType": "Неизвестный параметр для VCPKG_BUILD_TYPE {опция}. Допустимые параметры: '', 'debug', и 'release'.",
  "UnknownTool": "vcpkg не имеет определения этого инструмента для этой платформы.",
  "UnknownTopic": "неизвестная тема {value}",
  "UnknownVariablesInTemplate": "Недопустимый аргумент. URL-шаблон \"{value}\" содержит неизвестные переменные: {list}.",
  "UnrecognizedConfigField": "конфигурация содержит следующие нераспознанные поля:",
  "UnrecognizedIdentifier": "Нераспознанное имя идентификатора {value}. Добавьте в список переопределений в файле триады.",
  "UnsupportedFeature": "компонент {feature} передан, но он не является компонентом, поддерживаемым {package_name}.",
  "UnsupportedPort": "Порт {package_name} не поддерживается.",
  "UnsupportedPortDependency": "- зависимость {value} не поддерживается.",
  "UnsupportedPortFeature": "{spec} поддерживается только в '{supports_expression}'",
  "UnsupportedShortOptions": "краткие параметры не поддерживаются: '{value}'",
  "UnsupportedSyntaxInCDATA": "]]> не поддерживается в блоке CDATA",
  "UnsupportedSystemName": "Не удалось сопоставить VCPKG_CMAKE_SYSTEM_NAME \"{system_name}\" с платформой vcvarsall. Поддерживаемые имена систем: \"\", \"Windows\" и \"WindowsStore\".",
  "UnsupportedToolchain": "в триплете {triplet}: Не удалось найти допустимую цепочку инструментов для запрошенной целевой архитектуры {arch}.\nВыбранный экземпляр Visual Studio находится в: {path}\nДоступные сочетания наборов инструментов: {list}",
  "UnsupportedUpdateCMD": "команда обновления сейчас не поддерживает режим манифеста. Вместо этого измените vcpkg.json и запустите установку.",
  "UpdateBaselineAddBaselineNoManifest": "ключ --{option} передан, но нет файла манифеста, в который можно было бы добавить поле \"builtin-baseline\".",
  "UpdateBaselineLocalGitError": "сбой GIT при попытке анализа HEAD локального реестра vcpkg в \"{path}\"",
  "UpdateBaselineNoConfiguration": "невозможно обновить \"vcpkg.json\" или \"vcpkg-configuration.json\": файлы не существуют.",
  "UpdateBaselineNoExistingBuiltinBaseline": "файл манифеста в настоящее время не содержит поле \"builtin-baseline\"; чтобы добавить его, передайте ключ --{option}.",
  "UpdateBaselineNoUpdate": "реестр \"{url}\" не обновлен: \"{value}\"",
  "UpdateBaselineRemoteGitError": "GIT не удалось получить удаленный репозиторий \"{url}\"",
  "UpdateBaselineUpdatedBaseline": "обновленный реестр \"{url}\": базовый план \"{old_value}\" -> \"{new_value}\"",
  "UpgradeInManifest": "Команда обновления сейчас не поддерживает режим манифеста. Вместо этого измените vcpkg.json и запустите установку.",
  "UpgradeRunWithNoDryRun": "Если вы действительно хотите повторно собрать перечисленные выше пакеты, запустите эту команду с параметром --no-dry-run.",
  "UploadedBinaries": "Загружены двоичные файлы {count} {vendor}.",
  "UploadedPackagesToVendor": "Отправлено {count} пакетов из {vendor} за {elapsed}",
  "UploadingBinariesToVendor": "Загрузка двоичных файлов для \"{spec}\" в источник \"{vendor}\" \"{path}\".",
  "UploadingBinariesUsingVendor": "Загрузка двоичных файлов для \"{spec}\" с использованием \"{vendor}\" \"{path}\".",
  "UseEnvVar": "-- Использование {env_var} в переменных окружения.",
  "UserWideIntegrationDeleted": "Общепользовательская интеграция не установлена.",
  "UserWideIntegrationRemoved": "Общепользовательская интеграция удалена.",
  "UsingCommunityTriplet": "-- Использование триплета сообщества {triplet}. Успех этой тройной конфигурации не гарантируется.",
  "UsingManifestAt": "Использование файла манифеста в {path}.",
  "Utf8ConversionFailed": "Не удалось преобразовать в UTF-8",
  "VSExaminedInstances": "Рассмотрены следующие экземпляры Visual Studio:",
  "VSExaminedPaths": "Следующие пути проверены на наличие экземпляров Visual Studio:",
  "VSNoInstances": "Не удалось найти полный экземпляр Visual Studio",
  "VcpkgCeIsExperimental": "vcpkg-ce ('configure environment') является экспериментальной функцией и может измениться в любое время.",
  "VcpkgCommitTableHeader": "Фиксация VCPKG",
  "VcpkgCompletion": "Завершение vcpkg {value} уже импортировано в ваш файл \"{path}\".\nНайдены следующие записи:",
  "VcpkgDisallowedClassicMode": "Не удалось найти манифест (vcpkg.json) над текущим рабочим каталогом.\nЭто распределение vcpkg не имеет экземпляра классического режима.",
  "VcpkgHasCrashed": "Сбой vcpkg. Пожалуйста, создайте проблему на https://github.com/microsoft/vcpkg, содержащую краткую сводку о том, что вы пытались сделать, и следующую информацию.",
  "VcpkgInVsPrompt": "Похоже, vcpkg находится в запросе Visual Studio, предназначенном для {value}, но устанавливается для {triplet}. Попробуйте использовать --triplet {value}-windows или --triplet {value}-uwp.",
  "VcpkgInvalidCommand": "недопустимая команда: {command_name}",
  "VcpkgRegistriesCacheIsNotDirectory": "Значение переменной среды X_VCPKG_REGISTRIES_CACHE не является каталогом: {path}",
  "VcpkgRootRequired": "Для изолированной начальной загрузки необходимо настроить VCPKG_ROOT.",
  "VcpkgRootsDir": "Укажите корневой каталог vcpkg. (по умолчанию:\n'{env_var}')",
  "VcpkgSendMetricsButDisabled": "передан --sendmetrics, но метрики отключены.",
  "VersionCommandHeader": "Версия программы управления пакетами vcpkg {version}\n\nСм. LICENSE.txt для получения сведений о лицензии.",
  "VersionConflictXML": "Ожидаемая версия {path}: [{expected_version}], но была [{actual_version}]. Повторно запустите bootstrap-vcpkg.",
  "VersionConstraintViolated": "ожидалось, что версия зависимости {spec} будет не менее {expected_version}, но текущая версия — {actual_version}.",
  "VersionInvalidDate": "\"{version}\" не является допустимой версией даты. Даты должны быть в формате ГГГГ-ММ-ДД, а неоднозначные значения должны быть положительными целыми числами с разделителями-точками без начальных нулей.",
  "VersionInvalidRelaxed": "\"{version}\" не является допустимой нестрогой версией (semver с произвольным количеством числовых элементов).",
  "VersionInvalidSemver": "\"{version}\" не является допустимой семантической версией, см. <https://semver.org>.",
  "VersionSpecMismatch": "Не удалось загрузить порт, так как версии не согласованы. Файл \"{path}\" содержит версию {actual_version}, но база данных версий указывает, что она должна быть {expected_version}.",
  "VersionTableHeader": "Версия",
  "WaitingForChildrenToExit": "Ожидание завершения дочерних процессов...",
  "WaitingToTakeFilesystemLock": "ожидание блокировки файловой системы в {path}...",
  "WarningMessage": "Предупреждение: ",
  "WarningMessageMustUsePrintWarning": "Сообщение с именем {value} начинается с предупреждения: вместо этого его необходимо изменить на prepend WarningMessage в коде.",
  "WarningsTreatedAsErrors": "предыдущие предупреждения, интерпретируемые как ошибки",
  "WhileLookingForSpec": "при поиске {spec}:",
  "WindowsOnlyCommand": "Эта команда поддерживает только Windows.",
  "WroteNuGetPkgConfInfo": "Сведения о конфигурации пакета NuGet записаны в {path}"
}
