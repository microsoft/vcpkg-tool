{
  "AddArtifactOnlyOne": "“{command_line}” 一次只能添加一个项目。",
  "AddCommandFirstArg": "要添加的第一个参数必须是 “artifact” 或 “port”。",
  "AddFirstArgument": "“{command_line}”的第一个参数必须是 “artifact” 或 “port”。",
  "AddPortRequiresManifest": "“{command_line}”需要活动清单文件。",
  "AddPortSucceeded": "已成功将端口添加到 vcpkg.json 文件。",
  "AddRecurseOption": "如果确定要移除它们，请使用 --recurse 选项运行命令。",
  "AddTripletExpressionNotAllowed": "此处不允许使用三元表达式。你可能想要将 `{package_name}:{triplet}` 更改为 `{package_name}`。",
  "AddVersionAddedVersionToFile": "已将版本 {version} 添加到 {path}",
  "AddVersionCommitChangesReminder": "是否记得提交更改?",
  "AddVersionCommitResultReminder": "别忘了提交结果!",
  "AddVersionDetectLocalChangesError": "由于 git 状态输出出现意外格式而跳过对本地更改的检测",
  "AddVersionFileNotFound": "找不到所需的文件 {path}",
  "AddVersionFormatPortSuggestion": "运行 `{command_line}` 以设置文件格式",
  "AddVersionIgnoringOptionAll": "忽略 --{option}，因为已提供端口名称参数",
  "AddVersionLoadPortFailed": "无法加载端口 {package_name}",
  "AddVersionNewFile": "(新建文件)",
  "AddVersionNewShaIs": "新 SHA: {value}",
  "AddVersionNoFilesUpdated": "未更新任何文件",
  "AddVersionNoFilesUpdatedForPort": "没有更新 {package_name} 的文件",
  "AddVersionNoGitSha": "无法获取端口 {package_name} 的 SHA",
  "AddVersionOldShaIs": "旧 SHA: {value}",
  "AddVersionOverwriteOptionSuggestion": "使用 --{option} 绕过此检查",
  "AddVersionPortDoesNotExist": "{package_name} 不存在",
  "AddVersionPortFilesShaChanged": "{package_name} 的已签入文件已更改，但版本未更新",
  "AddVersionPortFilesShaUnchanged": "{package_name} 的已签入文件与版本 {version} 没有更改",
  "AddVersionPortHasImproperFormat": "{package_name} 格式不正确",
  "AddVersionSuggestNewVersionScheme": "在端口“{package_name}”中使用版本方案“{new_scheme}”而不是“{old_scheme}”。\n使用 --{option} 来禁用此检查。",
  "AddVersionUnableToParseVersionsFile": "无法分析版本文件 {path}",
  "AddVersionUncommittedChanges": "{package_name} 存在未提交的更改",
  "AddVersionUpdateVersionReminder": "是否记得更新版本或端口版本?",
  "AddVersionUseOptionAll": "没有参数的 {command_name} 需要传递 --{option} 才能一次性更新所有端口版本",
  "AddVersionVersionAlreadyInFile": "版本 {version} 已在 {path} 中",
  "AddVersionVersionIs": "版本: {version}",
  "AddingCompletionEntry": "正在将 vcpkg 完成项添加到 {path}。",
  "AdditionalPackagesToExport": "需要导出其他包(*)才能完成此操作。",
  "AdditionalPackagesToRemove": "需要移除其他包(*)才能完成此操作。",
  "AllFormatArgsRawArgument": "格式字符串 \"{value}\" 包含原始格式参数",
  "AllFormatArgsUnbalancedBraces": "格式字符串中的不均衡大括号 \"{value}\"",
  "AllPackagesAreUpdated": "所有已安装的包都通过本地端口文件保持最新。",
  "AlreadyInstalled": "已安装 {spec}",
  "AlreadyInstalledNotHead": "已安装 {spec} - 未从 HEAD 生成",
  "AndroidHomeDirMissingProps": "{env_var} 目录中缺少 source.properties: {path}",
  "AnotherInstallationInProgress": "计算机上正在进行另一个安装，重试前休眠 6 秒。",
  "AppliedUserIntegration": "已为此 vcpkg 根应用用户范围的集成。",
  "ArtifactsOptionIncompatibility": "--{option} 对查找项目没有影响。",
  "AssetSourcesArg": "为资产缓存添加源。请参阅“vcpkg 帮助 assetcaching”。",
  "AttemptingToFetchPackagesFromVendor": "正在尝试从 {vendor} 提取 {count} 个包",
  "AuthenticationMayRequireManualAction": "一个或多个 {vendor} 凭据提供程序请求手动操作。添加二进制源 “interactive” 以允许交互。",
  "AutoSettingEnvVar": "-- 正在将 {env_var} 环境变量自动设置为“{url}”。",
  "AutomaticLinkingForMSBuildProjects": "所有 MSBuild C++ 项目现在可以#包含任何已安装的库。系统将自动处理链接。安装新库将使它们立即可用。",
  "AvailableArchitectureTriplets": "可用的体系结构三元组:",
  "AvailableHelpTopics": "可用的帮助主题:",
  "BaselineFileNoDefaultField": "提交 {commit_sha} 处的基线文件无效(无“默认”字段)。",
  "BaselineMissingDefault": "提交存储库 {url} 中的 `\"{commit_sha}\"` 中的 baseline.json 无效(不包含“default”字段)。",
  "BinarySourcesArg": "添加用于二进制缓存的源。请参阅“vcpkg 帮助 binarycaching”。",
  "BothYesAndNoOptionSpecifiedError": "无法同时指定 --no-{option} 和 --{option}。",
  "BuildAlreadyInstalled": "已安装{spec}；请在尝试生成之前先删除{spec}。",
  "BuildDependenciesMissing": "内部版本命令要求已安装所有依赖项。\n缺少以下依赖项:",
  "BuildResultBuildFailed": "BUILD_FAILED",
  "BuildResultCacheMissing": "CACHE_MISSING",
  "BuildResultCascadeDueToMissingDependencies": "CASCADED_DUE_TO_MISSING_DEPENDENCIES",
  "BuildResultDownloaded": "已下载",
  "BuildResultExcluded": "已排除",
  "BuildResultFileConflicts": "FILE_CONFLICTS",
  "BuildResultPostBuildChecksFailed": "POST_BUILD_CHECKS_FAILED",
  "BuildResultRemoved": "已删除",
  "BuildResultSucceeded": "成功",
  "BuildResultSummaryHeader": "{triplet} 的摘要",
  "BuildResultSummaryLine": "{build_result}: {count} 个",
  "BuildTreesRootDir": "(实验性)指定 buildtrees 根目录。",
  "BuildTroubleshootingMessage1": "请确保使用具有“git pull” 和 “vcpkg update”的最新端口文件。\n然后，在以下位置查看已知问题:",
  "BuildTroubleshootingMessage2": "可在以下位置提交新问题:",
  "BuildTroubleshootingMessage3": "在 Bug 报告标题中包含“[{package_name}] 内部版本错误”，bug 描述中的以下版本信息，并从上面附加任何相关的失败日志。",
  "BuildTroubleshootingMessage4": "报告问题时，请使用 {path} 中的预填充模板。",
  "BuildingFromHead": "正在从 HEAD 生成 {spec}...",
  "BuildingPackage": "正在生成 {spec}...",
  "BuildingPackageFailed": "生成 {spec} 失败，结果为: {build_result}",
  "BuildingPackageFailedDueToMissingDeps": "由于缺少以下依赖项:",
  "BuiltInTriplets": "vcpkg 内置三元组:",
  "CMakeTargetsUsage": "{package_name} 提供 CMake 目标:",
  "CMakeTargetsUsageHeuristicMessage": "# 这是启发式生成的，并且可能不正确",
  "CMakeToolChainFile": "CMake 项目应使用:“-DCMAKE_TOOLCHAIN_FILE={path}”",
  "CMakeUsingExportedLibs": "要在 CMake 项目中使用导出的库，请将 {value} 添加到 CMake 命令行。",
  "ChecksFailedCheck": "vcpkg 已崩溃；没有其他详细信息可用。",
  "ChecksUnreachableCode": "已访问无法访问的代码",
  "ChecksUpdateVcpkg": "通过重新运行 bootstrap-vcpkg 更新 vcpkg 可能会解决此故障。",
  "CiBaselineAllowUnexpectedPassingRequiresBaseline": "只有当通过 --ci-baseline 提供基线时才能使用 --allow-unexpected-passing。",
  "CiBaselineDisallowedCascade": "回归: {spec} 已级联，但需要它才能通过。({path})。",
  "CiBaselineRegression": "REGRESSION: {spec} 失败，结果为 {build_result}。如果在预期之内，则添加 {spec}=fail to {path}。",
  "CiBaselineRegressionHeader": "回归测试:",
  "CiBaselineUnexpectedPass": "正在通过，从失败列表中删除: {spec} ({path})。",
  "ClearingContents": "正在清除 {path} 的内容",
  "CmakeTargetsExcluded": "注意: 未显示其他 {count} 个目标。",
  "CommandFailed": "命令:\n{command_line}\n失败，结果如下:",
  "CommunityTriplets": "VCPKG 社区三元组:",
  "ComparingUtf8Decoders": "比较具有不同来源的 Utf8Decoder；这始终是一个错误",
  "CompressFolderFailed": "无法压缩文件夹“{path}”:",
  "ComputingInstallPlan": "正在计算安装计划...",
  "ConflictingFiles": "以下文件已安装在 {path} 中，并与 {spec} 发生冲突",
  "ConflictingValuesForOption": "为“--{option}”指定的值冲突。",
  "ConstraintViolation": "发现约束冲突:",
  "ContinueCodeUnitInStart": "在“开始”位置找到了继续码位",
  "ControlAndManifestFilesPresent": "端口目录中同时存在清单文件和 CONTROL 文件: {path}",
  "ControlCharacterInString": "字符串中的控件字符",
  "CopyrightIsDir": "已弃用作为目录的 `{path}`。",
  "CorruptedDatabase": "数据库已损坏。",
  "CorruptedInstallTree": "你的 vcpkg “installed” 树已损坏。",
  "CouldNotDeduceNugetIdAndVersion": "无法从文件名推导出 nuget ID 和版本: {path}",
  "CouldNotFindBaseline": "找不到基线文件 {path} 中显式指定的基线 `\"{commit_sha}\"`",
  "CouldNotFindBaselineForRepo": "找不到存储库 {package_name} 的基线 `\"{commit_sha}\"`",
  "CouldNotFindBaselineInCommit": "在存储库 {package_name} 的提交 `\"{commit_sha}\"` 中找不到基线:",
  "CouldNotFindGitTreeAtCommit": "在提交 {commit_sha} 的存储库 {package_name} 中找不到 `versions` 的 git 树",
  "CreateFailureLogsDir": "正在创建失败日志输出目录 {path}。",
  "CreatedNuGetPackage": "已创建 nupkg: {path}",
  "Creating7ZipArchive": "正在创建 7zip 存档...",
  "CreatingNugetPackage": "正在创建 NuGet 包...",
  "CreatingZipArchive": "正在创建 zip 存档...",
  "CreationFailed": "创建 {path} 失败。",
  "CurlFailedToExecute": "curl 无法执行，退出代码为 {exit_code}。",
  "CurlReportedUnexpectedResults": "curl 向 vcpkg 报告了意外结果，vcpkg 无法继续。\n请查看以下文本以获取敏感信息，并在 Microsoft/vcpkg GitHub 上打开问题以帮助解决此问题!\ncmd: {command_line}\n=== curl 输出 ===\n{actual}\n=== 结束 curl 输出 ===",
  "CurlReturnedUnexpectedResponseCodes": "curl 返回的响应代码数不同于请求的预期数量({actual} 与预期的 {expected})。",
  "DateTableHeader": "日期",
  "DefaultBrowserLaunched": "已启动默认浏览器到 {url}。",
  "DefaultFlag": "默认为 --{option} 处于打开状态。",
  "DefaultPathToBinaries": "根据系统设置，存储二进制文件的默认路径为“{path}”。这会在 Windows 上咨询 %LOCALAPPDATA%/%APPDATA%，并在其他平台上咨询 $XDG_CACHE_HOME 或 $HOME。",
  "DeprecatedPrefabDebugOption": "--prefab-debug 现已弃用。",
  "DetectCompilerHash": "正在检测三元组 {triplet} 的编译器哈希...",
  "DocumentedFieldsSuggestUpdate": "如果这些是应识别的文档字段，请尝试更新 vcpkg 工具。",
  "DownloadAvailable": "此工具的可下载副本可用，可通过取消设置 {env_var} 使用它。",
  "DownloadRootsDir": "指定下载根目录.\n(默认值: {env_var})",
  "DownloadedSources": "已下载的 {spec} 源",
  "DownloadingVcpkgCeBundle": "正在下载 vcpkg-ce 捆绑包 {version}...",
  "DownloadingVcpkgCeBundleLatest": "正在下载最新的 vcpkg-ce 捆绑包...",
  "DownloadingVcpkgStandaloneBundle": "正在下载独立捆绑包 {version}。",
  "DownloadingVcpkgStandaloneBundleLatest": "正在下载最新的独立捆绑包。",
  "DuplicateCommandOption": "选项 --{option} 只能传递一次。",
  "DuplicateOptions": "“--{value}”指定了多次。",
  "DuplicatedKeyInObj": "重复的密钥 \"{value}\" 在对象中",
  "ElapsedForPackage": "处理 {spec} 所用时间: {elapsed}",
  "ElapsedInstallTime": "总运行时间: {count}",
  "ElapsedTimeForChecks": "确定通过/失败所用的时间: {elapsed}",
  "EmailVcpkgTeam": "向 {url} 发送电子邮件并提供任何反馈。",
  "EmptyArg": "选项 --{option} 必须传递非空参数。",
  "EmptyLicenseExpression": "SPDX 许可证表达式为空。",
  "EndOfStringInCodeUnit": "在码位中间找到了字符串结尾",
  "EnvStrFailedToExtract": "无法展开环境字符串:",
  "ErrorDetectingCompilerInfo": "检测编译器信息时: \n“{path}”下的日志文件内容为:",
  "ErrorIndividualPackagesUnsupported": "在清单模式下，`vcpkg install` 不支持单个包参数。\n要安装其他包，请编辑 vcpkg.json，然后在没有任何包参数的情况下运行 `vcpkg install`。",
  "ErrorInvalidClassicModeOption": "在经典模式下不支持选项 --{option}，并且未找到任何清单。",
  "ErrorInvalidManifestModeOption": "清单模式下不支持选项 --{option}。",
  "ErrorMessage": "错误:",
  "ErrorMessageMustUsePrintError": "名为 {value} 的消息以错误开头:，必须在代码中将其更改为在前面追加 ErrorMessage。",
  "ErrorMissingVcpkgRoot": "无法检测 vcpkg-root。如果尝试使用已生成的 vcpkg 的副本，则必须定义 VCPKG_ROOT 环境变量，以指向 https://github.com/Microsoft/vcpkg 的克隆副本。",
  "ErrorNoVSInstance": "在三元组 {triplet} 中: 无法找到有效的 Visual Studio 实例",
  "ErrorNoVSInstanceAt": "位于“{path}”",
  "ErrorNoVSInstanceFullVersion": "具有工具集版本前缀 {version}",
  "ErrorNoVSInstanceVersion": "具有工具集版本 {version}",
  "ErrorParsingBinaryParagraph": "分析 {spec} 的二进制段落时",
  "ErrorRequireBaseline": "此 vcpkg 实例需要具有指定基线的清单才能与端口交互。请将 “builtin-baseline” 添加到清单或添加 “vcpkg-configuration.json”，以重新定义默认注册表。",
  "ErrorRequirePackagesList": "`vcpkg install` 需要在经典模式下安装包的列表。",
  "ErrorUnableToDetectCompilerInfo": "vcpkg 无法检测活动编译器的信息。请参阅上述有关 CMake 故障输出的信息。",
  "ErrorVcvarsUnsupported": "在三元组 {triplet} 中: 非 Windows 主机不支持使用 Visual Studio 的开发人员提示。\n在三元组文件中定义 “VCPKG_CMAKE_SYSTEM_NAME” 或 “VCPKG_CHAINLOAD_TOOLCHAIN_FILE”。",
  "ErrorVsCodeNotFound": "找不到 Visual Studio Code，并且未设置环境变量 {env_var} 或该变量无效。",
  "ErrorVsCodeNotFoundPathExamined": "已检查以下路径:",
  "ErrorWhileFetchingBaseline": "从存储库提取基线 `\"{value}\"` 时 {package_name}:",
  "ErrorWhileParsing": "分析 {path} 时出错。",
  "ErrorWhileWriting": "写入 {path} 时出错",
  "ErrorsFound": "发现以下错误:",
  "ExceededRecursionDepth": "已超过递归深度。",
  "ExcludedPackage": "已排除 {spec}",
  "ExcludedPackages": "已排除以下包:",
  "ExpectedAtMostOneSetOfTags": "在 block:\n{value} 中找到了 {count} 组 {old_value}.*{new_value} 集，但应最多为 1",
  "ExpectedCascadeFailure": "预期级联失败次数为 {expected}，而实际级联失败次数为 {actual}。",
  "ExpectedCharacterHere": "此处应为“{expected}”",
  "ExpectedDigitsAfterDecimal": "小数点后的预期数字",
  "ExpectedFailOrSkip": "此处应为“失败”、“跳过”或“通过”",
  "ExpectedOneSetOfTags": "在 block:\n{value} 中找到了 {count} 组 {old_value}.*{new_value} 集，但应恰好为 1",
  "ExpectedPortName": "此处需要填写端口名称",
  "ExpectedStatusField": "状态段落中应为 “status” 字段",
  "ExpectedTripletName": "此处需要填写三联名称",
  "ExpectedValueForOption": "应为 --{option} 之后的值。",
  "ExportArchitectureReq": "导出预制需要至少面向以下当前体系结构之一: arm64-v8a、armeabi-v7a、x86_64、x86。",
  "ExportPrefabRequiresAndroidTriplet": "导出预制需要使用 Android 三件套。",
  "ExportUnsupportedInManifest": "考虑到将来的设计，vcpkg 导出不支持清单模式。可以通过在基于清单的项目外部运行 vcpkg 在经典模式下使用导出。",
  "Exported7zipArchive": "7zip 存档导出位置: {path}",
  "ExportedZipArchive": "Zip 存档导出位置: {path}",
  "ExportingAlreadyBuiltPackages": "已生成并将导出以下包:",
  "ExportingMaintenanceTool": "正在导出维护工具...",
  "ExportingPackage": "正在导出 {package_name}...",
  "ExtendedDocumentationAtUrl": "可在“{url}”上找到扩展文档。",
  "FailedToCheckoutRepo": "未能从存储库 {package_name} 签出“版本”",
  "FailedToDownloadFromMirrorSet": "未能从镜像集下载",
  "FailedToExtract": "无法提取“{path}”:",
  "FailedToFetchError": "{error_msg}\n无法提取 {package_name}:",
  "FailedToFindBaseline": "未能找到 baseline.json",
  "FailedToFindPortFeature": "在 {spec} 中找不到 {feature}。",
  "FailedToFormatMissingFile": "没有要设置格式的文件。\n请传递 --all 或要设置格式或转换的显式文件。",
  "FailedToLoadInstalledManifest": "由于以下错误，无法加载 {spec} 的控件或清单文件。请移除 {spec}，然后重试。",
  "FailedToLoadPort": "未能从 {path} 加载端口 {package_name}",
  "FailedToLoadPortFrom": "未能从 {path} 加载端口",
  "FailedToLoadUnnamedPortFromPath": "未能从 {path} 加载端口",
  "FailedToLocateSpec": "未能在图形中定位规范: {spec}",
  "FailedToObtainDependencyVersion": "找不到所需的依赖项版本。",
  "FailedToObtainLocalPortGitSha": "无法获取本地端口的 git SHA。",
  "FailedToObtainPackageVersion": "找不到所需的包版本。",
  "FailedToParseCMakeConsoleOut": "未能分析 CMake 控制台输出以定位块开始/结束标记。",
  "FailedToParseControl": "无法分析控制文件: {path}",
  "FailedToParseJson": "无法分析 JSON 文件: {path}",
  "FailedToParseManifest": "未能分析清单文件: {path}",
  "FailedToParseSerializedBinParagraph": "[健全性检查]无法分析序列化二进制段落。\n请在 https://github.com/microsoft/vcpkg 提出问题，附加以下输出: \n{error_msg}\n序列化二进制段落:",
  "FailedToProvisionCe": "无法预配 vcpkg-ce。",
  "FailedToRead": "无法读取 {path}: {error_msg}",
  "FailedToReadParagraph": "无法从 {path} 读取段落",
  "FailedToRemoveControl": "未能删除控制文件 {path}",
  "FailedToRunToolToDetermineVersion": "无法运行“{path}”以确定 {tool_name} 版本。",
  "FailedToStoreBackToMirror": "无法存储回镜像:",
  "FailedToStoreBinaryCache": "无法存储二进制缓存 {path}",
  "FailedToWriteManifest": "未能写入清单文件 {path}",
  "FailedVendorAuthentication": "一个或多个 {vendor} 凭据提供程序无法进行身份验证。有关如何提供凭据的更多详细信息，请参阅“{url}”。",
  "FeedbackAppreciated": "非常感谢你提供反馈!",
  "FetchingBaselineInfo": "正在从 {package_name} 提取基线信息...",
  "FetchingRegistryInfo": "正在从 {url} ({value}) 提取注册表信息...",
  "FileNotFound": "{path}: 未找到文件",
  "FileSystemOperationFailed": "文件系统操作失败:",
  "FilesExported": "文件导出位置: {path}",
  "FishCompletion": "已在“{path}”下添加 vcpkg fish 完成。",
  "FloatingPointConstTooBig": "浮点常量太大: {count}",
  "FollowingPackagesMissingControl": "以下包没有有效的 CONTROL 或 vcpkg.json:",
  "FollowingPackagesNotInstalled": "未安装以下包:",
  "FollowingPackagesUpgraded": "以下包是最新的:",
  "ForceSystemBinariesOnWeirdPlatforms": "必须在 arm、s390x、ppc64le 平台上设置环境变量 VCPKG_FORCE_SYSTEM_BINARIES。",
  "FormattedParseMessageExpression": "在表达式上: {value}",
  "GenerateMsgErrorParsingFormatArgs": "正在分析 {value} 的格式字符串:",
  "GenerateMsgIncorrectComment": "消息 {value} 的注释不正确:",
  "GenerateMsgNoArgumentValue": "已在注释中指定 {{{value}}}，但未在消息中使用。",
  "GenerateMsgNoCommentValue": "已在邮件中使用 {{{value}}}，但未进行注释。",
  "GeneratedConfiguration": "生成的配置 {path}。",
  "GeneratedInstaller": "已生成 {path} 安装程序。",
  "GeneratingConfiguration": "正在生成配置 {path}...",
  "GeneratingInstaller": "正在生成安装程序 {path}...",
  "GeneratingRepo": "正在生成存储库 {path}...",
  "GetParseFailureInfo": "使用 “--debug” 获取有关分析失败的详细信息。",
  "GitCommandFailed": "执行 {command_line} 失败",
  "GitRegistryMustHaveBaseline": "\"{package_name}\"的 GIT 注册表项必须具有“baseline”字段，该字段是有效的 git 提交 SHA (40 个十六进制字符)。\n该存储库的当前头为 \"{value}\"。",
  "GitStatusOutputExpectedFileName": "应输入文件名",
  "GitStatusOutputExpectedNewLine": "预期的新行",
  "GitStatusOutputExpectedRenameOrNewline": "应重命名的文件或新行",
  "GitStatusUnknownFileStatus": "未知文件状态: {value}",
  "GitUnexpectedCommandOutput": "意外的 git 输出",
  "GraphCycleDetected": "在 {package_name} 的图形中检测到循环:",
  "HashFileFailureToRead": "无法读取用于哈希的文件“{path}”: ",
  "HeaderOnlyUsage": "{package_name} 是仅限标头的，可通过以下方式从 CMake 使用:",
  "HelpBuiltinBase": "基线引用 vcpkg 存储库中针对图中每个依赖项建立最低版本的提交。例如，如果未指定其他约束(直接或以可传递方式)，则版本将解析为顶级清单的基线。将忽略可传递依赖项的基线。",
  "HelpContactCommand": "显示联系人信息以发送反馈。",
  "HelpCreateCommand": "创建新端口。",
  "HelpDependInfoCommand": "显示端口的依赖项列表。",
  "HelpEditCommand": "打开用于编辑的端口(使用环境变量“{env_var}”设置编辑器程序，默认为 “code”)。",
  "HelpEnvCommand": "创建用于开发或编译的干净 shell 环境。",
  "HelpExampleCommand": "有关更多帮助(包括示例)，请参阅随附的 README.md 和文档文件夹。",
  "HelpExampleManifest": "示例清单:",
  "HelpExportCommand": "导出包。",
  "HelpFormatManifestCommand": "设置所有 vcpkg.json 文件的格式。在提交到 vcpkg 之前运行此命令。",
  "HelpHashCommand": "按特定算法哈希文件，默认为 SHA512。",
  "HelpInitializeRegistryCommand": "初始化目录 <path> 中的注册表。",
  "HelpInstallCommand": "安装包。",
  "HelpListCommand": "列出已安装的包。",
  "HelpManifestConstraints": "清单可以对所使用的版本施加三种约束",
  "HelpMinVersion": "Vcpkg 将选择找到的与所有适用约束匹配的最低版本，包括在顶级指定的基线中的版本以及图中的任何 “version>=” 约束。",
  "HelpOverrides": "当用作顶级清单(例如在目录中运行 `vcpkg install` 时)，替代允许清单短路依赖项解析，并精确指定要使用的版本。可将这些用于处理版本冲突，例如使用 `version-string` 依赖项。如果以可传递方式以来它们，则将不会考虑它们。",
  "HelpOwnsCommand": "搜索已安装包中的文件。",
  "HelpPackagePublisher": "此外，包发布者可以使用 “version>=” 约束，以确保使用者至少使用某个特定最低版本的给定依赖项。例如，如果库需要在 1.70 中将 API 添加到 boost-asio，则 “version>=” 约束将确保可传递用户使用足够的版本，即使在单独的版本替代或跨注册表引用的情况下也是如此。",
  "HelpPortVersionScheme": "此外，每个版本还有一个非负整数的“端口版本”。在呈现为文本时，端口版本(如果非零)将作为后缀添加到由哈希(#)分隔的主版本文本中。端口版本在主版本文本后按字母顺序排序，例如:\n1.0.0 < 1.0.0#1 < 1.0.1 < 1.0.1#5 < 2.0.0",
  "HelpRemoveCommand": "卸载包。",
  "HelpRemoveOutdatedCommand": "卸载所有过期包。",
  "HelpResponseFileCommand": "指定响应文件以提供其他参数。",
  "HelpSearchCommand": "搜索可生成的包。",
  "HelpTopicCommand": "显示特定主题的帮助。",
  "HelpTopicsCommand": "显示帮助主题列表。",
  "HelpUpdateBaseline": "使库保持最新的最佳方法是更新基线引用。这将确保更新所有包(包括可传递包)。但如果需要单独更新包，则可以使用 “version>=” 约束。",
  "HelpUpdateCommand": "列出可以更新的包。",
  "HelpUpgradeCommand": "重新生成所有过时的包。",
  "HelpVersionCommand": "显示版本信息。",
  "HelpVersionDateScheme": "日期(2021-01-01.5)",
  "HelpVersionGreater": "在“依赖项”字段中，每个依赖项可以列出最小约束。如果这些最小约束以可传递方式依赖于此库，则将使用这些最小约束。此外，还可以使用 “#” 后缀指定最低端口版本。",
  "HelpVersionScheme": "以点分隔的数字序列(1.2.3.4)",
  "HelpVersionSchemes": "已接受以下版本控制方案。",
  "HelpVersionSemverScheme": "语义版本 2.0 (2.1.0-rc2)",
  "HelpVersionStringScheme": "精确、不兼容的版本(Vista)",
  "HelpVersioning": "使用版本控制，可以从清单文件中确定性地控制项目所用依赖项的精确修订。",
  "IgnoringVcpkgRootEnvironment": "忽略 VCPKG_ROOT 环境变量；使用 --vcpkg-root“{path}”来使用环境值，或取消设置 VCPKG_ROOT 环境变量来抑制此消息。使用检测到的 vcpkg 根:“{actual}”。",
  "IllegalFeatures": "在此上下文中不允许使用功能列表",
  "IllegalPlatformSpec": "此上下文中不允许使用平台限定符",
  "ImproperShaLength": "SHA512 必须是 128 个十六进制字符: {value}",
  "IncorrectArchiveFileSignature": "存档文件签名不正确",
  "IncorrectLibHeaderEnd": "lib 标头结尾不正确",
  "IncorrectNumberOfArgs": "“{command_name}”需要“{expected}”个参数，但提供了“{actual}”个。",
  "IncorrectPESignature": "PE 签名不正确",
  "IncrementedUtf8Decoder": "字符串末尾的增量 Utf8Decoder",
  "InfoSetEnvVar": "还可以将环境变量“{env_var}”设置为所选编辑器。",
  "InitRegistryFailedNoRepo": "无法在 {path} 下创建注册表，因为这不是 git 存储库根路径。\n请使用“git init {command_line}”在此文件夹中创建 git 存储库。",
  "InstallFailed": "失败: {path}: {error_msg}",
  "InstallPackageInstruction": "打开项目后，转到“工具”>“NuGet 包管理器”>“包管理器控制台”并粘贴:\n 安装包“{value}”- 源“{path}”",
  "InstallRootDir": "(实验性)指定安装根目录。",
  "InstallWithSystemManager": "可以通过系统包管理器安装此工具。",
  "InstallWithSystemManagerMono": "Ubuntu 18.04 用户可能需要较新版本的 mono，可通过 {url} 获得。",
  "InstallWithSystemManagerPkg": "可以通过系统包管理器({command_line})安装此工具。",
  "InstalledBy": "已由 {path} 安装",
  "InstalledPackages": "已安装以下包:",
  "InstalledRequestedPackages": "当前已安装所有请求的包。",
  "InstallingFromLocation": "-- 正从以下位置安装端口: {path}",
  "InstallingMavenFile": "{path} 正在安装 maven 文件",
  "InstallingPackage": "正在安装 {action_index}/{count} 个 {spec}...",
  "IntegrationFailed": "未应用集成。",
  "InternalCICommand": "vcpkg ci 是一个内部命令，它将发生不兼容更改或随时被删除。",
  "InternalErrorMessage": "内部错误: ",
  "InternalErrorMessageContact": "请在 https://github.com/microsoft/vcpkg/issues/new?template=other-type-of-bug-report.md&labels=category:vcpkg-bug 打开一个包含重现问题的详细步骤的问题。",
  "InvalidArgMustBeAnInt": "--{option} 必须是整数。",
  "InvalidArgMustBePositive": "--{option} 必须为非负值。",
  "InvalidArgument": "参数无效",
  "InvalidArgumentRequiresAbsolutePath": "参数无效: 二进制配置字符串的二进制配置“{binary_source}”路径参数必须是绝对参数",
  "InvalidArgumentRequiresBaseUrl": "参数无效: 二进制配置“{binary_source}”要求将 {base_url} 基 URL 作为第一个参数",
  "InvalidArgumentRequiresBaseUrlAndToken": "参数无效: 二进制配置“{binary_source}”至少需要一个基 URL 和一个 SAS 令牌",
  "InvalidArgumentRequiresNoneArguments": "参数无效: 二进制配置“{binary_source}”不接受参数",
  "InvalidArgumentRequiresOneOrTwoArguments": "参数无效: 二进制配置“{binary_source}”需要 1 或 2 个参数",
  "InvalidArgumentRequiresPathArgument": "参数无效: 二进制配置“{binary_source}”至少需要一个路径参数",
  "InvalidArgumentRequiresPrefix": "参数无效: 二进制配置“{binary_source}”至少需要一个前缀",
  "InvalidArgumentRequiresSingleArgument": "参数参数无效: 二进制配置“{binary_source}”不接受多个参数",
  "InvalidArgumentRequiresSingleStringArgument": "参数无效: 二进制配置“{binary_source}”需要单个字符串参数",
  "InvalidArgumentRequiresSourceArgument": "参数无效: 二进制配置“{binary_source}”至少需要一个源参数",
  "InvalidArgumentRequiresTwoOrThreeArguments": "参数无效: 二进制配置“{binary_source}”需要 2 或 3 个参数",
  "InvalidArgumentRequiresValidToken": "参数无效: 二进制配置“{binary_source}”需要 SAS 令牌，不需要将前面的“?”作为第二个参数",
  "InvalidBuildInfo": "包的 BUILD_INFO 文件无效: {error_msg}",
  "InvalidCodePoint": "传递给 utf8_encoded_code_point_count 的码位无效",
  "InvalidCodeUnit": "代码单元无效",
  "InvalidCommandArgSort": "--sort 的值必须是 “lexicographical”、“topological”、“reverse” 之一。",
  "InvalidCommentStyle": "vcpkg 不支持 c 样式注释，但大多数对象允许将 $ 前缀字段用作注释。",
  "InvalidCommitId": "提交 ID 无效: {commit_sha}",
  "InvalidFileType": "失败: {path} 无法处理文件类型",
  "InvalidFilename": "文件名不能包含无效字符 {value}，但为 {path}",
  "InvalidFloatingPointConst": "无效的浮点常量: {count}",
  "InvalidFormatString": "格式字符串无效: {actual}",
  "InvalidHexDigit": "unicode 转义中的十六进制数字无效",
  "InvalidIntegerConst": "无效的整数常量: {count}",
  "InvalidLinkage": "{system_name} 链接类型无效: [{value}]",
  "InvalidOptionForRemove": "“remove” 接受库或 “--outdated”",
  "InvalidPortVersonName": "找到无效的端口版本文件名: `{path}`。",
  "InvalidString": "传递给 Value::string(std::string) 的 utf8 无效",
  "InvalidTriplet": "三元组 {triplet} 无效",
  "IrregularFile": "路径不是常规文件: {path}",
  "JsonErrorMustBeAnObject": "预期的“{path}”应为对象。",
  "JsonFileMissingExtension": "JSON 文件 {path} 必须具有 .json (全小写)扩展名",
  "JsonSwitch": "(实验性)请求 JSON 输出。",
  "JsonValueNotArray": "json 值不是数组",
  "JsonValueNotObject": "json 值不是对象",
  "JsonValueNotString": "json 值不是字符串",
  "LaunchingProgramFailed": "正在启动 {tool_name}:",
  "LicenseExpressionContainsExtraPlus": "SPDX 许可证表达式包含额外的 \"+\"。只有在许可证标识符之后才允许使用这些标识符。",
  "LicenseExpressionContainsInvalidCharacter": "SPDX 许可证表达式包含无效字符 (0x{value:02X} '{value}')。",
  "LicenseExpressionContainsUnicode": "SPDX 许可证表达式包含 unicode 字符(U+{value: 04X}\"{pretty_value}\")，但这些表达式仅限 ASCII。",
  "LicenseExpressionDocumentRefUnsupported": "当前实现不支持 DocumentRef- SPDX 引用。",
  "LicenseExpressionExpectCompoundFoundParen": "应为复合或字符串末尾，找到了一个括号。",
  "LicenseExpressionExpectCompoundFoundWith": "应为 AND 或 OR，找到 WITH (仅允许在许可证名称后使用 WITH，而不允许使用带圆括号表达式)。",
  "LicenseExpressionExpectCompoundFoundWord": "应为 AND 或 OR，找到许可证或异常名称: \"{value}\"。",
  "LicenseExpressionExpectCompoundOrWithFoundWord": "应为 AND、OR 或 WITH，找到许可证或异常名称: \"{value}\"。",
  "LicenseExpressionExpectExceptionFoundCompound": "应为异常名称，找到了复合项 {value}。",
  "LicenseExpressionExpectExceptionFoundEof": "应为异常名称，找到了字符串的末尾。",
  "LicenseExpressionExpectExceptionFoundParen": "应为异常名称，找到了一个括号。",
  "LicenseExpressionExpectLicenseFoundCompound": "应为许可证名称，找到了复合项 {value}。",
  "LicenseExpressionExpectLicenseFoundEof": "应为许可证名称，找到了字符串的末尾。",
  "LicenseExpressionExpectLicenseFoundParen": "应为许可证名称，找到一个括号。",
  "LicenseExpressionImbalancedParens": "有一个不带左括号的右括号。",
  "LicenseExpressionUnknownException": "未知的许可证异常标识符 \"{value}\"。已知值列在 https://spdx.org/licenses/exceptions-index.html 中",
  "LicenseExpressionUnknownLicense": "未知的许可证标识符 \"{value}\"。已知值列在 https://spdx.org/licenses/ 中",
  "ListOfValidFieldsForControlFiles": "这是 CONTROL 文件的有效字段列表(区分大小写):",
  "LoadingCommunityTriplet": "-- [COMMUNITY] 正在从以下位置加载三联配置: {path}",
  "LoadingDependencyInformation": "正在加载 {count} 个包的依赖项信息...",
  "LoadingOverlayTriplet": "-- [OVERLAY] 正在从以下位置加载三联配置: {path}",
  "LocalizedMessageMustNotContainIndents": "名为 {value} 的消息包含似乎正在缩进的内容，必须将其更改为使用 LocalizedString::append_indent。",
  "LocalizedMessageMustNotEndWithNewline": "名为 {value} 的消息以换行符结尾，这应通过格式设置而不是本地化来添加。",
  "ManifestConflict": "在端口“{path}”中找到了清单和 CONTROL 文件；请重命名一个或另一个",
  "ManifestFormatCompleted": "已成功设置清单文件的格式。",
  "MismatchedFiles": "要存储的文件与哈希不匹配",
  "MismatchedNames": "名称不匹配:“{package_name}”!=“{actual}”",
  "Missing7zHeader": "找不到 7z 标头。",
  "MissingAndroidEnv": "缺少 ANDROID_NDK_HOME 环境变量",
  "MissingAndroidHomeDir": "ANDROID_NDK_HOME 目录不存在: {path}",
  "MissingArgFormatManifest": "已传递 format-manifest --convert-control 而不使用 “--all”。\n这不执行任何操作: 显式传递的控件文件将自动转换。",
  "MissingDependency": "已安装包 {spec}，但未安装依赖项 {package_name}。",
  "MissingExtension": "缺少“{extension}”扩展名。",
  "MissingOption": "此命令需要 --{option}",
  "MissingPortSuggestPullRequest": "如果未列出你的端口，请在发出和/或考虑发出拉取请求时开立问题。",
  "MissmatchedBinParagraphs": "序列化二进制段落不同于原始二进制段落。请在 https://github.com/microsoft/vcpkg 提出问题，附加以下输出:",
  "MonoInstructions": "这可能是由于 mono 安装不完整所导致的。通过 `sudo apt install mono-complete` 可以在某些系统上完整的 mono。Ubuntu 18.04 用户可能需要较新版本的 mono。要获取该版本，请访问 https://www.mono-project.com/download/stable/",
  "MsiexecFailedToExtract": "msiexec 在提取“{path}”时失败，启动或退出代码 {exit_code} 和消息:",
  "MultiArch": "多体系结构必须“相同”，但此前为 {option}",
  "MutuallyExclusiveOption": "--{value} 不能与 --{option} 一起使用。",
  "NavigateToNPS": "请在首选浏览器中导航到 {url}。",
  "NewConfigurationAlreadyExists": "创建清单将覆盖位于 {path} 下的 vcpkg-configuration.json。",
  "NewManifestAlreadyExists": "{path} 下已存在清单。",
  "NewNameCannotBeEmpty": "--name 不能为空。",
  "NewOnlyOneVersionKind": "只能指定 --version-relaxed、--version-date 或 --version-string 中的一个。",
  "NewSpecifyNameVersionOrApplication": "指定 --name 和 --version 以生成用于 C++ 库的清单，或指定 --application 以指示不将清单用作端口。",
  "NewVersionCannotBeEmpty": "--version 不能为空。",
  "NoArgumentsForOption": "选项 --{option} 不接受参数。",
  "NoCachedPackages": "未缓存任何包。",
  "NoError": "无错误",
  "NoInstalledPackages": "未安装任何包。你指的是“search”吗?",
  "NoLocalizationForMessages": "没有针对以下内容的本地化消息: ",
  "NoOutdatedPackages": "没有过时的包。",
  "NoRegistryForPort": "没有为端口 {package_name} 配置注册表",
  "NoteMessage": "注意: ",
  "NugetPackageFileSucceededButCreationFailed": "NuGet 包创建成功，但未生成 .nupkg。预期为:“{path}”",
  "OptionMustBeInteger": "--{option} 的值必须是整数。",
  "OptionRequired": "--{option} 选项是必需的。",
  "OptionRequiresOption": "--{value} 需要 --{option}",
  "OriginalBinParagraphHeader": "\n原始二进制段落",
  "OverlayPatchDir": "覆盖路径“{path}”必须存在并且必须为目录。",
  "OverlayTriplets": "覆盖 {path} 中的三元组:",
  "OverwritingFile": "文件 {path} 已存在，并将被覆盖",
  "PackageAlreadyRemoved": "无法移除包 {spec}: 已移除",
  "PackageFailedtWhileExtracting": "提取 {path} 时“{value}”失败。",
  "PackageRootDir": "(实验性)指定包根目录。",
  "PackagesToInstall": "将生成并安装以下包:",
  "PackagesToInstallDirectly": "将直接安装以下包:",
  "PackagesToModify": "将修改其他包(*)以完成此操作。",
  "PackagesToRebuild": "将重新生成以下包:",
  "PackagesToRebuildSuggestRecurse": "如果确实要重新生成上述包，请使用 --recurse 选项运行命令。",
  "PackagesToRemove": "将移除以下包:",
  "PackingVendorFailed": "打包 {vendor} 失败。有关详细信息，请使用 --debug。",
  "PairedSurrogatesAreInvalid": "跟随前导代理项的尾随代理项(配对代理项无效)",
  "ParseControlErrorInfoInvalidFields": "以下字段不是预期的字段:",
  "ParseControlErrorInfoMissingFields": "缺少以下字段:",
  "ParseControlErrorInfoTypesEntry": "{value} 应为 {expected}",
  "ParseControlErrorInfoWhileLoading": "加载 {path} 时:",
  "ParseControlErrorInfoWrongTypeFields": "以下字段具有错误的类型:",
  "PortDependencyConflict": "端口 {package_name} 具有以下不受支持的依赖项:",
  "PortNotInBaseline": "基线不包含端口 {package_name} 的条目",
  "PortSupportsField": "(支持: “{supports_expression}”)",
  "PortTypeConflict": "已安装和可用的端口文件之间 {spec} 的端口类型不同。\n请手动删除 {spec} 并重新运行此命令。",
  "PortsAdded": "添加了以下 {count} 个端口:",
  "PortsNoDiff": "两次提交之间的端口没有变化。",
  "PortsRemoved": "删除了以下 {count} 个端口:",
  "PortsUpdated": "\n以下 {count} 个端口已更新:",
  "PrebuiltPackages": "存在尚未生成的包。如果要生成它们，请运行:",
  "PreviousIntegrationFileRemains": "未删除以前的集成文件。",
  "ProcessorArchitectureMalformed": "无法将 %PROCESSOR_ARCHITECTURE% ({arch})分析为有效的 CPU 体系结构。",
  "ProcessorArchitectureMissing": "缺少所需的环境变量 %PROCESSOR_ARCHITECTURE%。",
  "ProcessorArchitectureW6432Malformed": "无法将 %PROCESSOR_ARCHITEW6432% ({arch}) 分析为有效的 CPU 体系结构。回退到 %PROCESSOR_ARCHITECTURE%。",
  "ProgramReturnedNonzeroExitCode": "{tool_name} 失败，退出代码: {exit_code}。",
  "ProvideExportType": "至少需要以下选项之一: --raw --nuget --ifw --zip --7zip --chocolatey --prefab。",
  "PushingVendorFailed": "将 {vendor} 推送到“{path}”失败。请使用 --debug 获取详细信息。",
  "RegistryCreated": "已在 {path} 下成功创建注册表",
  "RemoveDependencies": "要在清单模式下移除依赖项，请编辑清单(vcpkg.json)并运行 “install”。",
  "RemovePackageConflict": "另一个已安装的包与不匹配的请求的名称匹配。你是否指的是 {spec}?",
  "RemovingPackage": "正在删除 {action_index}/{count} 个 {spec}",
  "ReplaceSecretsError": "替换机密生成了以下错误:“{error_msg}”",
  "RestoredPackage": "从“{path}”还原的包",
  "RestoredPackagesFromVendor": "已从 {elapsed} 中的 {value} 还原 {count} 个包。使用 --debug 查看更多详细信息。",
  "ResultsHeader": "结果",
  "SeeURL": "有关详细信息，请参阅 {url}。",
  "SerializedBinParagraphHeader": "\n序列化二进制段落",
  "SettingEnvVar": "-- 正在将“{env_var}”环境变量设置为“{url}”。",
  "ShaPassedAsArgAndOption": "已将 SHA512 同时作为参数和选项传递。请仅传递其中一个。",
  "ShaPassedWithConflict": "已传递 SHA512，但也传递了 --skip-sha512；请仅执行两者其中之一。",
  "ShallowRepositoryDetected": "vcpkg 已克隆为 {path} 中的浅层存储库\n请使用完整的 vcpkg 克隆重试。",
  "SkipClearingInvalidDir": "正在跳过清除 {path} 的内容，因为它不是目录。",
  "SourceFieldPortNameMismatch": "CONTROL 文件中的“Source”字段或 vcpkg.json 文件中的“name”字段具有名称 {package_name}，并且与端口目录“{path}”不匹配。",
  "SpecifiedFeatureTurnedOff": "已专门禁用“{command_name}”功能，但已指定 --{option}。",
  "SpecifyDirectoriesContaining": "指定包含三元组文件的目录。\n(以及:“{env_var}”)",
  "SpecifyDirectoriesWhenSearching": "指定搜索端口时要使用的目录。\n(以及:“{env_var}”)",
  "SpecifyHostArch": "指定主机体系结构三联。请参阅“vcpkg 帮助三联”。\n(默认值:“{env_var}”)",
  "SpecifyTargetArch": "指定目标体系结构三联。请参阅“vcpkg 帮助三联”。\n(默认值:“{env_var}”)",
  "StartCodeUnitInContinue": "在“继续”位置找到了起始代码单元",
  "StoreOptionMissingSha": "--store 选项无效，没有 sha512",
  "StoredBinaryCache": "存储的二进制缓存:“{path}”",
  "SuccessfulyExported": "已将 {package_name} 导出到 {path}",
  "SuggestGitPull": "结果可能已过时。运行 `git pull` 以获取最新结果。",
  "SuggestResolution": "要尝试一次性解决所有错误，请运行:\nvcpkg {command_name} --{option}",
  "SuggestStartingBashShell": "请确保已启动新的 bash shell 以使更改生效。",
  "SuggestUpdateVcpkg": "可能需要更新 vcpkg 二进制文件。请尝试运行 {command_line} 进行更新。",
  "SupportedPort": "支持端口 {package_name}。",
  "SystemApiErrorMessage": "调用 {system_api} 失败，{exit_code} ({error_msg})",
  "ToolFetchFailed": "无法提取 {tool_name}。",
  "ToolInWin10": "此实用工具与 Windows 10 或更高版本捆绑。",
  "TotalTime": "总运行时间: {elapsed}",
  "TrailingCommaInArray": "数组中的尾随逗号",
  "TrailingCommaInObj": "对象中的尾随逗号",
  "TwoFeatureFlagsSpecified": "“{value}”和-“{value}”均已指定为功能标志。",
  "UndeterminedToolChainForTriplet": "无法确定具有 CMAKE_SYSTEM_NAME {system_name} 的 {triplet} 的工具链使用。是否打算使用 VCPKG_CHAINLOAD_TOOLCHAIN_FILE?",
  "UnexpectedByteSize": "应写入 {expected} 个字节，但已写入 {actual}。",
  "UnexpectedCharExpectedCloseBrace": "意外字符；应为属性或右大括号",
  "UnexpectedCharExpectedColon": "意外字符；应为冒号",
  "UnexpectedCharExpectedComma": "意外字符；应为逗号或右大括号",
  "UnexpectedCharExpectedName": "意外字符；应为属性名称",
  "UnexpectedCharExpectedValue": "意外字符；预期值",
  "UnexpectedCharMidArray": "数组中间出现意外字符",
  "UnexpectedCharMidKeyword": "关键字中间出现意外字符",
  "UnexpectedDigitsAfterLeadingZero": "前导零后出现意外数字",
  "UnexpectedEOFAfterEscape": "转义字符后出现意外的 EOF",
  "UnexpectedEOFAfterMinus": "减号后出现意外的 EOF",
  "UnexpectedEOFExpectedChar": "意外字符；应为 EOF",
  "UnexpectedEOFExpectedCloseBrace": "意外的 EOF；应为属性或右大括号",
  "UnexpectedEOFExpectedColon": "意外的 EOF；应为冒号",
  "UnexpectedEOFExpectedName": "意外的 EOF；应为属性名称",
  "UnexpectedEOFExpectedProp": "意外的 EOF；应为属性",
  "UnexpectedEOFExpectedValue": "意外的 EOF；预期值",
  "UnexpectedEOFMidArray": "数组中间出现意外的 EOF",
  "UnexpectedEOFMidKeyword": "关键字中间出现意外的 EOF",
  "UnexpectedEOFMidString": "字符串中间出现意外的 EOF",
  "UnexpectedEOFMidUnicodeEscape": "在 unicode 转义中间出现意外的文件结尾",
  "UnexpectedErrorDuringBulkDownload": "批量下载期间出现意外错误。",
  "UnexpectedEscapeSequence": "意外的转义序列延续",
  "UnexpectedExtension": "非预期的存档扩展名:“{extension}”。",
  "UnexpectedFormat": "预期格式为 [{expected}]，但实际为 [{actual}]。",
  "UnexpectedPortName": "端口 {expected} 在 {path} 中声明为 {actual}",
  "UnexpectedToolOutput": "{tool_name} ({path}) 在尝试确定版本时生成了意外输出:",
  "UnknownBaselineFileContent": "无法识别的基线条目；应为 “port:triplet=(fail|skip|pass)”",
  "UnknownBinaryProviderType": "未知的二进制提供程序类型: 有效提供程序为 “clear”、“default”、“nuget”、“nugetconfig”“nugettimeout”、“\"interactive”、“x-azblob”、“x-gcs”、“x-aws”、“x-aws-config”、“http” 和 “files”",
  "UnknownMachineCode": "未知的计算机类型代码 {value}",
  "UnknownOptions": "命令“{command_name}”的未知选项:",
  "UnknownParameterForIntegrate": "用于集成的参数“{value}”未知。",
  "UnknownPolicySetting": "策略“{value}”的设置未知: {option}",
  "UnknownSettingForBuildType": "VCPKG_BUILD_TYPE {option} 的设置未知。有效设置为 ''、“debug” 和 “release”。",
  "UnknownTool": "vcpkg 没有为适用于此平台的这一工具提供定义。",
  "UnknownTopic": "未知主题 {value}",
  "UnknownVariablesInTemplate": "参数无效: URL 模板“{value}”包含未知变量: {list}",
  "UnrecognizedConfigField": "配置包含以下无法识别的字段:",
  "UnrecognizedIdentifier": "标识符名称 {value} 无法识别。添加以覆盖三元组文件中的列表。",
  "UnsupportedFeature": "已传递功能 {feature}，但 {package_name} 支持不支持该功能。",
  "UnsupportedPort": "不支持端口 {package_name}。",
  "UnsupportedPortDependency": "- 不支持依赖项 {value}。",
  "UnsupportedPortFeature": "仅“{supports_expression}”支持 {spec}",
  "UnsupportedShortOptions": "不支持短选项:“{value}”",
  "UnsupportedSyntaxInCDATA": "]]> 在 CDATA 块中不受支持",
  "UnsupportedSystemName": "无法将 VCPKG_CMAKE_SYSTEM_NAME “{system_name}” 映射到 vcvarsall 平台。支持的系统名称为 ''、“Windows” 和 “WindowsStore”。",
  "UnsupportedToolchain": "在三元组 {triplet} 中: 无法为请求的目标体系结构 {arch} 找到有效的工具链。\n所选 Visual Studio 实例位于: {path}\n可用的工具链组合为 {list}",
  "UpdateBaselineAddBaselineNoManifest": "已传递 --{option} 开关，但不存在要向其添加 `builtin-baseline` 字段的清单文件。",
  "UpdateBaselineLocalGitError": "git 无法分析位于“{path}”的本地 vcpkg 注册表的 HEAD",
  "UpdateBaselineNoConfiguration": "不存在要更新的 `vcpkg.json` 和 `vcpkg-configuration.json`。",
  "UpdateBaselineNoExistingBuiltinBaseline": "清单文件当前不包含 `builtin-baseline` 字段；如果要添加一个，请传递 --{option} 开关。",
  "UpdateBaselineNoUpdate": "注册表“{url}”未更新:“{value}”",
  "UpdateBaselineRemoteGitError": "git 无法提取远程存储库“{url}”",
  "UpdateBaselineUpdatedBaseline": "已更新注册表“{url}”: 基线“{old_value}”->“{new_value}”",
  "UpgradeInManifest": "升级命令当前不支持清单模式。请改为修改 vcpkg.json 并运行安装。",
  "UpgradeRunWithNoDryRun": "如果确实要重新生成上述包，请使用 --no-dry-run 选项运行此命令。",
  "UploadedBinaries": "已将二进制文件上传到 {count} 个 {vendor}。",
  "UploadedPackagesToVendor": "已在 {elapsed} 内将 {count} 个包上传到 {vendor}",
  "UploadingBinariesToVendor": "正在将“{spec}”的二进制文件上传到“{vendor}”源“{path}”。",
  "UploadingBinariesUsingVendor": "正在使用“{vendor}”“{path}”上传“{spec}”的二进制文件。",
  "UseEnvVar": "-- 正在使用环境变量中的 {env_var}。",
  "UserWideIntegrationDeleted": "未安装用户范围的集成。",
  "UserWideIntegrationRemoved": "已删除用户范围的集成。",
  "UsingCommunityTriplet": "-- 正在使用社区三联 {triplet}。此三联配置不能保证成功。",
  "UsingManifestAt": "正在 {path} 使用清单文件。",
  "Utf8ConversionFailed": "未能转换为 UTF-8",
  "VSExaminedInstances": "考虑了以下 Visual Studio 实例:",
  "VSExaminedPaths": "检查了 Visual Studio 实例的以下路径:",
  "VSNoInstances": "找不到完整的 Visual Studio 实例",
  "VcpkgCeIsExperimental": "vcpkg-artifact 是实验性的，并且可能随时发生更改。",
  "VcpkgCommitTableHeader": "VCPKG 提交",
  "VcpkgCompletion": "vcpkg {value}完成已导入到“{path}”文件。\n找到以下条目:",
  "VcpkgDisallowedClassicMode": "无法在当前工作目录之上找到清单(vcpkg.json)。\n此 vcpkg 分发没有经典模式实例。",
  "VcpkgHasCrashed": "vcpkg 已崩溃。请在 https://github.com/microsoft/vcpkg 创建一个问题，其中包含你尝试执行的操作的简短摘要以及以下信息。",
  "VcpkgInVsPrompt": "vcpkg 似乎位于面向 {value} 的 Visual Studio 提示中，但正在为 {triplet} 安装。请考虑使用 --triplet {value}-windows 或 --triplet {value}-uwp。",
  "VcpkgInvalidCommand": "无效命令: {command_name}",
  "VcpkgRootRequired": "独立启动需要设置 VCPKG_ROOT。",
  "VcpkgRootsDir": "指定 vcpkg 根目录。\n(默认值:“{env_var}”)",
  "VcpkgSendMetricsButDisabled": "已传递 --sendmetrics，但指标已禁用。",
  "VersionCommandHeader": "vcpkg 包管理程序版本 {version}\n\n查看 LICENSE.txt 获取许可证信息。",
  "VersionConstraintViolated": "依赖项 {spec} 应至少为 {expected_version} 版本，但目前为 {actual_version}。",
  "VersionInvalidDate": "“{version}”不是有效的日期版本。日期必须采用 YYYY-MM-DD 格式，并且消歧因子必须是不带前导零的点分隔正整数值。",
  "VersionInvalidRelaxed": "“{version}”不是有效的宽松版本(具有任意数值元素计数的 semver)。",
  "VersionInvalidSemver": "“{version}”不是有效的语义版本，请参阅 <https://semver.org>。",
  "VersionSpecMismatch": "无法加载端口，因为版本不一致。文件“{path}”包含版本 {actual_version}，但版本数据库指示它应为 {expected_version}。",
  "VersionTableHeader": "版本",
  "WaitingForChildrenToExit": "正在等待子进程退出...",
  "WaitingToTakeFilesystemLock": "正在等待锁定 {path} 上的文件系统...",
  "WarningMessage": "警告:",
  "WarningMessageMustUsePrintWarning": "名为 {value} 的消息以警告开头:，必须在代码中将其更改为在前面追加 WarningMessage。",
  "WarningsTreatedAsErrors": "以前被解释为错误的警告",
  "WhileLookingForSpec": "查找 {spec} 时:",
  "WindowsOnlyCommand": "此命令仅支持 Windows。",
  "WroteNuGetPkgConfInfo": "已将 NuGet 包配置信息写入 {path}"
}
