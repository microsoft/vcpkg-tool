{
  "AddArtifactOnlyOne": "“{command_line}” 一次只能添加一个项目。",
  "AddFirstArgument": "“{command_line}”的第一个参数必须是 “artifact” 或 “port”。",
  "AddPortRequiresManifest": "“{command_line}”需要活动清单文件。",
  "AddPortSucceded": "已成功将端口添加到 vcpkg.json 文件。",
  "AddTripletExpressionNotAllowed": "此处不允许使用三元表达式。你可能想要将 `{package_name}:{triplet}` 更改为 `{package_name}`。",
  "AddVersionAddedVersionToFile": "已将版本 {version} 添加到 {path}",
  "AddVersionCommitChangesReminder": "是否记得提交更改?",
  "AddVersionCommitResultReminder": "别忘了提交结果!",
  "AddVersionDetectLocalChangesError": "由于 git 状态输出出现意外格式而跳过对本地更改的检测",
  "AddVersionFileNotFound": "找不到所需的文件 {path}",
  "AddVersionFormatPortSuggestion": "运行 `{command_line}` 以设置文件格式",
  "AddVersionIgnoringOptionAll": "忽略 --{option}，因为已提供端口名称参数",
  "AddVersionLoadPortFailed": "无法加载端口 {package_name}",
  "AddVersionNewFile": "(新建文件)",
  "AddVersionNewShaIs": "新 SHA: {value}",
  "AddVersionNoFilesUpdated": "未更新任何文件",
  "AddVersionNoFilesUpdatedForPort": "没有更新 {package_name} 的文件",
  "AddVersionNoGitSha": "无法获取端口 {package_name} 的 SHA",
  "AddVersionOldShaIs": "旧 SHA: {value}",
  "AddVersionOverwriteOptionSuggestion": "使用 --{option} 绕过此检查",
  "AddVersionPortDoesNotExist": "{package_name} 不存在",
  "AddVersionPortFilesShaChanged": "{package_name} 的已签入文件已更改，但版本未更新",
  "AddVersionPortFilesShaUnchanged": "{package_name} 的已签入文件与版本 {version} 没有更改",
  "AddVersionPortHasImproperFormat": "{package_name} 格式不正确",
  "AddVersionSuggestNewVersionScheme": "在端口“{package_name}”中使用版本方案“{new_scheme}”而不是“{old_scheme}”。\n使用 --{option} 来禁用此检查。",
  "AddVersionUnableToParseVersionsFile": "无法分析版本文件 {path}",
  "AddVersionUncommittedChanges": "{package_name} 存在未提交的更改",
  "AddVersionUpdateVersionReminder": "是否记得更新版本或端口版本?",
  "AddVersionUseOptionAll": "没有参数的 {command_name} 需要传递 --{option} 才能一次性更新所有端口版本",
  "AddVersionVersionAlreadyInFile": "版本 {version} 已在 {path} 中",
  "AddVersionVersionIs": "版本: {version}",
  "AllFormatArgsRawArgument": "格式字符串 \"{value}\" 包含原始格式参数",
  "AllFormatArgsUnbalancedBraces": "格式字符串中的不均衡大括号 \"{value}\"",
  "AlreadyInstalled": "已安装 {spec}",
  "AlreadyInstalledNotHead": "已安装 {spec} - 未从 HEAD 生成",
  "AttemptingToFetchPackagesFromVendor": "正在尝试从 {vendor} 提取 {count} 个包",
  "AutoSettingEnvVar": "-- 正在将 {env_var} 环境变量自动设置为“{url}”。",
  "BothYesAndNoOptionSpecifiedError": "无法同时指定 --no-{option} 和 --{option}。",
  "BuildAlreadyInstalled": "已安装{spec}；请在尝试生成之前先删除{spec}。",
  "BuildDependenciesMissing": "内部版本命令要求已安装所有依赖项。\n缺少以下依赖项:",
  "BuildResultBuildFailed": "BUILD_FAILED",
  "BuildResultCacheMissing": "CACHE_MISSING",
  "BuildResultCascadeDueToMissingDependencies": "CASCADED_DUE_TO_MISSING_DEPENDENCIES",
  "BuildResultDownloaded": "已下载",
  "BuildResultExcluded": "已排除",
  "BuildResultFileConflicts": "FILE_CONFLICTS",
  "BuildResultPostBuildChecksFailed": "POST_BUILD_CHECKS_FAILED",
  "BuildResultRemoved": "已删除",
  "BuildResultSucceeded": "成功",
  "BuildResultSummaryHeader": "{triplet} 的摘要",
  "BuildResultSummaryLine": "{build_result}: {count} 个",
  "BuildTroubleshootingMessage1": "请确保使用具有“git pull” 和 “vcpkg update”的最新端口文件。\n然后，在以下位置查看已知问题:",
  "BuildTroubleshootingMessage2": "可在以下位置提交新问题:",
  "BuildTroubleshootingMessage3": "在 Bug 报告标题中包含“[{package_name}] 内部版本错误”，bug 描述中的以下版本信息，并从上面附加任何相关的失败日志。",
  "BuildTroubleshootingMessage4": "你还可以使用来自 {path} 的预填充模板。",
  "BuildingFromHead": "正在从 HEAD 生成 {spec}...",
  "BuildingPackage": "正在生成 {spec}...",
  "BuildingPackageFailed": "生成 {spec} 失败，结果为: {build_result}",
  "BuildingPackageFailedDueToMissingDeps": "由于缺少以下依赖项:",
  "CMakeTargetsUsage": "{package_name} 提供 CMake 目标:",
  "CMakeTargetsUsageHeuristicMessage": "# 这是启发式生成的，并且可能不正确",
  "ChecksFailedCheck": "vcpkg 已崩溃；没有其他详细信息可用。",
  "ChecksUnreachableCode": "已访问无法访问的代码",
  "ChecksUpdateVcpkg": "通过重新运行 bootstrap-vcpkg 更新 vcpkg 可能会解决此故障。",
  "CiBaselineAllowUnexpectedPassingRequiresBaseline": "只有当通过 --ci-baseline 提供基线时才能使用 --allow-unexpected-passing。",
  "CiBaselineDisallowedCascade": "回归: {spec} 已级联，但需要它才能通过。({path})。",
  "CiBaselineRegression": "REGRESSION: {spec} 失败，结果为 {build_result}。如果在预期之内，则添加 {spec}=fail to {path}。",
  "CiBaselineRegressionHeader": "回归测试:",
  "CiBaselineUnexpectedPass": "正在通过，从失败列表中删除: {spec} ({path})。",
  "CmakeTargetsExcluded": "注意: 未显示其他 {count} 个目标。",
  "CommandFailed": "命令:\n{command_line}\n失败，结果如下:",
  "CompressFolderFailed": "无法压缩文件夹“{path}”:",
  "CouldNotDeduceNugetIdAndVersion": "无法从文件名推导出 nuget ID 和版本: {path}",
  "CurlReportedUnexpectedResults": "curl 向 vcpkg 报告了意外结果，vcpkg 无法继续。\n请查看以下文本以获取敏感信息，并在 Microsoft/vcpkg GitHub 上打开问题以帮助解决此问题!\ncmd: {command_line}\n=== curl 输出 ===\n{actual}\n=== 结束 curl 输出 ===",
  "DetectCompilerHash": "正在检测三联“{triplet}”的编译器哈希...",
  "DownloadAvailable": "此工具的可下载副本可用，可通过取消设置 {env_var} 使用它。",
  "DownloadedSources": "已下载的 {spec} 源",
  "DownloadingVcpkgCeBundle": "正在下载 vcpkg-ce 捆绑包 {version}...",
  "DownloadingVcpkgCeBundleLatest": "正在下载最新的 vcpkg-ce 捆绑包...",
  "ElapsedForPackage": "处理 {spec} 所用时间: {elapsed}",
  "EmptyLicenseExpression": "SPDX 许可证表达式为空。",
  "EnvStrFailedToExtract": "无法展开环境字符串:",
  "ErrorDetectingCompilerInfo": "检测编译器信息时: \n“{path}”下的日志文件内容为:",
  "ErrorIndividualPackagesUnsupported": "在清单模式下，`vcpkg install` 不支持单个包参数。\n要安装其他包，请编辑 vcpkg.json，然后在没有任何包参数的情况下运行 `vcpkg install`。",
  "ErrorInvalidClassicModeOption": "在经典模式下不支持选项 --{option}，并且未找到任何清单。",
  "ErrorInvalidManifestModeOption": "清单模式下不支持选项 --{option}。",
  "ErrorMessage": "错误:",
  "ErrorMessageMustUsePrintError": "名为 {value} 的消息以错误开头:，必须在代码中将其更改为在前面追加 ErrorMessage。",
  "ErrorMissingVcpkgRoot": "无法检测 vcpkg-root。如果尝试使用已生成的 vcpkg 的副本，则必须定义 VCPKG_ROOT 环境变量，以指向 https://github.com/Microsoft/vcpkg 的克隆副本。",
  "ErrorNoVSInstance": "在三元组 {triplet} 中: 无法找到有效的 Visual Studio 实例",
  "ErrorNoVSInstanceAt": "位于“{path}”",
  "ErrorNoVSInstanceFullVersion": "具有工具集版本前缀 {version}",
  "ErrorNoVSInstanceVersion": "具有工具集版本 {version}",
  "ErrorRequireBaseline": "此 vcpkg 实例需要具有指定基线的清单才能与端口交互。请将 “builtin-baseline” 添加到清单或添加 “vcpkg-configuration.json”，以重新定义默认注册表。",
  "ErrorRequirePackagesList": "`vcpkg install` 需要在经典模式下安装包的列表。",
  "ErrorUnableToDetectCompilerInfo": "vcpkg 无法检测活动编译器的信息。请参阅上述有关 CMake 故障输出的信息。",
  "ErrorVcvarsUnsupported": "在三元组 {triplet} 中: 非 Windows 主机不支持使用 Visual Studio 的开发人员提示。\n在三元组文件中定义 “VCPKG_CMAKE_SYSTEM_NAME” 或 “VCPKG_CHAINLOAD_TOOLCHAIN_FILE”。",
  "ErrorVsCodeNotFound": "找不到 Visual Studio Code，并且未设置环境变量“{env_var}”或该变量无效。",
  "ErrorVsCodeNotFoundPathExamined": "已检查以下路径:",
  "ExcludedPackage": "已排除 {spec}",
  "ExpectedCharacterHere": "此处应为“{expected}”",
  "ExpectedFailOrSkip": "此处应为“失败”、“跳过”或“通过”",
  "ExpectedPortName": "此处需要填写端口名称",
  "ExpectedTripletName": "此处需要填写三联名称",
  "FailedToProvisionCe": "无法预配 vcpkg-ce。",
  "FailedToRunToolToDetermineVersion": "无法运行 {path} 以确定 {tool_name} 版本。",
  "FailedToStoreBackToMirror": "无法存储回镜像:",
  "ForceSystemBinariesOnWeirdPlatforms": "必须在 arm、s390x、ppc64le 平台上设置环境变量 VCPKG_FORCE_SYSTEM_BINARIES。",
  "FormattedParseMessageExpression": "在表达式上: {value}",
  "GenerateMsgErrorParsingFormatArgs": "正在分析 {value} 的格式字符串:",
  "GenerateMsgIncorrectComment": "消息 {value} 的注释不正确:",
  "GenerateMsgNoArgumentValue": "已在注释中指定 {{{value}}}，但未在消息中使用。",
  "GenerateMsgNoCommentValue": "已在邮件中使用 {{{value}}}，但未进行注释。",
  "GitCommandFailed": "执行 {command_line} 失败",
  "GitStatusOutputExpectedFileName": "应输入文件名",
  "GitStatusOutputExpectedNewLine": "预期的新行",
  "GitStatusOutputExpectedRenameOrNewline": "应重命名的文件或新行",
  "GitStatusUnknownFileStatus": "未知文件状态: {value}",
  "GitUnexpectedCommandOutput": "意外的 git 输出",
  "GraphCycleDetected": "在 {package_name} 的图形中检测到循环:",
  "HashFileFailureToRead": "无法读取用于哈希的文件“{path}”: ",
  "HeaderOnlyUsage": "{package_name} 是仅限标头的，可通过以下方式从 CMake 使用:",
  "IllegalFeatures": "在此上下文中不允许使用功能列表",
  "IllegalPlatformSpec": "此上下文中不允许使用平台限定符",
  "InfoSetEnvVar": "还可以将环境变量“{env_var}”设置为所选编辑器。",
  "InstallWithSystemManager": "可以通过系统包管理器安装此工具。",
  "InstallWithSystemManagerMono": "Ubuntu 18.04 用户可能需要较新版本的 mono，可通过 {url} 获得。",
  "InstallWithSystemManagerPkg": "可以通过系统包管理器({command_line})安装此工具。",
  "InstallingFromLocation": "-- 正从以下位置安装端口: {path}",
  "InstallingPackage": "正在安装 {action_index}/{count} 个 {spec}...",
  "InternalErrorMessage": "内部错误: ",
  "InternalErrorMessageContact": "请在 https://github.com/microsoft/vcpkg/issues/new?template=other-type-of-bug-report.md&labels=category:vcpkg-bug 打开一个包含重现问题的详细步骤的问题。",
  "InvalidArgument": "参数无效",
  "InvalidArgumentRequiresAbsolutePath": "参数无效: 二进制配置字符串的二进制配置“{binary_source}”路径参数必须是绝对参数",
  "InvalidArgumentRequiresBaseUrl": "参数无效: 二进制配置“{binary_source}”要求将 {base_url} 基 URL 作为第一个参数",
  "InvalidArgumentRequiresBaseUrlAndToken": "参数无效: 二进制配置“{binary_source}”至少需要一个基 URL 和一个 SAS 令牌",
  "InvalidArgumentRequiresNoneArguments": "参数无效: 二进制配置“{binary_source}”不接受参数",
  "InvalidArgumentRequiresOneOrTwoArguments": "参数无效: 二进制配置“{binary_source}”需要 1 或 2 个参数",
  "InvalidArgumentRequiresPathArgument": "参数无效: 二进制配置“{binary_source}”至少需要一个路径参数",
  "InvalidArgumentRequiresPrefix": "参数无效: 二进制配置“{binary_source}”至少需要一个前缀",
  "InvalidArgumentRequiresSingleArgument": "参数参数无效: 二进制配置“{binary_source}”不接受多个参数",
  "InvalidArgumentRequiresSingleStringArgument": "参数无效: 二进制配置“{binary_source}”需要单个字符串参数",
  "InvalidArgumentRequiresSource": "参数无效: 二进制配置“{binary_source}”需要非空源",
  "InvalidArgumentRequiresSourceArgument": "参数无效: 二进制配置“{binary_source}”至少需要一个源参数",
  "InvalidArgumentRequiresTwoOrThreeArguments": "参数无效: 二进制配置“{binary_source}”需要 2 或 3 个参数",
  "InvalidArgumentRequiresValidToken": "参数无效: 二进制配置“{binary_source}”需要 SAS 令牌，不需要将前面的“?”作为第二个参数",
  "InvalidFormatString": "格式字符串无效: {actual}",
  "JsonErrorFailedToParse": "未能分析路径 {path}:",
  "JsonErrorFailedToRead": "无法读取 {path}: {error_msg}",
  "LaunchingProgramFailed": "正在启动 {tool_name}:",
  "LicenseExpressionContainsExtraPlus": "SPDX 许可证表达式包含额外的 \"+\"。只有在许可证标识符之后才允许使用这些标识符。",
  "LicenseExpressionContainsInvalidCharacter": "SPDX 许可证表达式包含无效字符 (0x{value:02X} '{value}')。",
  "LicenseExpressionContainsUnicode": "SPDX 许可证表达式包含 unicode 字符(U+{value: 04X}\"{pretty_value}\")，但这些表达式仅限 ASCII。",
  "LicenseExpressionDocumentRefUnsupported": "当前实现不支持 DocumentRef- SPDX 引用。",
  "LicenseExpressionExpectCompoundFoundParen": "应为复合或字符串末尾，找到了一个括号。",
  "LicenseExpressionExpectCompoundFoundWith": "应为 AND 或 OR，找到 WITH (仅允许在许可证名称后使用 WITH，而不允许使用带圆括号表达式)。",
  "LicenseExpressionExpectCompoundFoundWord": "应为 AND 或 OR，找到许可证或异常名称: \"{value}\"。",
  "LicenseExpressionExpectCompoundOrWithFoundWord": "应为 AND、OR 或 WITH，找到许可证或异常名称: \"{value}\"。",
  "LicenseExpressionExpectExceptionFoundCompound": "应为异常名称，找到了复合项 {value}。",
  "LicenseExpressionExpectExceptionFoundEof": "应为异常名称，找到了字符串的末尾。",
  "LicenseExpressionExpectExceptionFoundParen": "应为异常名称，找到了一个括号。",
  "LicenseExpressionExpectLicenseFoundCompound": "应为许可证名称，找到了复合项 {value}。",
  "LicenseExpressionExpectLicenseFoundEof": "应为许可证名称，找到了字符串的末尾。",
  "LicenseExpressionExpectLicenseFoundParen": "应为许可证名称，找到一个括号。",
  "LicenseExpressionImbalancedParens": "有一个不带左括号的右括号。",
  "LicenseExpressionUnknownException": "未知的许可证异常标识符 \"{value}\"。已知值列在 https://spdx.org/licenses/exceptions-index.html 中",
  "LicenseExpressionUnknownLicense": "未知的许可证标识符 \"{value}\"。已知值列在 https://spdx.org/licenses/ 中",
  "LoadingCommunityTriplet": "-- [COMMUNITY] 正在从以下位置加载三联配置: {path}",
  "LoadingOverlayTriplet": "-- [OVERLAY] 正在从以下位置加载三联配置: {path}",
  "LocalizedMessageMustNotContainIndents": "名为 {value} 的消息包含似乎正在缩进的内容，必须将其更改为使用 LocalizedString::append_indent。",
  "LocalizedMessageMustNotEndWithNewline": "名为 {value} 的消息以换行符结尾，这应通过格式设置而不是本地化来添加。",
  "MonoInstructions": "这可能是由于 mono 安装不完整所导致的。通过 `sudo apt install mono-complete` 可以在某些系统上完整的 mono。Ubuntu 18.04 用户可能需要较新版本的 mono。要获取该版本，请访问 https://www.mono-project.com/download/stable/",
  "MsiexecFailedToExtract": "msiexec 在提取“{path}”时失败，启动或退出代码 {exit_code} 和消息:",
  "NoLocalizationForMessages": "没有针对以下消息的本地化:",
  "NoRegistryForPort": "没有为端口 {package_name} 配置注册表",
  "NoteMessage": "注意: ",
  "ParseControlErrorInfoInvalidFields": "以下字段不是预期的字段:",
  "ParseControlErrorInfoMissingFields": "缺少以下字段:",
  "ParseControlErrorInfoTypesEntry": "{value} 应为 {expected}",
  "ParseControlErrorInfoWhileLoading": "加载 {path} 时:",
  "ParseControlErrorInfoWrongTypeFields": "以下字段具有错误的类型:",
  "PortNotInBaseline": "基线不包含端口 {package_name} 的条目",
  "ProcessorArchitectureMalformed": "无法将 %PROCESSOR_ARCHITECTURE% ({arch})分析为有效的 CPU 体系结构。",
  "ProcessorArchitectureMissing": "缺少所需的环境变量 %PROCESSOR_ARCHITECTURE%。",
  "ProcessorArchitectureW6432Malformed": "无法将 %PROCESSOR_ARCHITEW6432% ({arch}) 分析为有效的 CPU 体系结构。回退到 %PROCESSOR_ARCHITECTURE%。",
  "ProgramReturnedNonzeroExitCode": "{tool_name} 失败，退出代码: {exit_code}。",
  "RemovingPackage": "正在删除 {action_index}/{count} 个 {spec}",
  "RestoredPackagesFromVendor": "已在 {elapsed} 内从 {vendor} 还原 {count} 个包",
  "ResultsHeader": "结果",
  "SeeURL": "有关详细信息，请参阅 {url}。",
  "SettingEnvVar": "-- 正在将“{env_var}”环境变量设置为“{url}”。",
  "SourceFieldPortNameMismatch": "CONTROL 文件中的“Source”字段或 vcpkg.json 文件中的“name”字段具有名称{package_name}，与端口目录{path}不匹配。",
  "SystemApiErrorMessage": "调用 {system_api} 失败，{exit_code} ({error_msg})",
  "ToolFetchFailed": "无法提取 {tool_name}。",
  "ToolInWin10": "此实用工具与 Windows 10 或更高版本捆绑。",
  "UnexpectedErrorDuringBulkDownload": "批量下载期间出现意外错误。",
  "UnexpectedToolOutput": "{tool_name} ({path}) 在尝试确定版本时生成了意外输出:",
  "UnknownBaselineFileContent": "无法识别的基线条目；应为 “port:triplet=(fail|skip|pass)”",
  "UnknownBinaryProviderType": "未知的二进制提供程序类型: 有效的提供程序为“clear”、“default”、“nuget”、“nugetconfig”、“interactive”和“files”",
  "UnknownTool": "vcpkg 没有为适用于此平台的这一工具提供定义。",
  "UnknownVariablesInTemplate": "参数无效: URL 模板“{value}”包含未知变量: {list}",
  "UnsupportedSystemName": "无法将 VCPKG_CMAKE_SYSTEM_NAME “{system_name}” 映射到 vcvarsall 平台。支持的系统名称为 ''、“Windows” 和 “WindowsStore”。",
  "UnsupportedToolchain": "在三元组 {triplet} 中: 无法为请求的目标体系结构 {arch} 找到有效的工具链。\n所选 Visual Studio 实例位于: {path}\n可用的工具链组合为 {list}",
  "UpdateBaselineAddBaselineNoManifest": "已传递 --{option} 开关，但不存在要向其添加 `builtin-baseline` 字段的清单文件。",
  "UpdateBaselineLocalGitError": "git 无法分析位于“{path}”的本地 vcpkg 注册表的 HEAD",
  "UpdateBaselineNoConfiguration": "不存在要更新的 `vcpkg.json` 和 `vcpkg-configuration.json`。",
  "UpdateBaselineNoExistingBuiltinBaseline": "清单文件当前不包含 `builtin-baseline` 字段；如果要添加一个，请传递 --{option} 开关。",
  "UpdateBaselineNoUpdate": "注册表“{url}”未更新:“{value}”",
  "UpdateBaselineRemoteGitError": "git 无法提取远程存储库“{url}”",
  "UpdateBaselineUpdatedBaseline": "已更新注册表“{url}”: 基线“{old_value}”->“{new_value}”",
  "UploadedPackagesToVendor": "已在 {elapsed} 内将 {count} 个包上传到 {vendor}",
  "UseEnvVar": "-- 正在使用环境变量中的 {env_var}。",
  "UsingCommunityTriplet": "-- 正在使用社区三联 {triplet}。此三联配置不能保证成功。",
  "UsingManifestAt": "正在 {path} 使用清单文件。",
  "Utf8DecoderDereferencedAtEof": "已在字符串末尾取消引用 Utf8Decoder。",
  "VSExaminedInstances": "考虑了以下 Visual Studio 实例:",
  "VSExaminedPaths": "检查了 Visual Studio 实例的以下路径:",
  "VSNoInstances": "找不到完整的 Visual Studio 实例",
  "VcpkgCeIsExperimental": "vcpkg-ce (“配置环境”)是实验性的，可能会随时更改。",
  "VcpkgDisallowedClassicMode": "无法在当前工作目录之上找到清单(vcpkg.json)。\n此 vcpkg 分发没有经典模式实例。",
  "VcpkgHasCrashed": "vcpkg 已崩溃。请在 https://github.com/microsoft/vcpkg 创建一个问题，其中包含你尝试执行的操作的简短摘要以及以下信息。",
  "VcpkgInvalidCommand": "无效命令: {command_name}",
  "VcpkgSendMetricsButDisabled": "已传递 --sendmetrics，但指标已禁用。",
  "VersionCommandHeader": "vcpkg 包管理程序版本 {version}\n\n查看 LICENSE.txt 获取许可证信息。",
  "VersionConstraintViolated": "依赖项 {spec} 应至少为 {expected_version} 版本，但目前为 {actual_version}。",
  "VersionInvalidDate": "“{version}”不是有效的日期版本。日期必须采用 YYYY-MM-DD 格式，并且消歧因子必须是不带前导零的点分隔正整数值。",
  "VersionInvalidRelaxed": "“{version}”不是有效的宽松版本(具有任意数值元素计数的 semver)。",
  "VersionInvalidSemver": "“{version}”不是有效的语义版本，请参阅 <https://semver.org>。",
  "VersionSpecMismatch": "无法加载端口，因为版本不一致。文件“{path}”包含版本 {actual_version}，但版本数据库指示它应为 {expected_version}。",
  "WaitingForChildrenToExit": "正在等待子进程退出...",
  "WaitingToTakeFilesystemLock": "正在等待锁定 {path} 上的文件系统...",
  "WarningMessage": "警告:",
  "WarningMessageMustUsePrintWarning": "名为 {value} 的消息以警告开头:，必须在代码中将其更改为在前面追加 WarningMessage。",
  "WarningsTreatedAsErrors": "以前被解释为错误的警告"
}
