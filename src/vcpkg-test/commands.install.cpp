#include <catch2/catch.hpp>

#include <vcpkg/commands.install.h>

using namespace vcpkg;

TEST_CASE ("get_cmake_add_library_names", "[install]")
{
    constexpr static StringLiteral fmt_targets = R"cmake(
# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.6)
   message(FATAL_ERROR "CMake >= 2.6.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.6...3.20)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_targetsDefined)
set(_targetsNotDefined)
set(_expectedTargets)
foreach(_expectedTarget fmt::fmt fmt::fmt-header-only)
  list(APPEND _expectedTargets ${_expectedTarget})
  if(NOT TARGET ${_expectedTarget})
    list(APPEND _targetsNotDefined ${_expectedTarget})
  endif()
  if(TARGET ${_expectedTarget})
    list(APPEND _targetsDefined ${_expectedTarget})
  endif()
endforeach()
if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
  unset(_targetsDefined)
  unset(_targetsNotDefined)
  unset(_expectedTargets)
  set(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT "${_targetsDefined}" STREQUAL "")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
endif()
unset(_targetsDefined)
unset(_targetsNotDefined)
unset(_expectedTargets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target fmt::fmt
add_library(fmt::fmt SHARED IMPORTED)

set_target_properties(fmt::fmt PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "FMT_LOCALE;FMT_SHARED"
  INTERFACE_COMPILE_FEATURES "cxx_variadic_templates"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
)

# Create imported target fmt::fmt-header-only
add_library(fmt::fmt-header-only INTERFACE IMPORTED)

set_target_properties(fmt::fmt-header-only PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "FMT_HEADER_ONLY=1"
  INTERFACE_COMPILE_FEATURES "cxx_variadic_templates"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
)

if(CMAKE_VERSION VERSION_LESS 3.0.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
endif()

# Load information for each installed configuration.
get_filename_component(_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
file(GLOB CONFIG_FILES "${_DIR}/fmt-targets-*.cmake")
foreach(f ${CONFIG_FILES})
  include(${f})
endforeach()

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(target ${_IMPORT_CHECK_TARGETS} )
  foreach(file ${_IMPORT_CHECK_FILES_FOR_${target}} )
    if(NOT EXISTS "${file}" )
      message(FATAL_ERROR "The imported target \"${target}\" references the file
   \"${file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_IMPORT_CHECK_FILES_FOR_${target})
endforeach()
unset(_IMPORT_CHECK_TARGETS)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
)cmake";

    auto res = get_cmake_add_library_names("");
    CHECK(res.empty());

    res = get_cmake_add_library_names(fmt_targets);
    CHECK(res == std::vector<std::string>{"fmt::fmt", "fmt::fmt-header-only"});

    res = get_cmake_add_library_names("add_library(bar) foo_add_library(baz) add_library()");
    CHECK(res == std::vector<std::string>{"bar"});

    res = get_cmake_add_library_names("add_library(bar) add_library(baz-bar) add_library(baz_%_bar)");
    CHECK(res == std::vector<std::string>{"bar", "baz-bar", "baz_%_bar"});

    res = get_cmake_add_library_names("add_library(foo) add_library(foo) add_library(foo)");
    CHECK(res == std::vector<std::string>{"foo", "foo", "foo"});

    // In the following cases, the empty list indicates the need for an explicit usage file.

    auto with_var = get_cmake_add_library_names("add_library(bar${foo}) add_library(${foo}) add_library(   \nbar)");
    CHECK(with_var.empty());

    auto with_comment = get_cmake_add_library_names("add_library( # rem \n    foo)  add_library( bar# rem3)");
    CHECK(with_comment.empty());

    auto with_quotes =
        get_cmake_add_library_names("add_library(\"literal\")  add_library(\"${var}\") add_library(\"prefix${name}\")");
    CHECK(with_quotes.empty());

    auto with_upper_case = get_cmake_add_library_names("ADD_LIBRARY(foo)");
    CHECK(with_upper_case.empty());

    auto with_extra_space = get_cmake_add_library_names("add_library (foo)");
    CHECK(with_extra_space.empty());

    auto maybe_example = get_cmake_add_library_names("add_library(<Pkg>)");
    CHECK(maybe_example.empty());

    CHECK(get_cmake_find_package_name("proj", "proj-config.cmake") == "proj");
    CHECK(get_cmake_find_package_name("Proj", "proj-config.cmake") == "proj");
    CHECK(get_cmake_find_package_name("Proj-1.0", "proj-config.cmake") == "proj");
    CHECK(get_cmake_find_package_name("proj", "ProjConfig.cmake") == "Proj");
    CHECK(get_cmake_find_package_name("Proj", "ProjConfig.cmake") == "Proj");
    CHECK(get_cmake_find_package_name("proj-1.0", "ProjConfig.cmake") == "Proj");
    CHECK(get_cmake_find_package_name("pro", "proj-config.cmake") == "");
    CHECK(get_cmake_find_package_name("Pro", "ProjConfig.cmake") == "");
    CHECK(get_cmake_find_package_name("proj", "Findproj.cmake") == "");
}
