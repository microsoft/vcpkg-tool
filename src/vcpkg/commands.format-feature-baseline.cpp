#include <vcpkg/base/checks.h>
#include <vcpkg/base/files.h>

#include <vcpkg/commands.format-feature-baselinet.h>
#include <vcpkg/vcpkgcmdarguments.h>

using namespace vcpkg;

namespace
{
    bool is_comment_line(const std::string& line)
    {
        auto index = line.find_first_not_of(" \t");
        return index == std::string::npos || line[index] == '#';
    }

    // An ASCII collation table generated by VS Code 'sort lines ascending', with : [ and ] reordered first
    // so that cmake:x64-linux=pass < cmake[feature]:x64-linux=pass < cmake-user:x64-linux=pass

    // clang-format off
    constexpr unsigned char comparison_indices[] = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
        0x20, 0x28, 0x2C, 0x36, 0x40, 0x37, 0x35, 0x2B, 0x2D, 0x2E, 0x32, 0x3A, 0x26, 0x25, 0x2A, 0x33,
        0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x21, 0x27, 0x3B, 0x3C, 0x3D, 0x29,
        0x31, 0x4B, 0x4D, 0x4F, 0x52, 0x54, 0x56, 0x58, 0x5A, 0x5C, 0x5E, 0x60, 0x62, 0x64, 0x66, 0x68,
        0x6A, 0x6C, 0x6E, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7A, 0x7C, 0x7E, 0x22, 0x34, 0x23, 0x39, 0x24,
        0x38, 0x4C, 0x4E, 0x50, 0x51, 0x53, 0x55, 0x57, 0x59, 0x5B, 0x5D, 0x5F, 0x61, 0x63, 0x65, 0x67,
        0x69, 0x6B, 0x6D, 0x6F, 0x71, 0x73, 0x75, 0x77, 0x79, 0x7B, 0x7D, 0x2F, 0x3E, 0x30, 0x3F, 0x7F,
        0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
        0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
        0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
        0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
        0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
        0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
        0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
        0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,
    };
    // clang-format on

    struct cmp_char
    {
        auto operator()(char l, char r)
        {
            return comparison_indices[static_cast<unsigned char>(l)] <
                   comparison_indices[static_cast<unsigned char>(r)];
        }
    };

    struct cmp_str
    {
        auto operator()(const std::string& left, const std::string& right)
        {
            return std::lexicographical_compare(left.begin(), left.end(), right.begin(), right.end(), cmp_char{});
        }
    };
}

namespace vcpkg
{
    constexpr CommandMetadata CommandFormatFeatureBaselineMetadata = {
        "format-feature-baseline",
        msgCmdFormatFeatureBaselineSynopsis,
        {msgCmdFormatFeatureBaselineExample},
        Undocumented,
        AutocompletePriority::Public,
        1,
        1,
        {{}, {}, {}},
        nullptr,
    };

    void command_format_feature_baseline_and_exit(const VcpkgCmdArguments& args, const Filesystem& fs)
    {
        auto parsed_args = args.parse_arguments(CommandFormatFeatureBaselineMetadata);
        const Path target_file_name = parsed_args.command_arguments[0];
        auto lines = fs.read_lines(target_file_name).value_or_exit(VCPKG_LINE_INFO);
        const auto last = lines.end();
        for (auto first = lines.begin(); first != last;)
        {
            if (is_comment_line(*first))
            {
                ++first;
                continue;
            }

            auto block_end = first;
            do
            {
                ++block_end;
            } while (block_end != last && !is_comment_line(*block_end));
            std::sort(first, block_end, cmp_str{});
            first = block_end;
        }

        fs.write_lines(target_file_name, lines, VCPKG_LINE_INFO);
        msg::println(msgFeatureBaselineFormatted);
        Checks::exit_success(VCPKG_LINE_INFO);
    }
} // namespace vcpkg
